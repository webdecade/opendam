<?php
// auto-generated by sfPropelCrud
// date: 2010/03/31 04:39:59
?>
<?php

/**
 * permalink actions.
 *
 * @package    media management
 * @subpackage permalink
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class permalinkComponents extends sfComponents
{
	public function executeShow()
	{
		$this->permalink_web = null;
		$this->permalink_original = PermalinkPeer::getByObjectId($this->file->getId(), PermalinkPeer::__TYPE_ORIGINAL, PermalinkPeer::__OBJECT_FILE);
		$this->permalink_internal = PermalinkPeer::getByObjectId($this->file->getId(), PermalinkPeer::__TYPE_CUSTOM, PermalinkPeer::__OBJECT_FILE);

		if(!$this->permalink_original)
		{
			$url = PermalinkPeer::getUrl();
			$qrcode = PermalinkPeer::buildQrCode($this->file->getId(), $url, PermalinkPeer::__OBJECT_FILE);

			$this->permalink_original = new Permalink();
			$this->permalink_original->setType(PermalinkPeer::__TYPE_ORIGINAL);
			$this->permalink_original->setObjectId($this->file->getId());
			$this->permalink_original->setObjectType(PermalinkPeer::__OBJECT_FILE);
			$this->permalink_original->setUserId($this->getUser()->getId());
			$this->permalink_original->setLink($url);
			$this->permalink_original->setQrcode($qrcode);
			$this->permalink_original->setAllowComments(false);
			$this->permalink_original->setState(PermalinkPeer::__STATE_PUBLIC);

			$this->permalink_original->save();

			LogPeer::setLog($this->getUser()->getId(), $this->permalink_original->getId(), "permalink-create", "10");
		}

		if(!$this->permalink_internal)
		{
			$url = PermalinkPeer::getUrl();

			$this->permalink_internal = new Permalink();
			$this->permalink_internal->setType(PermalinkPeer::__TYPE_CUSTOM);
			$this->permalink_internal->setObjectId($this->file->getId());
			$this->permalink_internal->setObjectType(PermalinkPeer::__OBJECT_FILE);
			$this->permalink_internal->setUserId($this->getUser()->getId());
			$this->permalink_internal->setLink($url);
			$this->permalink_internal->setQrcode("");
			$this->permalink_internal->setAllowComments(false);
			$this->permalink_internal->setState(PermalinkPeer::__STATE_PUBLIC);

			$this->permalink_internal->save();
		}

		switch($this->file->getType())
		{
			case FilePeer::__TYPE_VIDEO:
			case FilePeer::__TYPE_PHOTO:
				$this->permalink_web = PermalinkPeer::getByObjectId($this->file->getId(), PermalinkPeer::__TYPE_WEB, PermalinkPeer::__OBJECT_FILE);

				if(!$this->permalink_web)
				{
					$url = PermalinkPeer::getUrl();
					$qrcode = PermalinkPeer::buildQrCode($this->file->getId(), $url, PermalinkPeer::__OBJECT_FILE);

					$this->permalink_web = new Permalink();
					$this->permalink_web->setType(PermalinkPeer::__TYPE_WEB);
					$this->permalink_web->setObjectId($this->file->getId());
					$this->permalink_web->setObjectType(PermalinkPeer::__OBJECT_FILE);
					$this->permalink_web->setUserId($this->getUser()->getId());
					$this->permalink_web->setLink($url);
					$this->permalink_web->setQrcode($qrcode);
					$this->permalink_web->setAllowComments(false);
					$this->permalink_web->setState(PermalinkPeer::__STATE_PUBLIC);
				
					$this->permalink_web->save();

					LogPeer::setLog($this->getUser()->getId(), $this->permalink_web->getId(), "permalink-create", "10");
				}
			break;
		}
	}

	public function executeVideo()
	{
		$this->permalink_original = PermalinkPeer::getByObjectId($this->file->getId(), PermalinkPeer::__TYPE_ORIGINAL, PermalinkPeer::__OBJECT_FILE);
		$this->permalink_web = PermalinkPeer::getByObjectId($this->file->getId(), PermalinkPeer::__TYPE_WEB, PermalinkPeer::__OBJECT_FILE);

		if(!$this->permalink_original)
		{
			$url = PermalinkPeer::getUrl();
			$qrcode = PermalinkPeer::buildQrCode($this->file->getId(), $url, PermalinkPeer::__OBJECT_FILE);

			$this->permalink_original = new Permalink();
			$this->permalink_original->setType(PermalinkPeer::__TYPE_ORIGINAL);
			$this->permalink_original->setObjectId($this->file->getId());
			$this->permalink_original->setObjectType(PermalinkPeer::__OBJECT_FILE);
			$this->permalink_original->setUserId($this->getUser()->getId());
			$this->permalink_original->setLink($url);
			$this->permalink_original->setQrcode($qrcode);
			$this->permalink_original->setAllowComments(false);
			$this->permalink_original->setState(PermalinkPeer::__STATE_PUBLIC);

			$this->permalink_original->save();

			LogPeer::setLog($this->getUser()->getId(), $this->permalink_original->getId(), "permalink-create", "10");
		}

		if(!$this->permalink_web)
		{
			$url = PermalinkPeer::getUrl();
			$qrcode = PermalinkPeer::buildQrCode($this->file->getId(), $url, PermalinkPeer::__OBJECT_FILE);

			$this->permalink_web = new Permalink();
			$this->permalink_web->setType(PermalinkPeer::__TYPE_WEB);
			$this->permalink_web->setObjectId($this->file->getId());
			$this->permalink_web->setObjectType(PermalinkPeer::__OBJECT_FILE);
			$this->permalink_web->setUserId($this->getUser()->getId());
			$this->permalink_web->setLink($url);
			$this->permalink_web->setQrcode($qrcode);
			$this->permalink_web->setAllowComments(false);
			$this->permalink_web->setState(PermalinkPeer::__STATE_PUBLIC);
		
			$this->permalink_web->save();

			LogPeer::setLog($this->getUser()->getId(), $this->permalink_web->getId(), "permalink-create", "10");
		}
	}

	public function executeShowFile()
	{
		$this->permalink_web = null;
		$this->permalink_original = PermalinkPeer::getByObjectId($this->file->getId(), PermalinkPeer::__TYPE_ORIGINAL, PermalinkPeer::__OBJECT_FILE);

		switch($this->file->getType())
		{
			case FilePeer::__TYPE_VIDEO:
			case FilePeer::__TYPE_PHOTO:
				$this->permalink_web = PermalinkPeer::getByObjectId($this->file->getId(), PermalinkPeer::__TYPE_WEB, PermalinkPeer::__OBJECT_FILE);
			break;
		}
	}

	public function executeShowVideo()
	{
		$this->permalink_original = PermalinkPeer::getByObjectId($this->file->getId(), PermalinkPeer::__TYPE_ORIGINAL, PermalinkPeer::__OBJECT_FILE);
		$this->permalink_web = PermalinkPeer::getByObjectId($this->file->getId(), PermalinkPeer::__TYPE_WEB, PermalinkPeer::__OBJECT_FILE);
	}
}
