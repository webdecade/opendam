<?php


/**
 * Skeleton subclass for performing query and update operations on the 'basket_has_content' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Dec 14 10:57:52 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class BasketHasContentPeer extends BaseBasketHasContentPeer
{
	/*________________________________________________________________________________________________________________*/
	public static function doCriteria(array $params = array(), array $orderBy = array(), $limit = null)
	{
		$basketId = isset($params["basketId"]) ? (int)$params["basketId"] : 0;
		
		Assert::ok($basketId > 0);
		
		$criteria = new Criteria();
	
		$criteria->addJoin(self::FILE_ID, FilePeer::ID);
		$criteria->add(FilePeer::STATE, FilePeer::__STATE_VALIDATE);
		
		$c1 = $criteria->getNewCriterion(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::__UNAUTH,
				Criteria::NOT_EQUAL);
		$c2 = $criteria->getNewCriterion(FilePeer::USAGE_DISTRIBUTION_ID, null);
		
		$c1->addOr($c2);
		$criteria->add($c1);
		
		$criteria->add(self::BASKET_ID, $basketId);
		
		CriteriaUtils::buildOrderBy($criteria, $orderBy);
	
		if ($limit) {
			$criteria->setLimit($limit);
		}
	
		return $criteria;
	}
	
	/*________________________________________________________________________________________________________________*/
	public static function getPager($page, $itemPerPage, array $params = array(), array $orderBy = array())
	{
		Assert::ok($page > 0);
		Assert::ok($itemPerPage > 0);
	
		$pager = new sfPropelPager("BasketHasContent", $itemPerPage);
		$pager->setCriteria(self::doCriteria($params, $orderBy));
		$pager->setPage($page);
		$pager->setPeerMethod("doSelect");
		$pager->init();
	
		return $pager;
	}

	/*________________________________________________________________________________________________________________*/
	public static function countFiles($basketId)
	{
		return self::doCount(self::doCriteria(array("basketId" => $basketId)));
	}

	/*________________________________________________________________________________________________________________*/
	public static function searchIntoBasket($basket_id, $file_id)
	{
		$c = new Criteria();
		
		$c->add(self::BASKET_ID, $basket_id);
		$c->add(self::FILE_ID, $file_id);

		return self::doSelectOne($c);
	}

	/*________________________________________________________________________________________________________________*/
	/**
	 * @deprecated
	 * @see getPager
	 */
	public static function getContents($basket_id, $limit = null, $offset = null)
	{
		$connection = Propel::getConnection();

		$query = "	SELECT basket_has_content.*
					FROM basket_has_content, file
					WHERE basket_has_content.file_id = file.id
					AND file.state = ".FilePeer::__STATE_VALIDATE."
					AND (file.usage_distribution_id != ".UsageDistributionPeer::__UNAUTH.
						" OR file.usage_distribution_id IS NULL)
					AND basket_has_content.basket_id = ".$basket_id."
					ORDER BY basket_has_content.created_at DESC";

		if(!empty($limit) || !empty($offset))
			$query .= " LIMIT ".$offset.", ".$limit;

		$statement = $connection->query($query);
		$statement->setFetchMode(PDO::FETCH_NUM); 

		$contents = Array();

		while($rs = $statement->fetch())
		{
			$content = new BasketHasContent();
			$content->hydrate($rs);
			$contents[] = $content;
		}

		$statement->closeCursor();
		$statement = null;

		return $contents;
	}
}
