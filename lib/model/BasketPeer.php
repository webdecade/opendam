<?php


/**
 * Skeleton subclass for performing query and update operations on the 'basket' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Aug 23 16:07:24 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class BasketPeer extends BaseBasketPeer {
	const __STATE_TEMP = 1;
	const __STATE_PUBLIC = 2;
	const __STATE_PRIVATE = 3;

	const __FORMAT_ORIGINAL = 1;
	const __FORMAT_WEB = 2;

	/*________________________________________________________________________________________________________________*/
	public static function doCriteria(array $params = array(), array $orderBy = array(), $limit = null)
	{
		$keyword = isset($params["keyword"]) ? $params["keyword"] : "";
		$userId = isset($params["userId"]) ? (int)$params["userId"] : 0;

		$criteria = new Criteria();

		if ($userId) {
			$criteria->add(self::USER_ID, $userId);
		}

		if ($keyword) {
			$c1 = $criteria->getNewCriterion(self::TITLE, "%".$keyword."%", Criteria::LIKE);
			$c2 = $criteria->getNewCriterion(self::CODE, "%".$keyword."%", Criteria::LIKE);

			$c1->addOr($c2);

			$criteria->add($c1);
		}
	
		CriteriaUtils::buildOrderBy($criteria, $orderBy);
	
		if ($limit) {
			$criteria->setLimit($limit);
		}
	
		return $criteria;
	}

	/*________________________________________________________________________________________________________________*/
	public static function getPager($page, $itemPerPage, array $params = array(), array $orderBy = array())
	{
		Assert::ok($page > 0);
		Assert::ok($itemPerPage > 0);
	
		$pager = new sfPropelPager("Basket", $itemPerPage);
		$pager->setCriteria(self::doCriteria($params, $orderBy));
		$pager->setPage($page);
		$pager->setPeerMethod("doSelect");
		$pager->init();
	
		return $pager;
	}

	/*________________________________________________________________________________________________________________*/
	public static function getCode()
	{
		do{
			$out = myTools::generateurl(6);
			$c = new Criteria();
			$c->add(self::CODE, $out);
		}
		while (self::doCount($c) > 0);
	
		return $out;
	}
	
	/*________________________________________________________________________________________________________________*/
	public static function retrieveByCode($code)
	{
		$c = new Criteria();
		$c->add(self::CODE, $code);
	
		return self::doSelectOne($c);
	}
	
	/*________________________________________________________________________________________________________________*/
	public static function retrieveByTitle($title)
	{
		$c = new Criteria();
		$c->add(self::TITLE, $title);
	
		return self::doSelectOne($c);
	}
	
	/*________________________________________________________________________________________________________________*/
	public static function retrieveByUserId($user_id, $limit = null, $offset = null)
	{
		$c = new Criteria();
		$c->add(self::USER_ID, $user_id);

		if(!empty($limit) || !empty($offset))
		{
			if(empty($limit))
				$limit = 0;

			$c->setLimit($limit);
			$c->setOffset($offset);
		}

		return self::doSelect($c);
	}
}
