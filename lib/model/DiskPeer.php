<?php


/**
 * Skeleton subclass for performing query and update operations on the 'disk' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Mon Sep 26 12:14:49 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class DiskPeer extends BaseDiskPeer 
{
	/*________________________________________________________________________________________________________________*/
	public static function getDiskPager($keyword="", $sort="name_asc", $page=1)
	{
		$c = new Criteria();

		sfContext::getInstance()->getConfiguration()->loadHelpers(array("I18N", "Global"));

		if($keyword && $keyword != __("search") && $keyword != __("Search"))
		{
			$keyword = htmlentities(replaceAccentedCharacters($keyword), ENT_QUOTES);

			$c1 = $c->getNewCriterion(self::NAME, "%".$keyword."%", Criteria::LIKE);
			$c2 = $c->getNewCriterion(self::PAH, "%".$keyword."%", Criteria::LIKE);

			$c1->addOr($c2);
			$c->add($c1);
		}

		switch ($sort)
		{
			default:;
			case "path_asc": $c->addAscendingOrderByColumn(self::PATH); break;
			case "path_desc": $c->addDescendingOrderByColumn(self::PATH); break;
			case "name_asc": $c->addAscendingOrderByColumn(self::NAME); break;
			case "name_desc": $c->addDescendingOrderByColumn(self::NAME); break;
		}

		$c->setDistinct();

		$pager = new sfPropelPager('Disk', 50);
		$pager->setCriteria($c);
		$pager->setPage($page);
		$pager->setPeerMethod('doSelect');
		$pager->init();

		return $pager;
	}

	/*________________________________________________________________________________________________________________*/
	public static function retrieveByCustomer($customer_id)
	{
		$c = new Criteria();
		$c->add(self::CUSTOMER_ID, $customer_id);
		$c->addJoin(self::CUSTOMER_ID, CustomerPeer::ID);
		$c->add(CustomerPeer::STATE, CustomerPeer::__STATE_ACTIVE);

		return self::doSelectOne($c);
	}

	/*________________________________________________________________________________________________________________*/
	public static function getDefault()
	{
		$c = new Criteria();
		$c->add(self::BY_DEFAULT, 1);

		return self::doSelectOne($c);
	}
}
