<?php


/**
 * Skeleton subclass for performing query and update operations on the 'geolocation' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * jeu. 14 fÃ©vr. 2013 06:46:53 CET
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class GeolocationPeer extends BaseGeolocationPeer 
{
	const __TYPE_FILE = 1;
	const __TYPE_FOLDER = 1;

	/*________________________________________________________________________________________________________________*/
	public static function retrieveByObjectIdAndObjectTypeAndGeolocationTypeId($id, $type, $geolocationTypeId)
	{
		$c = new Criteria();
		$c->add(self::OBJECT_ID, $id);
		$c->add(self::OBJECT_TYPE, $type);
		$c->add(self::GEOLOCATION_TYPE_ID, $geolocationTypeId);

		return self::doSelectOne($c);
	}

	/*________________________________________________________________________________________________________________*/
	public static function retrieveByObjectIdAndObjectTypeAndCulture($id, $type, $culture)
	{
		$c = new Criteria();
		$c->addJoin(self::ID, GeolocationI18nPeer::ID);
		$c->add(GeolocationI18nPeer::CULTURE, $culture);
		$c->add(self::OBJECT_ID, $id);
		$c->add(self::OBJECT_TYPE, $type);
		$c->addAscendingOrderByColumn(self::GEOLOCATION_TYPE_ID);

		return self::doSelect($c);
	}

	/*________________________________________________________________________________________________________________*/
	public static function retrieveByObjectIdAndObjectType($id, $type)
	{
		$c = new Criteria();
		$c->add(self::OBJECT_ID, $id);
		$c->add(self::OBJECT_TYPE, $type);

		return self::doSelect($c);
	}

	/*________________________________________________________________________________________________________________*/
	public static function saveGeolocation($object, $type)
	{
		if($object->getLat() && $object->getLng())
		{
			$c = new Criteria();
			$c->addJoin(CulturePeer::ID, CultureI18nPeer::ID);
			$c->add(CultureI18nPeer::CULTURE, sfContext::getInstance()->getUser()->getCulture());

			$cultures = CultureI18nPeer::doSelect($c);

			foreach($cultures as $culture)
			{
				$response = @file_get_contents("https://maps.googleapis.com/maps/api/geocode/xml?latlng=".$object->getLat().",".$object->getLng()."&sensor=false&language=".$culture->getCode());

				if($response)
				{
					$xml = new SimpleXMLElement($response);
					$results = $xml->xpath('/GeocodeResponse/result/address_component');

					foreach($results as $result)
					{
						$geolocationTypes = Array();

						switch($result->type)
						{
							case "street_number":
								$geolocationTypes[GeolocationTypePeer::__STREET_NUMBER] = $result->long_name;
							break;

							case "route":
								$geolocationTypes[GeolocationTypePeer::__ROUTE] = $result->long_name;
							break;

							case "postal_code":
								$geolocationTypes[GeolocationTypePeer::__POSTAL_CODE] = $result->long_name;
							break;

							case "locality":
								$geolocationTypes[GeolocationTypePeer::__CITY] = $result->long_name;
							break;

							case "administrative_area_level_2":
								$geolocationTypes[GeolocationTypePeer::__DEPARTMENT] = $result->long_name;
								$geolocationTypes[GeolocationTypePeer::__DEPARTMENT_NUMBER] = $result->short_name;
							break;

							case "administrative_area_level_1":
								$geolocationTypes[GeolocationTypePeer::__REGION] = $result->long_name;
							break;

							case "country":
								$geolocationTypes[GeolocationTypePeer::__COUNTRY] = $result->long_name;
							break;
						}

						if(!empty($geolocationTypes))
						{
							foreach($geolocationTypes as $geolocationType => $value)
							{
								$geolocation = self::retrieveByObjectIdAndObjectTypeAndGeolocationTypeId($object->getId(), $type, $geolocationType);

								if(!$geolocation)
								{
									$geolocation = new Geolocation();
									$geolocation->setObjectId($object->getId());
									$geolocation->setObjectType($type);
									$geolocation->setGeolocationTypeId($geolocationType);
								}

								$geolocation->setCulture($culture->getCode());
								$geolocation->setValue($value);

								$geolocation->save();
							}
						}
					}
				}
			}
		}
		else
		{
			$geolocation = self::retrieveByObjectIdAndObjectType($object->getId(), $type);

			if($geolocation)
				$geolocation->delete();
		}
	}
}
