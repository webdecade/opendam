<?php


/**
 * Skeleton subclass for performing query and update operations on the 'groupe_constraint' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Nov 16 10:48:28 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class GroupeConstraintPeer extends BaseGroupeConstraintPeer 
{
	/*________________________________________________________________________________________________________________*/
	public static function retrieveByRoleId($groupe_id, $role_id = null)
	{
		$connection = Propel::getConnection();

		if(empty($role_id))
			$role_id = "IS NULL";
		else
			$role_id = "= ".$connection->quote($role_id);

		$query = "	SELECT groupe_constraint.constraint_id
					FROM groupe_constraint, `constraint`
					WHERE groupe_constraint.constraint_id = constraint.id
					AND constraint.role_id ".$role_id."
					AND groupe_constraint.groupe_id = ".$connection->quote($groupe_id);

		$statement = $connection->query($query);
		$statement->setFetchMode(PDO::FETCH_NUM); 

		$constraints = array();
		while ($rs = $statement->fetch())
		{
			$constraints[] = $rs[0];
		}

		$statement->closeCursor();
		$statement = null;

		return $constraints;
	}

	/*________________________________________________________________________________________________________________*/
	public static function retrieveByGroupeId($groupe_id)
	{
		$c = new Criteria();
		$c->add(self::GROUPE_ID, $groupe_id);

		return self::doSelect($c);
	}

	/*________________________________________________________________________________________________________________*/
	public static function deleteByGroupeId($groupe_id)
	{
		$constraints = self::retrieveByGroupeId($groupe_id);

		foreach($constraints as $constraint)
			$constraint->delete();
	}

	/*________________________________________________________________________________________________________________*/
	public static function isAllowedTo($groupe_id, $constraint_id)
	{
		$c = new Criteria();
		$c->add(self::GROUPE_ID, $groupe_id);
		$c->add(self::CONSTRAINT_ID, $constraint_id);

		return self::doCount($c) > 0 ? true : false;
	}

	/*________________________________________________________________________________________________________________*/
	public static function retrieveByGroupeIdAndConstraintId($groupeId, $constraintId)
	{
		$criteria = new Criteria();
		$criteria->add(self::GROUPE_ID, $groupeId);
		$criteria->add(self::CONSTRAINT_ID, $constraintId);
	
		return self::doSelectOne($criteria);
	}
}
