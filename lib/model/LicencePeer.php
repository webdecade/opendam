<?php


/**
 * Skeleton subclass for performing query and update operations on the 'licence' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * lun. 23 janv. 2012 12:31:23 CET
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class LicencePeer extends BaseLicencePeer 
{
	const __PUBLIC_DOMAIN = 1;
	const __INTERNAL = 2;
	const __COPYRIGHT = 3;
	const __CREATIVE_COMMONS = 4;
	const __NONE = 5;

	/*________________________________________________________________________________________________________________*/
	public static function getLicenceInArray()
	{
		$c = new Criteria();
		
		$c->addJoin(LicenceI18nPeer::ID, self::ID);
		$c->add(LicenceI18nPeer::CULTURE, sfContext::getInstance()->getUser()->getCulture());
		$c->addAscendingOrderByColumn(LicenceI18nPeer::TITLE);

		return self::doSelectWithI18n($c);
	}

	/*________________________________________________________________________________________________________________*/
	public static function getLicenceForFiles($file_ids)
	{
		$licences = Array();

		foreach($file_ids as $file_id)
		{
			$file = FilePeer::retrieveByPk($file_id);

			if($file && $file->getLicenceId())
			{
				$licence = self::retrieveByPk($file->getLicenceId());

				if(!in_array($licence, $licences))
					$licences[$licence->getId()] = $licence;
			}
		}

		return $licences;
	}

	/*________________________________________________________________________________________________________________*/
	public static function getLicenceForFolders($folder_ids)
	{
		$licences = Array();

		foreach($folder_ids as $folder_id)
		{
			$folder = FolderPeer::retrieveByPk($folder_id);

			if($folder && $folder->getLicenceId())
			{
				$licence = self::retrieveByPk($folder->getLicenceId());

				if(!in_array($licence, $licences))
					$licences[$licence->getId()] = $licence;
			}
		}

		return $licences;
	}
}
