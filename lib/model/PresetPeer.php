<?php


/**
 * Skeleton subclass for performing query and update operations on the 'preset' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * jeu. 12 juil. 2012 11:50:06 CEST
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class PresetPeer extends BasePresetPeer {
	
	/*________________________________________________________________________________________________________________*/
	public static function doCriteria(array $params = array(), array $orderBy = array(), $limit = null)
	{
		$keyword = isset($params["keyword"]) ? $params["keyword"] : "";
		$customerId = isset($params["customerId"]) ? (int)$params["customerId"] : 0;

		$criteria = new Criteria();
	
		if ($customerId) {
			$criteria->add(self::CUSTOMER_ID, $customerId);
		}
	
		if ($keyword) {
			$c1 = $criteria->getNewCriterion(self::NAME, "%".$keyword."%", Criteria::LIKE);
			$criteria->add($c1);
		}
	
		CriteriaUtils::buildOrderBy($criteria, $orderBy);
	
		if ($limit) {
			$criteria->setLimit($limit);
		}
	
		return $criteria;
	}

	/*________________________________________________________________________________________________________________*/
	public static function getPager($page, $itemPerPage, array $params = array(), array $orderBy = array())
	{
		Assert::ok($page > 0);
		Assert::ok($itemPerPage > 0);
	
		$pager = new sfPropelPager("Preset", $itemPerPage);
		
		$pager->setCriteria(self::doCriteria($params, $orderBy));
		$pager->setPage($page);
		$pager->setPeerMethod("doSelect");
		$pager->init();
	
		return $pager;
	}
	
	/*________________________________________________________________________________________________________________*/
	/*________________________________________________________________________________________________________________*/
	/*________________________________________________________________________________________________________________*/
	/*________________________________________________________________________________________________________________*/
	
	/*________________________________________________________________________________________________________________*/
	public static function retrieveByNameAndCustomerId($name, $customer_id)
	{
		$c = new Criteria();
		
		$c->add(self::NAME, $name);
		$c->add(self::CUSTOMER_ID, $customer_id);

		return self::doSelectOne($c);
	}

	/*________________________________________________________________________________________________________________*/
	public static function retrieveByCustomerId($customer_id, $limit = null, $offset = null)
	{
		$c = new Criteria();
		$c->add(self::CUSTOMER_ID, $customer_id);

		if(!empty($limit) || !empty($offset))
		{
			if(empty($limit))
				$limit = 0;

			$c->setLimit($limit);
			$c->setOffset($offset);
		}

		return self::doSelect($c);
	}

	/*________________________________________________________________________________________________________________*/
	/**
	 * @deprecated
	 */
	public static function getPresetPager($customer_id, $sort = "name_asc", $keyword = "", $page = 1)
	{
		$c = new Criteria();
		$c->add(self::CUSTOMER_ID, $customer_id);

		switch($sort)
		{
			case "name_asc": $c->addAscendingOrderByColumn(self::NAME); break;
			case "name_desc": $c->addDescendingOrderByColumn(self::NAME); break;
		}

		sfContext::getInstance()->getConfiguration()->loadHelpers(array("I18N", "Global"));

		if($keyword && $keyword != __("search") && $keyword != __("Search"))
		{
			$keyword = htmlentities(replaceAccentedCharacters($keyword), ENT_QUOTES);

			$c1 = $c->getNewCriterion(self::NAME, "%".$keyword."%", Criteria::LIKE);

			$c->add($c1);
		}

		$pager = new sfPropelPager('Preset', 50);
		
		$pager->setCriteria($c);
		$pager->setPage($page);
		$pager->setPeerMethod('doSelect');
		$pager->init();

		return $pager;
	}
}
