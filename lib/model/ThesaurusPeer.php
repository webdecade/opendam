<?php


/**
 * Skeleton subclass for performing query and update operations on the 'thesaurus' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * mar. 03 juil. 2012 14:55:01 CEST
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class ThesaurusPeer extends BaseThesaurusPeer 
{
	const __TYPE_CLASS = 1;
	const __TYPE_TAG = 2;

	/*________________________________________________________________________________________________________________*/
	public static function getBreadCrumbTxt($thesaurusId, $culture, $txt = '')
	{
		$c = new Criteria();
		
		$c->add(self::ID, $thesaurusId);
		$c->add(self::CULTURE_ID, $culture);
		$c->add(self::TYPE, self::__TYPE_CLASS);
		$c->add(self::CUSTOMER_ID, sfContext::getInstance()->getUser()->getCustomerId());
		$c->addJoin(self::CUSTOMER_ID, CustomerPeer::ID);
		$c->add(CustomerPeer::STATE, CustomerPeer::__STATE_ACTIVE);
		$thesaurus_ = self::doSelect($c);

		foreach($thesaurus_ as $thesaurus)
			$txt .= self::getBreadCrumbTxt($thesaurus->getParentId(), $culture, $thesaurus."|");

		return $txt;
	}

	/*________________________________________________________________________________________________________________*/
	public static function getAllThesaurusPath($culture)
	{
		$c = new Criteria();
		
		$c->add(self::CULTURE_ID, $culture);
		$c->add(self::TYPE, self::__TYPE_CLASS);
		$c->add(self::CUSTOMER_ID, sfContext::getInstance()->getUser()->getCustomerId());
		$c->addJoin(self::CUSTOMER_ID, CustomerPeer::ID);
		$c->add(CustomerPeer::STATE, CustomerPeer::__STATE_ACTIVE);
		$thesaurus_ = self::doSelect($c);

		$thesaurus_array = array();
		
		foreach($thesaurus_ as $thesaurus)
		{
			$bread = explode('|',self::getBreadCrumbTxt($thesaurus->getId(), $culture));
			array_splice($bread, count($bread) - 1);
			krsort($bread);
			$txt = '';
			
			foreach($bread as $case)
				$txt .= $case.'/';
			
			$thesaurus_array[$thesaurus->getId()] = substr($txt, 0, -1);
		}

		return $thesaurus_array;
	}

	/*________________________________________________________________________________________________________________*/
	public static function getPager($keyword = "", $sort = "name_asc", $page = 1)
	{
		$c = new Criteria();
		
		$c->add(self::CUSTOMER_ID, sfContext::getInstance()->getUser()->getCustomerId());
		$c->addJoin(self::CUSTOMER_ID, CustomerPeer::ID);
		$c->add(CustomerPeer::STATE, CustomerPeer::__STATE_ACTIVE);

		if($keyword && $keyword != __("search") && $keyword != __("Search"))
		{
			$keyword = htmlentities(replaceAccentedCharacters($keyword), ENT_QUOTES);

			$c1 = $c->getNewCriterion(self::TITLE, "%".$keyword."%", Criteria::LIKE);
			$c->add($c1);
		}

		switch ($sort)
		{
			case "name_asc": $c->addAscendingOrderByColumn(self::TITLE); break;
			case "name_desc": $c->addDescendingOrderByColumn(self::TITLE); break;
			case "type_asc": $c->addAscendingOrderByColumn(self::TYPE); break;
			case "type_desc": $c->addDescendingOrderByColumn(self::TYPE); break;
		}

		$pager = new sfPropelPager('Thesaurus', 50);
		$pager->setCriteria($c);
		$pager->setPage($page);
		$pager->setPeerMethod('doSelect');
		$pager->init();

		return $pager;
	}

	/*________________________________________________________________________________________________________________*/
	public static function recursiveDelete($id)
	{
		$c = new Criteria();
		$c->add(self::PARENT_ID, $id);

		$thesaurus_ = self::doSelect($c);

		foreach($thesaurus_ as $thesaurus)
		{
			$temp = $thesaurus->getId();
			$thesaurus->delete();

			self::recursiveDelete($temp);
		}
	}

	/*________________________________________________________________________________________________________________*/
	public static function hasThesaurus($customer_id)
	{
		$c = new Criteria();
		
		$c->add(self::CUSTOMER_ID, $customer_id);
		$c->addJoin(self::CUSTOMER_ID, CustomerPeer::ID);
		$c->add(CustomerPeer::STATE, CustomerPeer::__STATE_ACTIVE);

		return self::doCount($c) > 0 ? true : false;
	}

	/*________________________________________________________________________________________________________________*/
	public static function retrieveByTitleAndParentIdAndCustomerId($title, $parent_id, $customer_id)
	{
		$c = new Criteria();
		
		$c->add(self::TITLE, $title);
		$c->add(self::PARENT_ID, $parent_id);
		$c->add(self::CUSTOMER_ID, $customer_id);

		return self::doSelectOne($c);
	}

	/*________________________________________________________________________________________________________________*/
	public static function retrieveByCustomerId($customer_id)
	{
		$c = new Criteria();
		$c->add(self::CUSTOMER_ID, $customer_id);

		return self::doSelectOne($c);
	}
}
