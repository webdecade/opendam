<?php


/**
 * Skeleton subclass for performing query and update operations on the 'usage_limitation' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * jeu. 26 janv. 2012 16:31:12 CET
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class UsageLimitationPeer extends BaseUsageLimitationPeer
{
	const __TIME_LIMIT = 1;
	const __GEO_LIMIT = 2;
	const __NB_VIEWS = 3;
	const __NB_PRINTS = 4;
	const __SUPPORT = 5;
	const __INTERNAL = 6;

	/*________________________________________________________________________________________________________________*/
	public static function getLimitations()
	{
		$c = new Criteria();
		
		$c->addJoin(UsageLimitationI18nPeer::ID, self::ID);
		$c->add(UsageLimitationI18nPeer::CULTURE, sfContext::getInstance()->getUser()->getCulture());
		$c->addAscendingOrderByColumn(UsageLimitationI18nPeer::TITLE);

		return self::doSelectWithI18n($c);
	}

	/*________________________________________________________________________________________________________________*/
	public static function getLimitationForFiles($file_ids)
	{
		$limitations = Array();

		foreach($file_ids as $file_id)
		{
			$file = FilePeer::retrieveByPk($file_id);

			if($file)
			{
				$file_rights = FileRightPeer::retrieveByType($file->getId(), 3);

				if($file_rights)
				{
					foreach($file_rights as $file_right)
					{
						$limitation = self::retrieveByPk($file_right->getUsageLimitationId());

						if(!in_array($limitation, $limitations))
							$limitations[$limitation->getId()] = $limitation;
					}
				}
			}
		}

		return $limitations;
	}

	/*________________________________________________________________________________________________________________*/
	public static function getConstraintForFolders($folder_ids)
	{
		$limitations = Array();

		foreach($folder_ids as $folder_id)
		{
			$folder = FolderPeer::retrieveByPk($folder_id);

			if($folder)
			{
				$file_rights = FileRightPeer::retrieveByType($folder->getId(), 2);

				if($file_rights)
				{
					foreach($file_rights as $file_right)
					{
						$limitation = self::retrieveByPk($file_right->getUsageLimitationId());

						if(!in_array($limitation, $limitations))
							$limitations[$limitation->getId()] = $limitation;
					}
				}
			}
		}

		return $limitations;
	}
}
