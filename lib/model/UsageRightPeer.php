<?php


/**
 * Skeleton subclass for performing query and update operations on the 'usage_right' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Jul  5 11:22:21 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class UsageRightPeer extends BaseUsageRightPeer
{
	/*________________________________________________________________________________________________________________*/
	public static function getParent($id, $txt = "")
	{
		$right = self::retrieveByPk($id);

		if ($right) {
			return self::getParent($right->getRightId(), $right->getId()."|".$txt);
		}
		
		return $txt;
	}

	/*________________________________________________________________________________________________________________*/
	public static function getUsageRightForSelect($id = null)
	{
		$c = new Criteria();
		
		$c->addJoin(UsageRightI18nPeer::ID, self::ID);
		$c->add(self::RIGHT_ID, $id);
		$c->add(UsageRightI18nPeer::CULTURE, sfContext::getInstance()->getUser()->getCulture());

		$options = self::doSelect($c);

		$options_array = array();

		foreach ($options as $option){
			$options_array[$option->getId()] = $option;
		}

		return $options_array;
	}

	/*________________________________________________________________________________________________________________*/
	public static function getAllTitle($id, $txt = "")
	{
		$right = self::retrieveByPk($id);

		if ($right) {
			return self::getAllTitle($right->getRightId(), $right->getTitle()." / ".$txt);
		}
		
		return $txt;
	}

	/*________________________________________________________________________________________________________________*/
	public static function retrieveByTitle($title)
	{
		$c = new Criteria();
		
		$c->addJoin(UsageRightI18nPeer::ID, self::ID);
		$c->add(UsageRightI18nPeer::TITLE, $title);

		return self::doSelectOne($c);
	}

	/*________________________________________________________________________________________________________________*/
	public static function retrieveByTitleInSelect($title, $usage_rights=array())
	{
		$c = new Criteria();
		
		$c->addJoin(UsageRightI18nPeer::ID, self::ID);
		$c->add(UsageRightI18nPeer::TITLE, $title);

		if (sizeof($usage_rights)) {
			$c->add(self::ID, $usage_rights, Criteria::IN);
		}
		
		$options = self::doSelect($c);

		$options_array = array();

		foreach ($options as $option){
			$options_array[$option->getId()] = $option;
		}

		return $options_array;
	}

	/*________________________________________________________________________________________________________________*/
	public static function getRight($id = null)
	{
		$c = new Criteria();
		
		$c->addJoin(UsageRightI18nPeer::ID, self::ID);

		if ($id) {
			$c->add(self::ID, array($id), Criteria::NOT_IN);
		}
		
		$options = self::doSelect($c);
		$options_array = array();

		foreach ($options as $option){
			$options_array[$option->getId()] = $option->getAllTitle();
		}

		return $options_array;
	}

	/*________________________________________________________________________________________________________________*/
	/*public static function retrieveByPK($pk, PropelPDO $con = null)
	{
		if (null !== ($obj = UsageRightPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(UsageRightPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(UsageRightPeer::DATABASE_NAME);
		$criteria->add(UsageRightPeer::ID, $pk);

		$v = UsageRightPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}*/

	/*________________________________________________________________________________________________________________*/
	/*public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(UsageRightPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(UsageRightPeer::DATABASE_NAME);
			$criteria->add(UsageRightPeer::ID, $pks, Criteria::IN);
			$objs = UsageRightPeer::doSelect($criteria, $con);
		}
		return $objs;
	}*/

	/*________________________________________________________________________________________________________________*/
	public static function getOptionPager($keyword="", $sort="title_asc", $page=1)
	{
		$c = new Criteria();
		
		$c->addJoin(UsageRightI18nPeer::ID, self::ID);

		sfContext::getInstance()->getConfiguration()->loadHelpers(array("I18N", "Global"));

		if($keyword && $keyword != __("search") && $keyword != __("Search"))
		{
			$keyword = htmlentities(replaceAccentedCharacters($keyword), ENT_QUOTES);

			$c1 = $c->getNewCriterion(UsageRightI18nPeer::TITLE, "%".$keyword."%", Criteria::LIKE);
			$c->add($c1);
		}

		switch ($sort) {
		  default:;
			case "title_asc": $c->addAscendingOrderByColumn(UsageRightI18nPeer::TITLE); break;
			case "title_desc": $c->addDescendingOrderByColumn(UsageRightI18nPeer::TITLE); break;
			case "desc_asc": $c->addAscendingOrderByColumn(UsageRightI18nPeer::DESCRIPTION); break;
			case "desc_desc": $c->addDescendingOrderByColumn(UsageRightI18nPeer::DESCRIPTION); break;
		}

		$c->setDistinct();

		$pager = new sfPropelPager('UsageRight', 50);
		$pager->setCriteria($c);
		$pager->setPage($page);
		$pager->setPeerMethod('doSelect');
		$pager->init();

		return $pager;
	}
}
