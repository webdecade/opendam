<?php


/**
 * Skeleton subclass for performing query and update operations on the 'usage_support' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * jeu. 26 janv. 2012 16:40:15 CET
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class UsageSupportPeer extends BaseUsageSupportPeer 
{
	/*________________________________________________________________________________________________________________*/
	public static function getSupports()
	{
		$c = new Criteria();
		
		$c->addJoin(UsageSupportI18nPeer::ID, self::ID);
		$c->add(UsageSupportI18nPeer::CULTURE, sfContext::getInstance()->getUser()->getCulture());
		$c->addAscendingOrderByColumn(UsageSupportI18nPeer::TITLE);

		return self::doSelectWithI18n($c);
	}

	/*________________________________________________________________________________________________________________*/
	public static function retrieveByCustomerId($customer_id, $culture = null, $limit = null, $offset = null)
	{
		$c = new Criteria();
		$c->addJoin(UsageSupportI18nPeer::ID, self::ID);

		if (!$culture) {
			$c->add(UsageSupportI18nPeer::CULTURE, sfContext::getInstance()->getUser()->getCulture());
		}
		else {
			$c->add(UsageSupportI18nPeer::CULTURE, $culture);
		}
		
		$c->add(self::CUSTOMER_ID, $customer_id);
		$c->addJoin(self::CUSTOMER_ID, CustomerPeer::ID);
		$c->add(CustomerPeer::STATE, CustomerPeer::__STATE_ACTIVE);
		$c->addAscendingOrderByColumn(UsageSupportI18nPeer::TITLE);

		if (!empty($limit) || !empty($offset)) {
			if (empty($limit)) {
				$limit = 0;
			}
			
			$c->setLimit($limit);
			$c->setOffset($offset);
		}

		return self::doSelect($c);
	}

	/*________________________________________________________________________________________________________________*/
	public static function retrieveByTitleAndCustomerID($title, $customer_id)
	{
		$c = new Criteria();
		
		$c->addJoin(UsageSupportI18nPeer::ID, self::ID);
		$c->add(self::CUSTOMER_ID, $customer_id);
		$c->addJoin(self::CUSTOMER_ID, CustomerPeer::ID);
		$c->add(CustomerPeer::STATE, CustomerPeer::__STATE_ACTIVE);
		$c->add(UsageSupportI18nPeer::TITLE, $title);

		return self::doSelectOne($c);
	}
	
	/*________________________________________________________________________________________________________________*/
	/**
	 * @deprecated
	 */
	public static function exixts($title, $customer_id)
	{
		return self::exists($title, $customer_id);
	}

	/*________________________________________________________________________________________________________________*/
	public static function exists($title, $customer_id)
	{
		$c = new Criteria();
	
		$c->addJoin(UsageSupportI18nPeer::ID, self::ID);
		$c->add(UsageSupportI18nPeer::TITLE, $title);
	
		$c1 = $c->getNewCriterion(self::CUSTOMER_ID, null);
		$c2 = $c->getNewCriterion(self::CUSTOMER_ID, $customer_id);
	
		$c1->addOr($c2);
		$c->add($c1);
	
		return self::doCount($c) > 0 ? true : false;
	}
}
