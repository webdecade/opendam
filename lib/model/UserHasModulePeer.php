<?php


/**
 * Skeleton subclass for performing query and update operations on the 'user_has_module' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * jeu. 22 mars 2012 17:16:21 CET
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class UserHasModulePeer extends BaseUserHasModulePeer
{
	/*________________________________________________________________________________________________________________*/
	public static function doCriteria(array $params = array(), array $orderBy = array(), $limit = null)
	{
		$userId = isset($params["userId"]) ? (int)$params["userId"] : 0;
	
		$criteria = new Criteria();
	
		$criteria->addJoin(self::MODULE_ID, ModulePeer::ID, Criteria::INNER_JOIN);
		$criteria->addJoin(ModulePeer::ID, ModuleI18nPeer::ID);
		$criteria->add(ModuleI18nPeer::CULTURE, sfContext::getInstance()->getUser()->getCulture());
	
		$orderBy = array(ModuleI18nPeer::TITLE => "asc");
	
		if ($userId) {
			$criteria->add(self::USER_ID, $userId);
		}
	
		CriteriaUtils::buildOrderBy($criteria, $orderBy);
	
		if ($limit) {
			$criteria->setLimit($limit);
		}
	
		return $criteria;
	}
	
	/*________________________________________________________________________________________________________________*/
	public static function findBy(array $params = array(), array $orderBy = array(), $limit = 0)
	{
		return self::doSelect(self::doCriteria($params, $orderBy, $limit));
	}
	
	/*________________________________________________________________________________________________________________*/
	/**
	 * Renvoi les modules à ajouter à l'utilisateur.
	 * (Les modules avec la visibilité user et pas déjà ajouté et qui sont présent et actif dans 
	 * les modules de customer)
	 *
	 * @param integer $userId
	 *
	 * @return Module[]
	 */
	public static function getModulesCanAdd(User $user)
	{	
		$criteria = new Criteria();
	
		$criteria->addJoin(ModulePeer::ID, ModuleI18nPeer::ID);
		$criteria->add(ModuleI18nPeer::CULTURE, sfContext::getInstance()->getUser()->getCulture());
	
		$criteria->addJoin(ModulePeer::ID, ModuleHasVisibilityPeer::MODULE_ID, Criteria::INNER_JOIN);
		$criteria->add(ModuleHasVisibilityPeer::MODULE_VISIBILITY_ID, ModuleVisibilityPeer::__USER);
	
		// uniquement les modules de présent dans customer
		$criteria->addJoin(ModulePeer::ID, CustomerHasModulePeer::MODULE_ID, Criteria::INNER_JOIN);
		$criteria->add(CustomerHasModulePeer::CUSTOMER_ID, $user->getCustomerId());
		$criteria->add(CustomerHasModulePeer::ACTIVE, true);
		
		$notInCriteria = new Criteria();
		$notInCriteria->add(self::USER_ID, $user->getId());
	
		CriteriaUtils::setSelectColumn($notInCriteria, self::MODULE_ID);
	
		$criteria->add(ModulePeer::ID, ModulePeer::ID." NOT IN(".CriteriaUtils::buidSqlFromCriteria($notInCriteria).")",
				Criteria::CUSTOM);
	
		CriteriaUtils::buildOrderBy($criteria, array(ModuleI18nPeer::TITLE => "asc"));
	
		return ModulePeer::doSelectWithI18n($criteria);
	}

	/*________________________________________________________________________________________________________________*/
	/**
	 * 
	 * @param integer $userId
	 * @param integer $moduleId
	 * 
	 * @return UserHasModule
	 */
	public static function retrieveByUserAndModule($userId, $moduleId)
	{
		Assert::ok($userId > 0);
		Assert::ok($moduleId > 0);
	
		$criteria = new Criteria();
	
		$criteria->add(self::USER_ID, $userId);
		$criteria->add(self::MODULE_ID, $moduleId);
	
		return self::doSelectOne($criteria);
	}
	
	/*________________________________________________________________________________________________________________*/
	/**
	 * @deprecated
	 */
	public static function retrieveByModuleAndUser($module_id, $user_id)
	{
		$c = new Criteria();

		$c->add(self::USER_ID, $user_id);
		$c->addJoin(self::USER_ID, UserPeer::ID);
		$c->add(UserPeer::STATE, UserPeer::__STATE_ACTIVE);
		$c->add(self::MODULE_ID, $module_id);

		return self::doSelectOne($c);
	}

	/*________________________________________________________________________________________________________________*/
	public static function addModuleToAll($module_id)
	{
		$c = new Criteria();
		$c->add(self::MODULE_ID, $module_id);
		$modules = self::doSelect($c);

		$tab_users = Array();
		foreach($modules as $module)
			$tab_users[] = $module->getUserId();

		$c = new Criteria();
		$c->add(UserPeer::ID, $tab_users, Criteria::NOT_IN);
		$c->addJoin(self::USER_ID, UserPeer::ID);
		$c->add(UserPeer::STATE, UserPeer::__STATE_ACTIVE);
		$users = UserPeer::doSelect($c);

		foreach($users as $user) {
			$module = new UserHasModule();
			$module->setUserId($user->getId());
			$module->setModuleId($id_module);
			$module->setActive(true);

			$module->save();
		}
	}

	/*________________________________________________________________________________________________________________*/
	/**
	 * @deprecated
	 */
	public static function getMyModule($user_id)
	{
		$c = new Criteria();
		$c->add(self::USER_ID, $user_id);
		$c->addJoin(self::USER_ID, UserPeer::ID);
		$c->add(UserPeer::STATE, UserPeer::__STATE_ACTIVE);
		$c->addAscendingOrderByColumn(self::MODULE_ID);
		$modules = self::doSelect($c);

		return ($modules > 0 ? $modules : null);
	}

	/*________________________________________________________________________________________________________________*/
	/**
	 * @deprecated
	 */
	public static function getMyModuleIdInArray($user_id)
	{
		$modules = self::getMyModule($user_id);

		$modules_array = array();

		foreach ($modules as $module)
			$modules_array[] = $module->getModuleId();

		return $modules_array;
	}

	/*________________________________________________________________________________________________________________*/
	public static function deleteByUserId($user_id)
	{
		$user = UserPeer::retrieveByPk($user_id);

		if($user->getState() == UserPeer::__STATE_ACTIVE)
		{
			$c = new Criteria();
			$c->add(self::USER_ID, $user_id);

			self::doDelete($c);
		}
	}

	/*________________________________________________________________________________________________________________*/
	public static function updateModule($module_id, $user_id, $value)
	{
		$module = ModulePeer::retrieveByPk($module_id);
		$values = ModuleValuePeer::retrieveByModuleId($module->getId());
		$find = null;

		foreach($values as $value_)
		{
			if($value_->getValue() == $value_)
				$find = $value_;
		}

		if(!$find)
		{
			$find = new ModuleValue();
			$find->setModuleId($module->getId());
			$find->setValue($value);
			$find->save();
		}

		if($userHasModule = self::retrieveByModuleAndUser($module->getId(), $user_id))
		{
			$userHasModule->setModuleValueId($find->getId());
			$userHasModule->setActive(true);
		}
		else
		{
			$userHasModule = new UserHasModule();
			$userHasModule->setUserId($user_id);
			$userHasModule->setModuleId($module->getId());
			$userHasModule->setModuleValueId($find->getId());
			$userHasModule->setActive(true);
		}

		$userHasModule->save();
	}

	/*________________________________________________________________________________________________________________*/
	public static function haveAccessModule($module_id, $user_id)
	{
		$user = UserPeer::retrieveByPk($user_id);
		
		$userModule = UserHasModulePeer::retrieveByModuleAndUser($module_id, $user_id);

		if($userModule)
			return $userModule->getActive(); 
		else
			return -1;
	}
} // UserHasModulePeer
