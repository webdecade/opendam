<?php

/**
 * Base class that represents a row from the 'customer' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Oct 31 14:46:46 2013
 *
 * @package    lib.model.om
 */
abstract class BaseCustomer extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CustomerPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the company field.
	 * @var        string
	 */
	protected $company;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the first_name field.
	 * @var        string
	 */
	protected $first_name;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the address field.
	 * @var        string
	 */
	protected $address;

	/**
	 * The value for the address_bis field.
	 * @var        string
	 */
	protected $address_bis;

	/**
	 * The value for the zip field.
	 * @var        string
	 */
	protected $zip;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the country_id field.
	 * @var        int
	 */
	protected $country_id;

	/**
	 * The value for the phone field.
	 * @var        string
	 */
	protected $phone;

	/**
	 * The value for the mobile field.
	 * @var        string
	 */
	protected $mobile;

	/**
	 * The value for the fax field.
	 * @var        string
	 */
	protected $fax;

	/**
	 * The value for the siret field.
	 * @var        string
	 */
	protected $siret;

	/**
	 * The value for the ape field.
	 * @var        string
	 */
	protected $ape;

	/**
	 * The value for the tva field.
	 * @var        string
	 */
	protected $tva;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the state field.
	 * @var        int
	 */
	protected $state;

	/**
	 * The value for the activated_at field.
	 * @var        string
	 */
	protected $activated_at;

	/**
	 * @var        Country
	 */
	protected $aCountry;

	/**
	 * @var        array Groupe[] Collection to store aggregation of Groupe objects.
	 */
	protected $collGroupes;

	/**
	 * @var        Criteria The criteria used to select the current contents of collGroupes.
	 */
	private $lastGroupeCriteria = null;

	/**
	 * @var        array Log[] Collection to store aggregation of Log objects.
	 */
	protected $collLogs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLogs.
	 */
	private $lastLogCriteria = null;

	/**
	 * @var        array Tag[] Collection to store aggregation of Tag objects.
	 */
	protected $collTags;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTags.
	 */
	private $lastTagCriteria = null;

	/**
	 * @var        array Unit[] Collection to store aggregation of Unit objects.
	 */
	protected $collUnits;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUnits.
	 */
	private $lastUnitCriteria = null;

	/**
	 * @var        array User[] Collection to store aggregation of User objects.
	 */
	protected $collUsers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUsers.
	 */
	private $lastUserCriteria = null;

	/**
	 * @var        array CustomerHasModule[] Collection to store aggregation of CustomerHasModule objects.
	 */
	protected $collCustomerHasModules;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCustomerHasModules.
	 */
	private $lastCustomerHasModuleCriteria = null;

	/**
	 * @var        array Disk[] Collection to store aggregation of Disk objects.
	 */
	protected $collDisks;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDisks.
	 */
	private $lastDiskCriteria = null;

	/**
	 * @var        array UsageSupport[] Collection to store aggregation of UsageSupport objects.
	 */
	protected $collUsageSupports;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUsageSupports.
	 */
	private $lastUsageSupportCriteria = null;

	/**
	 * @var        array Thesaurus[] Collection to store aggregation of Thesaurus objects.
	 */
	protected $collThesauruss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collThesauruss.
	 */
	private $lastThesaurusCriteria = null;

	/**
	 * @var        array Preset[] Collection to store aggregation of Preset objects.
	 */
	protected $collPresets;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPresets.
	 */
	private $lastPresetCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'CustomerPeer';

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [company] column value.
	 * 
	 * @return     string
	 */
	public function getCompany()
	{
		return $this->company;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [first_name] column value.
	 * 
	 * @return     string
	 */
	public function getFirstName()
	{
		return $this->first_name;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{
		return $this->address;
	}

	/**
	 * Get the [address_bis] column value.
	 * 
	 * @return     string
	 */
	public function getAddressBis()
	{
		return $this->address_bis;
	}

	/**
	 * Get the [zip] column value.
	 * 
	 * @return     string
	 */
	public function getZip()
	{
		return $this->zip;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [country_id] column value.
	 * 
	 * @return     int
	 */
	public function getCountryId()
	{
		return $this->country_id;
	}

	/**
	 * Get the [phone] column value.
	 * 
	 * @return     string
	 */
	public function getPhone()
	{
		return $this->phone;
	}

	/**
	 * Get the [mobile] column value.
	 * 
	 * @return     string
	 */
	public function getMobile()
	{
		return $this->mobile;
	}

	/**
	 * Get the [fax] column value.
	 * 
	 * @return     string
	 */
	public function getFax()
	{
		return $this->fax;
	}

	/**
	 * Get the [siret] column value.
	 * 
	 * @return     string
	 */
	public function getSiret()
	{
		return $this->siret;
	}

	/**
	 * Get the [ape] column value.
	 * 
	 * @return     string
	 */
	public function getApe()
	{
		return $this->ape;
	}

	/**
	 * Get the [tva] column value.
	 * 
	 * @return     string
	 */
	public function getTva()
	{
		return $this->tva;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     int
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [optionally formatted] temporal [activated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getActivatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->activated_at === null) {
			return null;
		}


		if ($this->activated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->activated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->activated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = CustomerPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [company] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setCompany($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company !== $v) {
			$this->company = $v;
			$this->modifiedColumns[] = CustomerPeer::COMPANY;
		}

		return $this;
	} // setCompany()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = CustomerPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first_name !== $v) {
			$this->first_name = $v;
			$this->modifiedColumns[] = CustomerPeer::FIRST_NAME;
		}

		return $this;
	} // setFirstName()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = CustomerPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address !== $v) {
			$this->address = $v;
			$this->modifiedColumns[] = CustomerPeer::ADDRESS;
		}

		return $this;
	} // setAddress()

	/**
	 * Set the value of [address_bis] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setAddressBis($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address_bis !== $v) {
			$this->address_bis = $v;
			$this->modifiedColumns[] = CustomerPeer::ADDRESS_BIS;
		}

		return $this;
	} // setAddressBis()

	/**
	 * Set the value of [zip] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setZip($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->zip !== $v) {
			$this->zip = $v;
			$this->modifiedColumns[] = CustomerPeer::ZIP;
		}

		return $this;
	} // setZip()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = CustomerPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [country_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setCountryId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->country_id !== $v) {
			$this->country_id = $v;
			$this->modifiedColumns[] = CustomerPeer::COUNTRY_ID;
		}

		if ($this->aCountry !== null && $this->aCountry->getId() !== $v) {
			$this->aCountry = null;
		}

		return $this;
	} // setCountryId()

	/**
	 * Set the value of [phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->phone !== $v) {
			$this->phone = $v;
			$this->modifiedColumns[] = CustomerPeer::PHONE;
		}

		return $this;
	} // setPhone()

	/**
	 * Set the value of [mobile] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setMobile($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobile !== $v) {
			$this->mobile = $v;
			$this->modifiedColumns[] = CustomerPeer::MOBILE;
		}

		return $this;
	} // setMobile()

	/**
	 * Set the value of [fax] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setFax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax !== $v) {
			$this->fax = $v;
			$this->modifiedColumns[] = CustomerPeer::FAX;
		}

		return $this;
	} // setFax()

	/**
	 * Set the value of [siret] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setSiret($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->siret !== $v) {
			$this->siret = $v;
			$this->modifiedColumns[] = CustomerPeer::SIRET;
		}

		return $this;
	} // setSiret()

	/**
	 * Set the value of [ape] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setApe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ape !== $v) {
			$this->ape = $v;
			$this->modifiedColumns[] = CustomerPeer::APE;
		}

		return $this;
	} // setApe()

	/**
	 * Set the value of [tva] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setTva($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tva !== $v) {
			$this->tva = $v;
			$this->modifiedColumns[] = CustomerPeer::TVA;
		}

		return $this;
	} // setTva()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CustomerPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      int $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = CustomerPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Sets the value of [activated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setActivatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->activated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->activated_at !== null && $tmpDt = new DateTime($this->activated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->activated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CustomerPeer::ACTIVATED_AT;
			}
		} // if either are not null

		return $this;
	} // setActivatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->company = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->first_name = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->email = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->address = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->address_bis = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->zip = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->city = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->country_id = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->phone = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->mobile = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->fax = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->siret = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->ape = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->tva = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->created_at = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->state = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->activated_at = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 19; // 19 = CustomerPeer::NUM_COLUMNS - CustomerPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Customer object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aCountry !== null && $this->country_id !== $this->aCountry->getId()) {
			$this->aCountry = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CustomerPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CustomerPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aCountry = null;
			$this->collGroupes = null;
			$this->lastGroupeCriteria = null;

			$this->collLogs = null;
			$this->lastLogCriteria = null;

			$this->collTags = null;
			$this->lastTagCriteria = null;

			$this->collUnits = null;
			$this->lastUnitCriteria = null;

			$this->collUsers = null;
			$this->lastUserCriteria = null;

			$this->collCustomerHasModules = null;
			$this->lastCustomerHasModuleCriteria = null;

			$this->collDisks = null;
			$this->lastDiskCriteria = null;

			$this->collUsageSupports = null;
			$this->lastUsageSupportCriteria = null;

			$this->collThesauruss = null;
			$this->lastThesaurusCriteria = null;

			$this->collPresets = null;
			$this->lastPresetCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CustomerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCustomer:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				CustomerPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCustomer:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CustomerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCustomer:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			
			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(CustomerPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCustomer:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				CustomerPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCountry !== null) {
				if ($this->aCountry->isModified() || $this->aCountry->isNew()) {
					$affectedRows += $this->aCountry->save($con);
				}
				$this->setCountry($this->aCountry);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CustomerPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CustomerPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CustomerPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collGroupes !== null) {
				foreach ($this->collGroupes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLogs !== null) {
				foreach ($this->collLogs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTags !== null) {
				foreach ($this->collTags as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUnits !== null) {
				foreach ($this->collUnits as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUsers !== null) {
				foreach ($this->collUsers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCustomerHasModules !== null) {
				foreach ($this->collCustomerHasModules as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDisks !== null) {
				foreach ($this->collDisks as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUsageSupports !== null) {
				foreach ($this->collUsageSupports as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collThesauruss !== null) {
				foreach ($this->collThesauruss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPresets !== null) {
				foreach ($this->collPresets as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCountry !== null) {
				if (!$this->aCountry->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCountry->getValidationFailures());
				}
			}


			if (($retval = CustomerPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collGroupes !== null) {
					foreach ($this->collGroupes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLogs !== null) {
					foreach ($this->collLogs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTags !== null) {
					foreach ($this->collTags as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUnits !== null) {
					foreach ($this->collUnits as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUsers !== null) {
					foreach ($this->collUsers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCustomerHasModules !== null) {
					foreach ($this->collCustomerHasModules as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDisks !== null) {
					foreach ($this->collDisks as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUsageSupports !== null) {
					foreach ($this->collUsageSupports as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collThesauruss !== null) {
					foreach ($this->collThesauruss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPresets !== null) {
					foreach ($this->collPresets as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CustomerPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getCompany();
				break;
			case 2:
				return $this->getName();
				break;
			case 3:
				return $this->getFirstName();
				break;
			case 4:
				return $this->getEmail();
				break;
			case 5:
				return $this->getAddress();
				break;
			case 6:
				return $this->getAddressBis();
				break;
			case 7:
				return $this->getZip();
				break;
			case 8:
				return $this->getCity();
				break;
			case 9:
				return $this->getCountryId();
				break;
			case 10:
				return $this->getPhone();
				break;
			case 11:
				return $this->getMobile();
				break;
			case 12:
				return $this->getFax();
				break;
			case 13:
				return $this->getSiret();
				break;
			case 14:
				return $this->getApe();
				break;
			case 15:
				return $this->getTva();
				break;
			case 16:
				return $this->getCreatedAt();
				break;
			case 17:
				return $this->getState();
				break;
			case 18:
				return $this->getActivatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CustomerPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getCompany(),
			$keys[2] => $this->getName(),
			$keys[3] => $this->getFirstName(),
			$keys[4] => $this->getEmail(),
			$keys[5] => $this->getAddress(),
			$keys[6] => $this->getAddressBis(),
			$keys[7] => $this->getZip(),
			$keys[8] => $this->getCity(),
			$keys[9] => $this->getCountryId(),
			$keys[10] => $this->getPhone(),
			$keys[11] => $this->getMobile(),
			$keys[12] => $this->getFax(),
			$keys[13] => $this->getSiret(),
			$keys[14] => $this->getApe(),
			$keys[15] => $this->getTva(),
			$keys[16] => $this->getCreatedAt(),
			$keys[17] => $this->getState(),
			$keys[18] => $this->getActivatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CustomerPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setCompany($value);
				break;
			case 2:
				$this->setName($value);
				break;
			case 3:
				$this->setFirstName($value);
				break;
			case 4:
				$this->setEmail($value);
				break;
			case 5:
				$this->setAddress($value);
				break;
			case 6:
				$this->setAddressBis($value);
				break;
			case 7:
				$this->setZip($value);
				break;
			case 8:
				$this->setCity($value);
				break;
			case 9:
				$this->setCountryId($value);
				break;
			case 10:
				$this->setPhone($value);
				break;
			case 11:
				$this->setMobile($value);
				break;
			case 12:
				$this->setFax($value);
				break;
			case 13:
				$this->setSiret($value);
				break;
			case 14:
				$this->setApe($value);
				break;
			case 15:
				$this->setTva($value);
				break;
			case 16:
				$this->setCreatedAt($value);
				break;
			case 17:
				$this->setState($value);
				break;
			case 18:
				$this->setActivatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CustomerPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCompany($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setFirstName($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setEmail($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAddress($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setAddressBis($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setZip($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCity($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCountryId($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPhone($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setMobile($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setFax($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setSiret($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setApe($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setTva($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCreatedAt($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setState($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setActivatedAt($arr[$keys[18]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CustomerPeer::DATABASE_NAME);

		if ($this->isColumnModified(CustomerPeer::ID)) $criteria->add(CustomerPeer::ID, $this->id);
		if ($this->isColumnModified(CustomerPeer::COMPANY)) $criteria->add(CustomerPeer::COMPANY, $this->company);
		if ($this->isColumnModified(CustomerPeer::NAME)) $criteria->add(CustomerPeer::NAME, $this->name);
		if ($this->isColumnModified(CustomerPeer::FIRST_NAME)) $criteria->add(CustomerPeer::FIRST_NAME, $this->first_name);
		if ($this->isColumnModified(CustomerPeer::EMAIL)) $criteria->add(CustomerPeer::EMAIL, $this->email);
		if ($this->isColumnModified(CustomerPeer::ADDRESS)) $criteria->add(CustomerPeer::ADDRESS, $this->address);
		if ($this->isColumnModified(CustomerPeer::ADDRESS_BIS)) $criteria->add(CustomerPeer::ADDRESS_BIS, $this->address_bis);
		if ($this->isColumnModified(CustomerPeer::ZIP)) $criteria->add(CustomerPeer::ZIP, $this->zip);
		if ($this->isColumnModified(CustomerPeer::CITY)) $criteria->add(CustomerPeer::CITY, $this->city);
		if ($this->isColumnModified(CustomerPeer::COUNTRY_ID)) $criteria->add(CustomerPeer::COUNTRY_ID, $this->country_id);
		if ($this->isColumnModified(CustomerPeer::PHONE)) $criteria->add(CustomerPeer::PHONE, $this->phone);
		if ($this->isColumnModified(CustomerPeer::MOBILE)) $criteria->add(CustomerPeer::MOBILE, $this->mobile);
		if ($this->isColumnModified(CustomerPeer::FAX)) $criteria->add(CustomerPeer::FAX, $this->fax);
		if ($this->isColumnModified(CustomerPeer::SIRET)) $criteria->add(CustomerPeer::SIRET, $this->siret);
		if ($this->isColumnModified(CustomerPeer::APE)) $criteria->add(CustomerPeer::APE, $this->ape);
		if ($this->isColumnModified(CustomerPeer::TVA)) $criteria->add(CustomerPeer::TVA, $this->tva);
		if ($this->isColumnModified(CustomerPeer::CREATED_AT)) $criteria->add(CustomerPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(CustomerPeer::STATE)) $criteria->add(CustomerPeer::STATE, $this->state);
		if ($this->isColumnModified(CustomerPeer::ACTIVATED_AT)) $criteria->add(CustomerPeer::ACTIVATED_AT, $this->activated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CustomerPeer::DATABASE_NAME);

		$criteria->add(CustomerPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Customer (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCompany($this->company);

		$copyObj->setName($this->name);

		$copyObj->setFirstName($this->first_name);

		$copyObj->setEmail($this->email);

		$copyObj->setAddress($this->address);

		$copyObj->setAddressBis($this->address_bis);

		$copyObj->setZip($this->zip);

		$copyObj->setCity($this->city);

		$copyObj->setCountryId($this->country_id);

		$copyObj->setPhone($this->phone);

		$copyObj->setMobile($this->mobile);

		$copyObj->setFax($this->fax);

		$copyObj->setSiret($this->siret);

		$copyObj->setApe($this->ape);

		$copyObj->setTva($this->tva);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setState($this->state);

		$copyObj->setActivatedAt($this->activated_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getGroupes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addGroupe($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLogs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLog($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTags() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTag($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUnits() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUnit($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUsers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUser($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCustomerHasModules() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCustomerHasModule($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDisks() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDisk($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUsageSupports() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUsageSupport($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getThesauruss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addThesaurus($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPresets() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPreset($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Customer Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CustomerPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CustomerPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Country object.
	 *
	 * @param      Country $v
	 * @return     Customer The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCountry(Country $v = null)
	{
		if ($v === null) {
			$this->setCountryId(NULL);
		} else {
			$this->setCountryId($v->getId());
		}

		$this->aCountry = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Country object, it will not be re-added.
		if ($v !== null) {
			$v->addCustomer($this);
		}

		return $this;
	}


	/**
	 * Get the associated Country object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Country The associated Country object.
	 * @throws     PropelException
	 */
	public function getCountry(PropelPDO $con = null)
	{
		if ($this->aCountry === null && ($this->country_id !== null)) {
			$this->aCountry = CountryPeer::retrieveByPk($this->country_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCountry->addCustomers($this);
			 */
		}
		return $this->aCountry;
	}

	/**
	 * Clears out the collGroupes collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addGroupes()
	 */
	public function clearGroupes()
	{
		$this->collGroupes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collGroupes collection (array).
	 *
	 * By default this just sets the collGroupes collection to an empty array (like clearcollGroupes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initGroupes()
	{
		$this->collGroupes = array();
	}

	/**
	 * Gets an array of Groupe objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Customer has previously been saved, it will retrieve
	 * related Groupes from storage. If this Customer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Groupe[]
	 * @throws     PropelException
	 */
	public function getGroupes($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupes === null) {
			if ($this->isNew()) {
			   $this->collGroupes = array();
			} else {

				$criteria->add(GroupePeer::CUSTOMER_ID, $this->id);

				GroupePeer::addSelectColumns($criteria);
				$this->collGroupes = GroupePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(GroupePeer::CUSTOMER_ID, $this->id);

				GroupePeer::addSelectColumns($criteria);
				if (!isset($this->lastGroupeCriteria) || !$this->lastGroupeCriteria->equals($criteria)) {
					$this->collGroupes = GroupePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastGroupeCriteria = $criteria;
		return $this->collGroupes;
	}

	/**
	 * Returns the number of related Groupe objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Groupe objects.
	 * @throws     PropelException
	 */
	public function countGroupes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collGroupes === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(GroupePeer::CUSTOMER_ID, $this->id);

				$count = GroupePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(GroupePeer::CUSTOMER_ID, $this->id);

				if (!isset($this->lastGroupeCriteria) || !$this->lastGroupeCriteria->equals($criteria)) {
					$count = GroupePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collGroupes);
				}
			} else {
				$count = count($this->collGroupes);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Groupe object to this object
	 * through the Groupe foreign key attribute.
	 *
	 * @param      Groupe $l Groupe
	 * @return     void
	 * @throws     PropelException
	 */
	public function addGroupe(Groupe $l)
	{
		if ($this->collGroupes === null) {
			$this->initGroupes();
		}
		if (!in_array($l, $this->collGroupes, true)) { // only add it if the **same** object is not already associated
			array_push($this->collGroupes, $l);
			$l->setCustomer($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Groupes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getGroupesJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupes === null) {
			if ($this->isNew()) {
				$this->collGroupes = array();
			} else {

				$criteria->add(GroupePeer::CUSTOMER_ID, $this->id);

				$this->collGroupes = GroupePeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GroupePeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastGroupeCriteria) || !$this->lastGroupeCriteria->equals($criteria)) {
				$this->collGroupes = GroupePeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastGroupeCriteria = $criteria;

		return $this->collGroupes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Groupes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getGroupesJoinDisk($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupes === null) {
			if ($this->isNew()) {
				$this->collGroupes = array();
			} else {

				$criteria->add(GroupePeer::CUSTOMER_ID, $this->id);

				$this->collGroupes = GroupePeer::doSelectJoinDisk($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GroupePeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastGroupeCriteria) || !$this->lastGroupeCriteria->equals($criteria)) {
				$this->collGroupes = GroupePeer::doSelectJoinDisk($criteria, $con, $join_behavior);
			}
		}
		$this->lastGroupeCriteria = $criteria;

		return $this->collGroupes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Groupes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getGroupesJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupes === null) {
			if ($this->isNew()) {
				$this->collGroupes = array();
			} else {

				$criteria->add(GroupePeer::CUSTOMER_ID, $this->id);

				$this->collGroupes = GroupePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GroupePeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastGroupeCriteria) || !$this->lastGroupeCriteria->equals($criteria)) {
				$this->collGroupes = GroupePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastGroupeCriteria = $criteria;

		return $this->collGroupes;
	}

	/**
	 * Clears out the collLogs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLogs()
	 */
	public function clearLogs()
	{
		$this->collLogs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLogs collection (array).
	 *
	 * By default this just sets the collLogs collection to an empty array (like clearcollLogs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLogs()
	{
		$this->collLogs = array();
	}

	/**
	 * Gets an array of Log objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Customer has previously been saved, it will retrieve
	 * related Logs from storage. If this Customer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Log[]
	 * @throws     PropelException
	 */
	public function getLogs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLogs === null) {
			if ($this->isNew()) {
			   $this->collLogs = array();
			} else {

				$criteria->add(LogPeer::CUSTOMER_ID, $this->id);

				LogPeer::addSelectColumns($criteria);
				$this->collLogs = LogPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LogPeer::CUSTOMER_ID, $this->id);

				LogPeer::addSelectColumns($criteria);
				if (!isset($this->lastLogCriteria) || !$this->lastLogCriteria->equals($criteria)) {
					$this->collLogs = LogPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLogCriteria = $criteria;
		return $this->collLogs;
	}

	/**
	 * Returns the number of related Log objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Log objects.
	 * @throws     PropelException
	 */
	public function countLogs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLogs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LogPeer::CUSTOMER_ID, $this->id);

				$count = LogPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LogPeer::CUSTOMER_ID, $this->id);

				if (!isset($this->lastLogCriteria) || !$this->lastLogCriteria->equals($criteria)) {
					$count = LogPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collLogs);
				}
			} else {
				$count = count($this->collLogs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Log object to this object
	 * through the Log foreign key attribute.
	 *
	 * @param      Log $l Log
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLog(Log $l)
	{
		if ($this->collLogs === null) {
			$this->initLogs();
		}
		if (!in_array($l, $this->collLogs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLogs, $l);
			$l->setCustomer($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Logs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getLogsJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLogs === null) {
			if ($this->isNew()) {
				$this->collLogs = array();
			} else {

				$criteria->add(LogPeer::CUSTOMER_ID, $this->id);

				$this->collLogs = LogPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(LogPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastLogCriteria) || !$this->lastLogCriteria->equals($criteria)) {
				$this->collLogs = LogPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastLogCriteria = $criteria;

		return $this->collLogs;
	}

	/**
	 * Clears out the collTags collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTags()
	 */
	public function clearTags()
	{
		$this->collTags = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTags collection (array).
	 *
	 * By default this just sets the collTags collection to an empty array (like clearcollTags());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTags()
	{
		$this->collTags = array();
	}

	/**
	 * Gets an array of Tag objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Customer has previously been saved, it will retrieve
	 * related Tags from storage. If this Customer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tag[]
	 * @throws     PropelException
	 */
	public function getTags($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTags === null) {
			if ($this->isNew()) {
			   $this->collTags = array();
			} else {

				$criteria->add(TagPeer::CUSTOMER_ID, $this->id);

				TagPeer::addSelectColumns($criteria);
				$this->collTags = TagPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TagPeer::CUSTOMER_ID, $this->id);

				TagPeer::addSelectColumns($criteria);
				if (!isset($this->lastTagCriteria) || !$this->lastTagCriteria->equals($criteria)) {
					$this->collTags = TagPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTagCriteria = $criteria;
		return $this->collTags;
	}

	/**
	 * Returns the number of related Tag objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tag objects.
	 * @throws     PropelException
	 */
	public function countTags(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTags === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TagPeer::CUSTOMER_ID, $this->id);

				$count = TagPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TagPeer::CUSTOMER_ID, $this->id);

				if (!isset($this->lastTagCriteria) || !$this->lastTagCriteria->equals($criteria)) {
					$count = TagPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTags);
				}
			} else {
				$count = count($this->collTags);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tag object to this object
	 * through the Tag foreign key attribute.
	 *
	 * @param      Tag $l Tag
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTag(Tag $l)
	{
		if ($this->collTags === null) {
			$this->initTags();
		}
		if (!in_array($l, $this->collTags, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTags, $l);
			$l->setCustomer($this);
		}
	}

	/**
	 * Clears out the collUnits collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUnits()
	 */
	public function clearUnits()
	{
		$this->collUnits = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUnits collection (array).
	 *
	 * By default this just sets the collUnits collection to an empty array (like clearcollUnits());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUnits()
	{
		$this->collUnits = array();
	}

	/**
	 * Gets an array of Unit objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Customer has previously been saved, it will retrieve
	 * related Units from storage. If this Customer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Unit[]
	 * @throws     PropelException
	 */
	public function getUnits($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUnits === null) {
			if ($this->isNew()) {
			   $this->collUnits = array();
			} else {

				$criteria->add(UnitPeer::CUSTOMER_ID, $this->id);

				UnitPeer::addSelectColumns($criteria);
				$this->collUnits = UnitPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UnitPeer::CUSTOMER_ID, $this->id);

				UnitPeer::addSelectColumns($criteria);
				if (!isset($this->lastUnitCriteria) || !$this->lastUnitCriteria->equals($criteria)) {
					$this->collUnits = UnitPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUnitCriteria = $criteria;
		return $this->collUnits;
	}

	/**
	 * Returns the number of related Unit objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Unit objects.
	 * @throws     PropelException
	 */
	public function countUnits(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUnits === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UnitPeer::CUSTOMER_ID, $this->id);

				$count = UnitPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UnitPeer::CUSTOMER_ID, $this->id);

				if (!isset($this->lastUnitCriteria) || !$this->lastUnitCriteria->equals($criteria)) {
					$count = UnitPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUnits);
				}
			} else {
				$count = count($this->collUnits);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Unit object to this object
	 * through the Unit foreign key attribute.
	 *
	 * @param      Unit $l Unit
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUnit(Unit $l)
	{
		if ($this->collUnits === null) {
			$this->initUnits();
		}
		if (!in_array($l, $this->collUnits, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUnits, $l);
			$l->setCustomer($this);
		}
	}

	/**
	 * Clears out the collUsers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUsers()
	 */
	public function clearUsers()
	{
		$this->collUsers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUsers collection (array).
	 *
	 * By default this just sets the collUsers collection to an empty array (like clearcollUsers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUsers()
	{
		$this->collUsers = array();
	}

	/**
	 * Gets an array of User objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Customer has previously been saved, it will retrieve
	 * related Users from storage. If this Customer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array User[]
	 * @throws     PropelException
	 */
	public function getUsers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsers === null) {
			if ($this->isNew()) {
			   $this->collUsers = array();
			} else {

				$criteria->add(UserPeer::CUSTOMER_ID, $this->id);

				UserPeer::addSelectColumns($criteria);
				$this->collUsers = UserPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserPeer::CUSTOMER_ID, $this->id);

				UserPeer::addSelectColumns($criteria);
				if (!isset($this->lastUserCriteria) || !$this->lastUserCriteria->equals($criteria)) {
					$this->collUsers = UserPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserCriteria = $criteria;
		return $this->collUsers;
	}

	/**
	 * Returns the number of related User objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related User objects.
	 * @throws     PropelException
	 */
	public function countUsers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUsers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserPeer::CUSTOMER_ID, $this->id);

				$count = UserPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserPeer::CUSTOMER_ID, $this->id);

				if (!isset($this->lastUserCriteria) || !$this->lastUserCriteria->equals($criteria)) {
					$count = UserPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUsers);
				}
			} else {
				$count = count($this->collUsers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a User object to this object
	 * through the User foreign key attribute.
	 *
	 * @param      User $l User
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUser(User $l)
	{
		if ($this->collUsers === null) {
			$this->initUsers();
		}
		if (!in_array($l, $this->collUsers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUsers, $l);
			$l->setCustomer($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Users from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getUsersJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsers === null) {
			if ($this->isNew()) {
				$this->collUsers = array();
			} else {

				$criteria->add(UserPeer::CUSTOMER_ID, $this->id);

				$this->collUsers = UserPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastUserCriteria) || !$this->lastUserCriteria->equals($criteria)) {
				$this->collUsers = UserPeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserCriteria = $criteria;

		return $this->collUsers;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Users from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getUsersJoinCountry($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsers === null) {
			if ($this->isNew()) {
				$this->collUsers = array();
			} else {

				$criteria->add(UserPeer::CUSTOMER_ID, $this->id);

				$this->collUsers = UserPeer::doSelectJoinCountry($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastUserCriteria) || !$this->lastUserCriteria->equals($criteria)) {
				$this->collUsers = UserPeer::doSelectJoinCountry($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserCriteria = $criteria;

		return $this->collUsers;
	}

	/**
	 * Clears out the collCustomerHasModules collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCustomerHasModules()
	 */
	public function clearCustomerHasModules()
	{
		$this->collCustomerHasModules = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCustomerHasModules collection (array).
	 *
	 * By default this just sets the collCustomerHasModules collection to an empty array (like clearcollCustomerHasModules());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCustomerHasModules()
	{
		$this->collCustomerHasModules = array();
	}

	/**
	 * Gets an array of CustomerHasModule objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Customer has previously been saved, it will retrieve
	 * related CustomerHasModules from storage. If this Customer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CustomerHasModule[]
	 * @throws     PropelException
	 */
	public function getCustomerHasModules($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCustomerHasModules === null) {
			if ($this->isNew()) {
			   $this->collCustomerHasModules = array();
			} else {

				$criteria->add(CustomerHasModulePeer::CUSTOMER_ID, $this->id);

				CustomerHasModulePeer::addSelectColumns($criteria);
				$this->collCustomerHasModules = CustomerHasModulePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CustomerHasModulePeer::CUSTOMER_ID, $this->id);

				CustomerHasModulePeer::addSelectColumns($criteria);
				if (!isset($this->lastCustomerHasModuleCriteria) || !$this->lastCustomerHasModuleCriteria->equals($criteria)) {
					$this->collCustomerHasModules = CustomerHasModulePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCustomerHasModuleCriteria = $criteria;
		return $this->collCustomerHasModules;
	}

	/**
	 * Returns the number of related CustomerHasModule objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CustomerHasModule objects.
	 * @throws     PropelException
	 */
	public function countCustomerHasModules(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCustomerHasModules === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CustomerHasModulePeer::CUSTOMER_ID, $this->id);

				$count = CustomerHasModulePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CustomerHasModulePeer::CUSTOMER_ID, $this->id);

				if (!isset($this->lastCustomerHasModuleCriteria) || !$this->lastCustomerHasModuleCriteria->equals($criteria)) {
					$count = CustomerHasModulePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCustomerHasModules);
				}
			} else {
				$count = count($this->collCustomerHasModules);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CustomerHasModule object to this object
	 * through the CustomerHasModule foreign key attribute.
	 *
	 * @param      CustomerHasModule $l CustomerHasModule
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCustomerHasModule(CustomerHasModule $l)
	{
		if ($this->collCustomerHasModules === null) {
			$this->initCustomerHasModules();
		}
		if (!in_array($l, $this->collCustomerHasModules, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCustomerHasModules, $l);
			$l->setCustomer($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related CustomerHasModules from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getCustomerHasModulesJoinModule($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCustomerHasModules === null) {
			if ($this->isNew()) {
				$this->collCustomerHasModules = array();
			} else {

				$criteria->add(CustomerHasModulePeer::CUSTOMER_ID, $this->id);

				$this->collCustomerHasModules = CustomerHasModulePeer::doSelectJoinModule($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CustomerHasModulePeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastCustomerHasModuleCriteria) || !$this->lastCustomerHasModuleCriteria->equals($criteria)) {
				$this->collCustomerHasModules = CustomerHasModulePeer::doSelectJoinModule($criteria, $con, $join_behavior);
			}
		}
		$this->lastCustomerHasModuleCriteria = $criteria;

		return $this->collCustomerHasModules;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related CustomerHasModules from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getCustomerHasModulesJoinModuleValue($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCustomerHasModules === null) {
			if ($this->isNew()) {
				$this->collCustomerHasModules = array();
			} else {

				$criteria->add(CustomerHasModulePeer::CUSTOMER_ID, $this->id);

				$this->collCustomerHasModules = CustomerHasModulePeer::doSelectJoinModuleValue($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CustomerHasModulePeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastCustomerHasModuleCriteria) || !$this->lastCustomerHasModuleCriteria->equals($criteria)) {
				$this->collCustomerHasModules = CustomerHasModulePeer::doSelectJoinModuleValue($criteria, $con, $join_behavior);
			}
		}
		$this->lastCustomerHasModuleCriteria = $criteria;

		return $this->collCustomerHasModules;
	}

	/**
	 * Clears out the collDisks collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDisks()
	 */
	public function clearDisks()
	{
		$this->collDisks = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDisks collection (array).
	 *
	 * By default this just sets the collDisks collection to an empty array (like clearcollDisks());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDisks()
	{
		$this->collDisks = array();
	}

	/**
	 * Gets an array of Disk objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Customer has previously been saved, it will retrieve
	 * related Disks from storage. If this Customer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Disk[]
	 * @throws     PropelException
	 */
	public function getDisks($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDisks === null) {
			if ($this->isNew()) {
			   $this->collDisks = array();
			} else {

				$criteria->add(DiskPeer::CUSTOMER_ID, $this->id);

				DiskPeer::addSelectColumns($criteria);
				$this->collDisks = DiskPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DiskPeer::CUSTOMER_ID, $this->id);

				DiskPeer::addSelectColumns($criteria);
				if (!isset($this->lastDiskCriteria) || !$this->lastDiskCriteria->equals($criteria)) {
					$this->collDisks = DiskPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDiskCriteria = $criteria;
		return $this->collDisks;
	}

	/**
	 * Returns the number of related Disk objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Disk objects.
	 * @throws     PropelException
	 */
	public function countDisks(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDisks === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DiskPeer::CUSTOMER_ID, $this->id);

				$count = DiskPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DiskPeer::CUSTOMER_ID, $this->id);

				if (!isset($this->lastDiskCriteria) || !$this->lastDiskCriteria->equals($criteria)) {
					$count = DiskPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDisks);
				}
			} else {
				$count = count($this->collDisks);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Disk object to this object
	 * through the Disk foreign key attribute.
	 *
	 * @param      Disk $l Disk
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDisk(Disk $l)
	{
		if ($this->collDisks === null) {
			$this->initDisks();
		}
		if (!in_array($l, $this->collDisks, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDisks, $l);
			$l->setCustomer($this);
		}
	}

	/**
	 * Clears out the collUsageSupports collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUsageSupports()
	 */
	public function clearUsageSupports()
	{
		$this->collUsageSupports = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUsageSupports collection (array).
	 *
	 * By default this just sets the collUsageSupports collection to an empty array (like clearcollUsageSupports());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUsageSupports()
	{
		$this->collUsageSupports = array();
	}

	/**
	 * Gets an array of UsageSupport objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Customer has previously been saved, it will retrieve
	 * related UsageSupports from storage. If this Customer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UsageSupport[]
	 * @throws     PropelException
	 */
	public function getUsageSupports($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsageSupports === null) {
			if ($this->isNew()) {
			   $this->collUsageSupports = array();
			} else {

				$criteria->add(UsageSupportPeer::CUSTOMER_ID, $this->id);

				UsageSupportPeer::addSelectColumns($criteria);
				$this->collUsageSupports = UsageSupportPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UsageSupportPeer::CUSTOMER_ID, $this->id);

				UsageSupportPeer::addSelectColumns($criteria);
				if (!isset($this->lastUsageSupportCriteria) || !$this->lastUsageSupportCriteria->equals($criteria)) {
					$this->collUsageSupports = UsageSupportPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUsageSupportCriteria = $criteria;
		return $this->collUsageSupports;
	}

	/**
	 * Returns the number of related UsageSupport objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UsageSupport objects.
	 * @throws     PropelException
	 */
	public function countUsageSupports(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUsageSupports === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UsageSupportPeer::CUSTOMER_ID, $this->id);

				$count = UsageSupportPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UsageSupportPeer::CUSTOMER_ID, $this->id);

				if (!isset($this->lastUsageSupportCriteria) || !$this->lastUsageSupportCriteria->equals($criteria)) {
					$count = UsageSupportPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUsageSupports);
				}
			} else {
				$count = count($this->collUsageSupports);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UsageSupport object to this object
	 * through the UsageSupport foreign key attribute.
	 *
	 * @param      UsageSupport $l UsageSupport
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUsageSupport(UsageSupport $l)
	{
		if ($this->collUsageSupports === null) {
			$this->initUsageSupports();
		}
		if (!in_array($l, $this->collUsageSupports, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUsageSupports, $l);
			$l->setCustomer($this);
		}
	}

	/**
	 * Clears out the collThesauruss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addThesauruss()
	 */
	public function clearThesauruss()
	{
		$this->collThesauruss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collThesauruss collection (array).
	 *
	 * By default this just sets the collThesauruss collection to an empty array (like clearcollThesauruss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initThesauruss()
	{
		$this->collThesauruss = array();
	}

	/**
	 * Gets an array of Thesaurus objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Customer has previously been saved, it will retrieve
	 * related Thesauruss from storage. If this Customer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Thesaurus[]
	 * @throws     PropelException
	 */
	public function getThesauruss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collThesauruss === null) {
			if ($this->isNew()) {
			   $this->collThesauruss = array();
			} else {

				$criteria->add(ThesaurusPeer::CUSTOMER_ID, $this->id);

				ThesaurusPeer::addSelectColumns($criteria);
				$this->collThesauruss = ThesaurusPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ThesaurusPeer::CUSTOMER_ID, $this->id);

				ThesaurusPeer::addSelectColumns($criteria);
				if (!isset($this->lastThesaurusCriteria) || !$this->lastThesaurusCriteria->equals($criteria)) {
					$this->collThesauruss = ThesaurusPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastThesaurusCriteria = $criteria;
		return $this->collThesauruss;
	}

	/**
	 * Returns the number of related Thesaurus objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Thesaurus objects.
	 * @throws     PropelException
	 */
	public function countThesauruss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collThesauruss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ThesaurusPeer::CUSTOMER_ID, $this->id);

				$count = ThesaurusPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ThesaurusPeer::CUSTOMER_ID, $this->id);

				if (!isset($this->lastThesaurusCriteria) || !$this->lastThesaurusCriteria->equals($criteria)) {
					$count = ThesaurusPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collThesauruss);
				}
			} else {
				$count = count($this->collThesauruss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Thesaurus object to this object
	 * through the Thesaurus foreign key attribute.
	 *
	 * @param      Thesaurus $l Thesaurus
	 * @return     void
	 * @throws     PropelException
	 */
	public function addThesaurus(Thesaurus $l)
	{
		if ($this->collThesauruss === null) {
			$this->initThesauruss();
		}
		if (!in_array($l, $this->collThesauruss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collThesauruss, $l);
			$l->setCustomer($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Thesauruss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getThesaurussJoinCulture($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collThesauruss === null) {
			if ($this->isNew()) {
				$this->collThesauruss = array();
			} else {

				$criteria->add(ThesaurusPeer::CUSTOMER_ID, $this->id);

				$this->collThesauruss = ThesaurusPeer::doSelectJoinCulture($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ThesaurusPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastThesaurusCriteria) || !$this->lastThesaurusCriteria->equals($criteria)) {
				$this->collThesauruss = ThesaurusPeer::doSelectJoinCulture($criteria, $con, $join_behavior);
			}
		}
		$this->lastThesaurusCriteria = $criteria;

		return $this->collThesauruss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Thesauruss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getThesaurussJoinThesaurusRelatedByParentId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collThesauruss === null) {
			if ($this->isNew()) {
				$this->collThesauruss = array();
			} else {

				$criteria->add(ThesaurusPeer::CUSTOMER_ID, $this->id);

				$this->collThesauruss = ThesaurusPeer::doSelectJoinThesaurusRelatedByParentId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ThesaurusPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastThesaurusCriteria) || !$this->lastThesaurusCriteria->equals($criteria)) {
				$this->collThesauruss = ThesaurusPeer::doSelectJoinThesaurusRelatedByParentId($criteria, $con, $join_behavior);
			}
		}
		$this->lastThesaurusCriteria = $criteria;

		return $this->collThesauruss;
	}

	/**
	 * Clears out the collPresets collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPresets()
	 */
	public function clearPresets()
	{
		$this->collPresets = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPresets collection (array).
	 *
	 * By default this just sets the collPresets collection to an empty array (like clearcollPresets());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPresets()
	{
		$this->collPresets = array();
	}

	/**
	 * Gets an array of Preset objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Customer has previously been saved, it will retrieve
	 * related Presets from storage. If this Customer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Preset[]
	 * @throws     PropelException
	 */
	public function getPresets($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPresets === null) {
			if ($this->isNew()) {
			   $this->collPresets = array();
			} else {

				$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

				PresetPeer::addSelectColumns($criteria);
				$this->collPresets = PresetPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

				PresetPeer::addSelectColumns($criteria);
				if (!isset($this->lastPresetCriteria) || !$this->lastPresetCriteria->equals($criteria)) {
					$this->collPresets = PresetPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPresetCriteria = $criteria;
		return $this->collPresets;
	}

	/**
	 * Returns the number of related Preset objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Preset objects.
	 * @throws     PropelException
	 */
	public function countPresets(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPresets === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

				$count = PresetPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

				if (!isset($this->lastPresetCriteria) || !$this->lastPresetCriteria->equals($criteria)) {
					$count = PresetPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPresets);
				}
			} else {
				$count = count($this->collPresets);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Preset object to this object
	 * through the Preset foreign key attribute.
	 *
	 * @param      Preset $l Preset
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPreset(Preset $l)
	{
		if ($this->collPresets === null) {
			$this->initPresets();
		}
		if (!in_array($l, $this->collPresets, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPresets, $l);
			$l->setCustomer($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Presets from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getPresetsJoinLicence($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPresets === null) {
			if ($this->isNew()) {
				$this->collPresets = array();
			} else {

				$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

				$this->collPresets = PresetPeer::doSelectJoinLicence($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastPresetCriteria) || !$this->lastPresetCriteria->equals($criteria)) {
				$this->collPresets = PresetPeer::doSelectJoinLicence($criteria, $con, $join_behavior);
			}
		}
		$this->lastPresetCriteria = $criteria;

		return $this->collPresets;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Presets from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getPresetsJoinUsageDistribution($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPresets === null) {
			if ($this->isNew()) {
				$this->collPresets = array();
			} else {

				$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

				$this->collPresets = PresetPeer::doSelectJoinUsageDistribution($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastPresetCriteria) || !$this->lastPresetCriteria->equals($criteria)) {
				$this->collPresets = PresetPeer::doSelectJoinUsageDistribution($criteria, $con, $join_behavior);
			}
		}
		$this->lastPresetCriteria = $criteria;

		return $this->collPresets;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Presets from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getPresetsJoinUsageConstraint($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPresets === null) {
			if ($this->isNew()) {
				$this->collPresets = array();
			} else {

				$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

				$this->collPresets = PresetPeer::doSelectJoinUsageConstraint($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastPresetCriteria) || !$this->lastPresetCriteria->equals($criteria)) {
				$this->collPresets = PresetPeer::doSelectJoinUsageConstraint($criteria, $con, $join_behavior);
			}
		}
		$this->lastPresetCriteria = $criteria;

		return $this->collPresets;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Presets from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getPresetsJoinUsageUse($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPresets === null) {
			if ($this->isNew()) {
				$this->collPresets = array();
			} else {

				$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

				$this->collPresets = PresetPeer::doSelectJoinUsageUse($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastPresetCriteria) || !$this->lastPresetCriteria->equals($criteria)) {
				$this->collPresets = PresetPeer::doSelectJoinUsageUse($criteria, $con, $join_behavior);
			}
		}
		$this->lastPresetCriteria = $criteria;

		return $this->collPresets;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Presets from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getPresetsJoinUsageCommercial($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPresets === null) {
			if ($this->isNew()) {
				$this->collPresets = array();
			} else {

				$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

				$this->collPresets = PresetPeer::doSelectJoinUsageCommercial($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastPresetCriteria) || !$this->lastPresetCriteria->equals($criteria)) {
				$this->collPresets = PresetPeer::doSelectJoinUsageCommercial($criteria, $con, $join_behavior);
			}
		}
		$this->lastPresetCriteria = $criteria;

		return $this->collPresets;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Presets from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getPresetsJoinCreativeCommons($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPresets === null) {
			if ($this->isNew()) {
				$this->collPresets = array();
			} else {

				$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

				$this->collPresets = PresetPeer::doSelectJoinCreativeCommons($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PresetPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastPresetCriteria) || !$this->lastPresetCriteria->equals($criteria)) {
				$this->collPresets = PresetPeer::doSelectJoinCreativeCommons($criteria, $con, $join_behavior);
			}
		}
		$this->lastPresetCriteria = $criteria;

		return $this->collPresets;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collGroupes) {
				foreach ((array) $this->collGroupes as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLogs) {
				foreach ((array) $this->collLogs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTags) {
				foreach ((array) $this->collTags as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUnits) {
				foreach ((array) $this->collUnits as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUsers) {
				foreach ((array) $this->collUsers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCustomerHasModules) {
				foreach ((array) $this->collCustomerHasModules as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDisks) {
				foreach ((array) $this->collDisks as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUsageSupports) {
				foreach ((array) $this->collUsageSupports as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collThesauruss) {
				foreach ((array) $this->collThesauruss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPresets) {
				foreach ((array) $this->collPresets as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collGroupes = null;
		$this->collLogs = null;
		$this->collTags = null;
		$this->collUnits = null;
		$this->collUsers = null;
		$this->collCustomerHasModules = null;
		$this->collDisks = null;
		$this->collUsageSupports = null;
		$this->collThesauruss = null;
		$this->collPresets = null;
			$this->aCountry = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseCustomer:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseCustomer::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseCustomer
