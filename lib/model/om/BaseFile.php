<?php

/**
 * Base class that represents a row from the 'file' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Oct 31 14:46:48 2013
 *
 * @package    lib.model.om
 */
abstract class BaseFile extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        FilePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the type field.
	 * @var        int
	 */
	protected $type;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the description field.
	 * @var        string
	 */
	protected $description;

	/**
	 * The value for the original field.
	 * @var        string
	 */
	protected $original;

	/**
	 * The value for the web field.
	 * @var        string
	 */
	protected $web;

	/**
	 * The value for the thumb200 field.
	 * @var        string
	 */
	protected $thumb200;

	/**
	 * The value for the thumb100 field.
	 * @var        string
	 */
	protected $thumb100;

	/**
	 * The value for the extention field.
	 * @var        string
	 */
	protected $extention;

	/**
	 * The value for the size field.
	 * @var        double
	 */
	protected $size;

	/**
	 * The value for the folder_cover field.
	 * @var        int
	 */
	protected $folder_cover;

	/**
	 * The value for the lat field.
	 * @var        string
	 */
	protected $lat;

	/**
	 * The value for the lng field.
	 * @var        string
	 */
	protected $lng;

	/**
	 * The value for the average_point field.
	 * @var        double
	 */
	protected $average_point;

	/**
	 * The value for the user_id field.
	 * @var        int
	 */
	protected $user_id;

	/**
	 * The value for the groupe_id field.
	 * @var        int
	 */
	protected $groupe_id;

	/**
	 * The value for the folder_id field.
	 * @var        int
	 */
	protected $folder_id;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the main_color field.
	 * @var        string
	 */
	protected $main_color;

	/**
	 * The value for the state field.
	 * @var        int
	 */
	protected $state;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the disk_id field.
	 * @var        int
	 */
	protected $disk_id;

	/**
	 * The value for the source field.
	 * @var        string
	 */
	protected $source;

	/**
	 * The value for the licence_id field.
	 * @var        int
	 */
	protected $licence_id;

	/**
	 * The value for the usage_distribution_id field.
	 * @var        int
	 */
	protected $usage_distribution_id;

	/**
	 * The value for the usage_constraint_id field.
	 * @var        int
	 */
	protected $usage_constraint_id;

	/**
	 * The value for the usage_use_id field.
	 * @var        int
	 */
	protected $usage_use_id;

	/**
	 * The value for the usage_commercial_id field.
	 * @var        int
	 */
	protected $usage_commercial_id;

	/**
	 * The value for the creative_commons_id field.
	 * @var        int
	 */
	protected $creative_commons_id;

	/**
	 * The value for the width field.
	 * @var        int
	 */
	protected $width;

	/**
	 * The value for the height field.
	 * @var        int
	 */
	protected $height;

	/**
	 * The value for the checksum field.
	 * @var        string
	 */
	protected $checksum;

	/**
	 * The value for the thumb_mob field.
	 * @var        string
	 */
	protected $thumb_mob;

	/**
	 * The value for the thumb_mob_w field.
	 * @var        string
	 */
	protected $thumb_mob_w;

	/**
	 * The value for the thumb_tab field.
	 * @var        string
	 */
	protected $thumb_tab;

	/**
	 * The value for the thumb_tab_w field.
	 * @var        string
	 */
	protected $thumb_tab_w;

	/**
	 * The value for the groupe_cover field.
	 * @var        int
	 */
	protected $groupe_cover;

	/**
	 * The value for the thumb400 field.
	 * @var        string
	 */
	protected $thumb400;

	/**
	 * The value for the thumb400_w field.
	 * @var        string
	 */
	protected $thumb400_w;

	/**
	 * @var        User
	 */
	protected $aUser;

	/**
	 * @var        Groupe
	 */
	protected $aGroupe;

	/**
	 * @var        Folder
	 */
	protected $aFolder;

	/**
	 * @var        Disk
	 */
	protected $aDisk;

	/**
	 * @var        Licence
	 */
	protected $aLicence;

	/**
	 * @var        UsageDistribution
	 */
	protected $aUsageDistribution;

	/**
	 * @var        UsageConstraint
	 */
	protected $aUsageConstraint;

	/**
	 * @var        UsageUse
	 */
	protected $aUsageUse;

	/**
	 * @var        UsageCommercial
	 */
	protected $aUsageCommercial;

	/**
	 * @var        CreativeCommons
	 */
	protected $aCreativeCommons;

	/**
	 * @var        array Comment[] Collection to store aggregation of Comment objects.
	 */
	protected $collComments;

	/**
	 * @var        Criteria The criteria used to select the current contents of collComments.
	 */
	private $lastCommentCriteria = null;

	/**
	 * @var        array FileTmp[] Collection to store aggregation of FileTmp objects.
	 */
	protected $collFileTmps;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFileTmps.
	 */
	private $lastFileTmpCriteria = null;

	/**
	 * @var        array Rating[] Collection to store aggregation of Rating objects.
	 */
	protected $collRatings;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRatings.
	 */
	private $lastRatingCriteria = null;

	/**
	 * @var        array Exif[] Collection to store aggregation of Exif objects.
	 */
	protected $collExifs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collExifs.
	 */
	private $lastExifCriteria = null;

	/**
	 * @var        array Iptc[] Collection to store aggregation of Iptc objects.
	 */
	protected $collIptcs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collIptcs.
	 */
	private $lastIptcCriteria = null;

	/**
	 * @var        array BasketHasContent[] Collection to store aggregation of BasketHasContent objects.
	 */
	protected $collBasketHasContents;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBasketHasContents.
	 */
	private $lastBasketHasContentCriteria = null;

	/**
	 * @var        array FileWaiting[] Collection to store aggregation of FileWaiting objects.
	 */
	protected $collFileWaitings;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFileWaitings.
	 */
	private $lastFileWaitingCriteria = null;

	/**
	 * @var        array FileRelated[] Collection to store aggregation of FileRelated objects.
	 */
	protected $collFileRelatedsRelatedByFileIdTo;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFileRelatedsRelatedByFileIdTo.
	 */
	private $lastFileRelatedRelatedByFileIdToCriteria = null;

	/**
	 * @var        array FileRelated[] Collection to store aggregation of FileRelated objects.
	 */
	protected $collFileRelatedsRelatedByFileIdFrom;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFileRelatedsRelatedByFileIdFrom.
	 */
	private $lastFileRelatedRelatedByFileIdFromCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'FilePeer';

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [type] column value.
	 * 1-photo, 2-audio, 3-video
	 * @return     int
	 */
	public function getType()
	{
		return $this->type;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [description] column value.
	 * 
	 * @return     string
	 */
	public function getDescription()
	{
		return $this->description;
	}

	/**
	 * Get the [original] column value.
	 * 
	 * @return     string
	 */
	public function getOriginal()
	{
		return $this->original;
	}

	/**
	 * Get the [web] column value.
	 * 
	 * @return     string
	 */
	public function getWeb()
	{
		return $this->web;
	}

	/**
	 * Get the [thumb200] column value.
	 * 
	 * @return     string
	 */
	public function getThumb200()
	{
		return $this->thumb200;
	}

	/**
	 * Get the [thumb100] column value.
	 * 
	 * @return     string
	 */
	public function getThumb100()
	{
		return $this->thumb100;
	}

	/**
	 * Get the [extention] column value.
	 * 
	 * @return     string
	 */
	public function getExtention()
	{
		return $this->extention;
	}

	/**
	 * Get the [size] column value.
	 * KB
	 * @return     double
	 */
	public function getSize()
	{
		return $this->size;
	}

	/**
	 * Get the [folder_cover] column value.
	 * 
	 * @return     int
	 */
	public function getFolderCover()
	{
		return $this->folder_cover;
	}

	/**
	 * Get the [lat] column value.
	 * 
	 * @return     string
	 */
	public function getLat()
	{
		return $this->lat;
	}

	/**
	 * Get the [lng] column value.
	 * 
	 * @return     string
	 */
	public function getLng()
	{
		return $this->lng;
	}

	/**
	 * Get the [average_point] column value.
	 * 
	 * @return     double
	 */
	public function getAveragePoint()
	{
		return $this->average_point;
	}

	/**
	 * Get the [user_id] column value.
	 * 
	 * @return     int
	 */
	public function getUserId()
	{
		return $this->user_id;
	}

	/**
	 * Get the [groupe_id] column value.
	 * 
	 * @return     int
	 */
	public function getGroupeId()
	{
		return $this->groupe_id;
	}

	/**
	 * Get the [folder_id] column value.
	 * 
	 * @return     int
	 */
	public function getFolderId()
	{
		return $this->folder_id;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [main_color] column value.
	 * 
	 * @return     string
	 */
	public function getMainColor()
	{
		return $this->main_color;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     int
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [disk_id] column value.
	 * 
	 * @return     int
	 */
	public function getDiskId()
	{
		return $this->disk_id;
	}

	/**
	 * Get the [source] column value.
	 * 
	 * @return     string
	 */
	public function getSource()
	{
		return $this->source;
	}

	/**
	 * Get the [licence_id] column value.
	 * 
	 * @return     int
	 */
	public function getLicenceId()
	{
		return $this->licence_id;
	}

	/**
	 * Get the [usage_distribution_id] column value.
	 * 
	 * @return     int
	 */
	public function getUsageDistributionId()
	{
		return $this->usage_distribution_id;
	}

	/**
	 * Get the [usage_constraint_id] column value.
	 * 
	 * @return     int
	 */
	public function getUsageConstraintId()
	{
		return $this->usage_constraint_id;
	}

	/**
	 * Get the [usage_use_id] column value.
	 * 
	 * @return     int
	 */
	public function getUsageUseId()
	{
		return $this->usage_use_id;
	}

	/**
	 * Get the [usage_commercial_id] column value.
	 * 
	 * @return     int
	 */
	public function getUsageCommercialId()
	{
		return $this->usage_commercial_id;
	}

	/**
	 * Get the [creative_commons_id] column value.
	 * 
	 * @return     int
	 */
	public function getCreativeCommonsId()
	{
		return $this->creative_commons_id;
	}

	/**
	 * Get the [width] column value.
	 * 
	 * @return     int
	 */
	public function getWidth()
	{
		return $this->width;
	}

	/**
	 * Get the [height] column value.
	 * 
	 * @return     int
	 */
	public function getHeight()
	{
		return $this->height;
	}

	/**
	 * Get the [checksum] column value.
	 * 
	 * @return     string
	 */
	public function getChecksum()
	{
		return $this->checksum;
	}

	/**
	 * Get the [thumb_mob] column value.
	 * 
	 * @return     string
	 */
	public function getThumbMob()
	{
		return $this->thumb_mob;
	}

	/**
	 * Get the [thumb_mob_w] column value.
	 * 
	 * @return     string
	 */
	public function getThumbMobW()
	{
		return $this->thumb_mob_w;
	}

	/**
	 * Get the [thumb_tab] column value.
	 * 
	 * @return     string
	 */
	public function getThumbTab()
	{
		return $this->thumb_tab;
	}

	/**
	 * Get the [thumb_tab_w] column value.
	 * 
	 * @return     string
	 */
	public function getThumbTabW()
	{
		return $this->thumb_tab_w;
	}

	/**
	 * Get the [groupe_cover] column value.
	 * 
	 * @return     int
	 */
	public function getGroupeCover()
	{
		return $this->groupe_cover;
	}

	/**
	 * Get the [thumb400] column value.
	 * 
	 * @return     string
	 */
	public function getThumb400()
	{
		return $this->thumb400;
	}

	/**
	 * Get the [thumb400_w] column value.
	 * 
	 * @return     string
	 */
	public function getThumb400W()
	{
		return $this->thumb400_w;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = FilePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [type] column.
	 * 1-photo, 2-audio, 3-video
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setType($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->type !== $v) {
			$this->type = $v;
			$this->modifiedColumns[] = FilePeer::TYPE;
		}

		return $this;
	} // setType()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = FilePeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [description] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setDescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->description !== $v) {
			$this->description = $v;
			$this->modifiedColumns[] = FilePeer::DESCRIPTION;
		}

		return $this;
	} // setDescription()

	/**
	 * Set the value of [original] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setOriginal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->original !== $v) {
			$this->original = $v;
			$this->modifiedColumns[] = FilePeer::ORIGINAL;
		}

		return $this;
	} // setOriginal()

	/**
	 * Set the value of [web] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setWeb($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->web !== $v) {
			$this->web = $v;
			$this->modifiedColumns[] = FilePeer::WEB;
		}

		return $this;
	} // setWeb()

	/**
	 * Set the value of [thumb200] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setThumb200($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->thumb200 !== $v) {
			$this->thumb200 = $v;
			$this->modifiedColumns[] = FilePeer::THUMB200;
		}

		return $this;
	} // setThumb200()

	/**
	 * Set the value of [thumb100] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setThumb100($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->thumb100 !== $v) {
			$this->thumb100 = $v;
			$this->modifiedColumns[] = FilePeer::THUMB100;
		}

		return $this;
	} // setThumb100()

	/**
	 * Set the value of [extention] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setExtention($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extention !== $v) {
			$this->extention = $v;
			$this->modifiedColumns[] = FilePeer::EXTENTION;
		}

		return $this;
	} // setExtention()

	/**
	 * Set the value of [size] column.
	 * KB
	 * @param      double $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setSize($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->size !== $v) {
			$this->size = $v;
			$this->modifiedColumns[] = FilePeer::SIZE;
		}

		return $this;
	} // setSize()

	/**
	 * Set the value of [folder_cover] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setFolderCover($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->folder_cover !== $v) {
			$this->folder_cover = $v;
			$this->modifiedColumns[] = FilePeer::FOLDER_COVER;
		}

		return $this;
	} // setFolderCover()

	/**
	 * Set the value of [lat] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setLat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lat !== $v) {
			$this->lat = $v;
			$this->modifiedColumns[] = FilePeer::LAT;
		}

		return $this;
	} // setLat()

	/**
	 * Set the value of [lng] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setLng($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lng !== $v) {
			$this->lng = $v;
			$this->modifiedColumns[] = FilePeer::LNG;
		}

		return $this;
	} // setLng()

	/**
	 * Set the value of [average_point] column.
	 * 
	 * @param      double $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setAveragePoint($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->average_point !== $v) {
			$this->average_point = $v;
			$this->modifiedColumns[] = FilePeer::AVERAGE_POINT;
		}

		return $this;
	} // setAveragePoint()

	/**
	 * Set the value of [user_id] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setUserId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->user_id !== $v) {
			$this->user_id = $v;
			$this->modifiedColumns[] = FilePeer::USER_ID;
		}

		if ($this->aUser !== null && $this->aUser->getId() !== $v) {
			$this->aUser = null;
		}

		return $this;
	} // setUserId()

	/**
	 * Set the value of [groupe_id] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setGroupeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->groupe_id !== $v) {
			$this->groupe_id = $v;
			$this->modifiedColumns[] = FilePeer::GROUPE_ID;
		}

		if ($this->aGroupe !== null && $this->aGroupe->getId() !== $v) {
			$this->aGroupe = null;
		}

		return $this;
	} // setGroupeId()

	/**
	 * Set the value of [folder_id] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setFolderId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->folder_id !== $v) {
			$this->folder_id = $v;
			$this->modifiedColumns[] = FilePeer::FOLDER_ID;
		}

		if ($this->aFolder !== null && $this->aFolder->getId() !== $v) {
			$this->aFolder = null;
		}

		return $this;
	} // setFolderId()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     File The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = FilePeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Set the value of [main_color] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setMainColor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->main_color !== $v) {
			$this->main_color = $v;
			$this->modifiedColumns[] = FilePeer::MAIN_COLOR;
		}

		return $this;
	} // setMainColor()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = FilePeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     File The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = FilePeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [disk_id] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setDiskId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->disk_id !== $v) {
			$this->disk_id = $v;
			$this->modifiedColumns[] = FilePeer::DISK_ID;
		}

		if ($this->aDisk !== null && $this->aDisk->getId() !== $v) {
			$this->aDisk = null;
		}

		return $this;
	} // setDiskId()

	/**
	 * Set the value of [source] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setSource($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->source !== $v) {
			$this->source = $v;
			$this->modifiedColumns[] = FilePeer::SOURCE;
		}

		return $this;
	} // setSource()

	/**
	 * Set the value of [licence_id] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setLicenceId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->licence_id !== $v) {
			$this->licence_id = $v;
			$this->modifiedColumns[] = FilePeer::LICENCE_ID;
		}

		if ($this->aLicence !== null && $this->aLicence->getId() !== $v) {
			$this->aLicence = null;
		}

		return $this;
	} // setLicenceId()

	/**
	 * Set the value of [usage_distribution_id] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setUsageDistributionId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->usage_distribution_id !== $v) {
			$this->usage_distribution_id = $v;
			$this->modifiedColumns[] = FilePeer::USAGE_DISTRIBUTION_ID;
		}

		if ($this->aUsageDistribution !== null && $this->aUsageDistribution->getId() !== $v) {
			$this->aUsageDistribution = null;
		}

		return $this;
	} // setUsageDistributionId()

	/**
	 * Set the value of [usage_constraint_id] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setUsageConstraintId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->usage_constraint_id !== $v) {
			$this->usage_constraint_id = $v;
			$this->modifiedColumns[] = FilePeer::USAGE_CONSTRAINT_ID;
		}

		if ($this->aUsageConstraint !== null && $this->aUsageConstraint->getId() !== $v) {
			$this->aUsageConstraint = null;
		}

		return $this;
	} // setUsageConstraintId()

	/**
	 * Set the value of [usage_use_id] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setUsageUseId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->usage_use_id !== $v) {
			$this->usage_use_id = $v;
			$this->modifiedColumns[] = FilePeer::USAGE_USE_ID;
		}

		if ($this->aUsageUse !== null && $this->aUsageUse->getId() !== $v) {
			$this->aUsageUse = null;
		}

		return $this;
	} // setUsageUseId()

	/**
	 * Set the value of [usage_commercial_id] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setUsageCommercialId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->usage_commercial_id !== $v) {
			$this->usage_commercial_id = $v;
			$this->modifiedColumns[] = FilePeer::USAGE_COMMERCIAL_ID;
		}

		if ($this->aUsageCommercial !== null && $this->aUsageCommercial->getId() !== $v) {
			$this->aUsageCommercial = null;
		}

		return $this;
	} // setUsageCommercialId()

	/**
	 * Set the value of [creative_commons_id] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setCreativeCommonsId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->creative_commons_id !== $v) {
			$this->creative_commons_id = $v;
			$this->modifiedColumns[] = FilePeer::CREATIVE_COMMONS_ID;
		}

		if ($this->aCreativeCommons !== null && $this->aCreativeCommons->getId() !== $v) {
			$this->aCreativeCommons = null;
		}

		return $this;
	} // setCreativeCommonsId()

	/**
	 * Set the value of [width] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setWidth($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->width !== $v) {
			$this->width = $v;
			$this->modifiedColumns[] = FilePeer::WIDTH;
		}

		return $this;
	} // setWidth()

	/**
	 * Set the value of [height] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setHeight($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->height !== $v) {
			$this->height = $v;
			$this->modifiedColumns[] = FilePeer::HEIGHT;
		}

		return $this;
	} // setHeight()

	/**
	 * Set the value of [checksum] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setChecksum($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->checksum !== $v) {
			$this->checksum = $v;
			$this->modifiedColumns[] = FilePeer::CHECKSUM;
		}

		return $this;
	} // setChecksum()

	/**
	 * Set the value of [thumb_mob] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setThumbMob($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->thumb_mob !== $v) {
			$this->thumb_mob = $v;
			$this->modifiedColumns[] = FilePeer::THUMB_MOB;
		}

		return $this;
	} // setThumbMob()

	/**
	 * Set the value of [thumb_mob_w] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setThumbMobW($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->thumb_mob_w !== $v) {
			$this->thumb_mob_w = $v;
			$this->modifiedColumns[] = FilePeer::THUMB_MOB_W;
		}

		return $this;
	} // setThumbMobW()

	/**
	 * Set the value of [thumb_tab] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setThumbTab($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->thumb_tab !== $v) {
			$this->thumb_tab = $v;
			$this->modifiedColumns[] = FilePeer::THUMB_TAB;
		}

		return $this;
	} // setThumbTab()

	/**
	 * Set the value of [thumb_tab_w] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setThumbTabW($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->thumb_tab_w !== $v) {
			$this->thumb_tab_w = $v;
			$this->modifiedColumns[] = FilePeer::THUMB_TAB_W;
		}

		return $this;
	} // setThumbTabW()

	/**
	 * Set the value of [groupe_cover] column.
	 * 
	 * @param      int $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setGroupeCover($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->groupe_cover !== $v) {
			$this->groupe_cover = $v;
			$this->modifiedColumns[] = FilePeer::GROUPE_COVER;
		}

		return $this;
	} // setGroupeCover()

	/**
	 * Set the value of [thumb400] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setThumb400($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->thumb400 !== $v) {
			$this->thumb400 = $v;
			$this->modifiedColumns[] = FilePeer::THUMB400;
		}

		return $this;
	} // setThumb400()

	/**
	 * Set the value of [thumb400_w] column.
	 * 
	 * @param      string $v new value
	 * @return     File The current object (for fluent API support)
	 */
	public function setThumb400W($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->thumb400_w !== $v) {
			$this->thumb400_w = $v;
			$this->modifiedColumns[] = FilePeer::THUMB400_W;
		}

		return $this;
	} // setThumb400W()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->type = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->description = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->original = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->web = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->thumb200 = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->thumb100 = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->extention = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->size = ($row[$startcol + 9] !== null) ? (double) $row[$startcol + 9] : null;
			$this->folder_cover = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->lat = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->lng = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->average_point = ($row[$startcol + 13] !== null) ? (double) $row[$startcol + 13] : null;
			$this->user_id = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->groupe_id = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->folder_id = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->created_at = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->main_color = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->state = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->updated_at = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->disk_id = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->source = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->licence_id = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->usage_distribution_id = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->usage_constraint_id = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->usage_use_id = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->usage_commercial_id = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->creative_commons_id = ($row[$startcol + 28] !== null) ? (int) $row[$startcol + 28] : null;
			$this->width = ($row[$startcol + 29] !== null) ? (int) $row[$startcol + 29] : null;
			$this->height = ($row[$startcol + 30] !== null) ? (int) $row[$startcol + 30] : null;
			$this->checksum = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->thumb_mob = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->thumb_mob_w = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->thumb_tab = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->thumb_tab_w = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->groupe_cover = ($row[$startcol + 36] !== null) ? (int) $row[$startcol + 36] : null;
			$this->thumb400 = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->thumb400_w = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 39; // 39 = FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating File object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aUser !== null && $this->user_id !== $this->aUser->getId()) {
			$this->aUser = null;
		}
		if ($this->aGroupe !== null && $this->groupe_id !== $this->aGroupe->getId()) {
			$this->aGroupe = null;
		}
		if ($this->aFolder !== null && $this->folder_id !== $this->aFolder->getId()) {
			$this->aFolder = null;
		}
		if ($this->aDisk !== null && $this->disk_id !== $this->aDisk->getId()) {
			$this->aDisk = null;
		}
		if ($this->aLicence !== null && $this->licence_id !== $this->aLicence->getId()) {
			$this->aLicence = null;
		}
		if ($this->aUsageDistribution !== null && $this->usage_distribution_id !== $this->aUsageDistribution->getId()) {
			$this->aUsageDistribution = null;
		}
		if ($this->aUsageConstraint !== null && $this->usage_constraint_id !== $this->aUsageConstraint->getId()) {
			$this->aUsageConstraint = null;
		}
		if ($this->aUsageUse !== null && $this->usage_use_id !== $this->aUsageUse->getId()) {
			$this->aUsageUse = null;
		}
		if ($this->aUsageCommercial !== null && $this->usage_commercial_id !== $this->aUsageCommercial->getId()) {
			$this->aUsageCommercial = null;
		}
		if ($this->aCreativeCommons !== null && $this->creative_commons_id !== $this->aCreativeCommons->getId()) {
			$this->aCreativeCommons = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = FilePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aUser = null;
			$this->aGroupe = null;
			$this->aFolder = null;
			$this->aDisk = null;
			$this->aLicence = null;
			$this->aUsageDistribution = null;
			$this->aUsageConstraint = null;
			$this->aUsageUse = null;
			$this->aUsageCommercial = null;
			$this->aCreativeCommons = null;
			$this->collComments = null;
			$this->lastCommentCriteria = null;

			$this->collFileTmps = null;
			$this->lastFileTmpCriteria = null;

			$this->collRatings = null;
			$this->lastRatingCriteria = null;

			$this->collExifs = null;
			$this->lastExifCriteria = null;

			$this->collIptcs = null;
			$this->lastIptcCriteria = null;

			$this->collBasketHasContents = null;
			$this->lastBasketHasContentCriteria = null;

			$this->collFileWaitings = null;
			$this->lastFileWaitingCriteria = null;

			$this->collFileRelatedsRelatedByFileIdTo = null;
			$this->lastFileRelatedRelatedByFileIdToCriteria = null;

			$this->collFileRelatedsRelatedByFileIdFrom = null;
			$this->lastFileRelatedRelatedByFileIdFromCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseFile:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				FilePeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseFile:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseFile:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(FilePeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(FilePeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseFile:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				FilePeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUser !== null) {
				if ($this->aUser->isModified() || $this->aUser->isNew()) {
					$affectedRows += $this->aUser->save($con);
				}
				$this->setUser($this->aUser);
			}

			if ($this->aGroupe !== null) {
				if ($this->aGroupe->isModified() || $this->aGroupe->isNew()) {
					$affectedRows += $this->aGroupe->save($con);
				}
				$this->setGroupe($this->aGroupe);
			}

			if ($this->aFolder !== null) {
				if ($this->aFolder->isModified() || $this->aFolder->isNew()) {
					$affectedRows += $this->aFolder->save($con);
				}
				$this->setFolder($this->aFolder);
			}

			if ($this->aDisk !== null) {
				if ($this->aDisk->isModified() || $this->aDisk->isNew()) {
					$affectedRows += $this->aDisk->save($con);
				}
				$this->setDisk($this->aDisk);
			}

			if ($this->aLicence !== null) {
				if ($this->aLicence->isModified() || $this->aLicence->isNew()) {
					$affectedRows += $this->aLicence->save($con);
				}
				$this->setLicence($this->aLicence);
			}

			if ($this->aUsageDistribution !== null) {
				if ($this->aUsageDistribution->isModified() || $this->aUsageDistribution->isNew()) {
					$affectedRows += $this->aUsageDistribution->save($con);
				}
				$this->setUsageDistribution($this->aUsageDistribution);
			}

			if ($this->aUsageConstraint !== null) {
				if ($this->aUsageConstraint->isModified() || $this->aUsageConstraint->isNew()) {
					$affectedRows += $this->aUsageConstraint->save($con);
				}
				$this->setUsageConstraint($this->aUsageConstraint);
			}

			if ($this->aUsageUse !== null) {
				if ($this->aUsageUse->isModified() || $this->aUsageUse->isNew()) {
					$affectedRows += $this->aUsageUse->save($con);
				}
				$this->setUsageUse($this->aUsageUse);
			}

			if ($this->aUsageCommercial !== null) {
				if ($this->aUsageCommercial->isModified() || $this->aUsageCommercial->isNew()) {
					$affectedRows += $this->aUsageCommercial->save($con);
				}
				$this->setUsageCommercial($this->aUsageCommercial);
			}

			if ($this->aCreativeCommons !== null) {
				if ($this->aCreativeCommons->isModified() || $this->aCreativeCommons->isNew()) {
					$affectedRows += $this->aCreativeCommons->save($con);
				}
				$this->setCreativeCommons($this->aCreativeCommons);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = FilePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = FilePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += FilePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collComments !== null) {
				foreach ($this->collComments as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFileTmps !== null) {
				foreach ($this->collFileTmps as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRatings !== null) {
				foreach ($this->collRatings as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collExifs !== null) {
				foreach ($this->collExifs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collIptcs !== null) {
				foreach ($this->collIptcs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collBasketHasContents !== null) {
				foreach ($this->collBasketHasContents as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFileWaitings !== null) {
				foreach ($this->collFileWaitings as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFileRelatedsRelatedByFileIdTo !== null) {
				foreach ($this->collFileRelatedsRelatedByFileIdTo as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFileRelatedsRelatedByFileIdFrom !== null) {
				foreach ($this->collFileRelatedsRelatedByFileIdFrom as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUser !== null) {
				if (!$this->aUser->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUser->getValidationFailures());
				}
			}

			if ($this->aGroupe !== null) {
				if (!$this->aGroupe->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aGroupe->getValidationFailures());
				}
			}

			if ($this->aFolder !== null) {
				if (!$this->aFolder->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aFolder->getValidationFailures());
				}
			}

			if ($this->aDisk !== null) {
				if (!$this->aDisk->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aDisk->getValidationFailures());
				}
			}

			if ($this->aLicence !== null) {
				if (!$this->aLicence->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aLicence->getValidationFailures());
				}
			}

			if ($this->aUsageDistribution !== null) {
				if (!$this->aUsageDistribution->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUsageDistribution->getValidationFailures());
				}
			}

			if ($this->aUsageConstraint !== null) {
				if (!$this->aUsageConstraint->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUsageConstraint->getValidationFailures());
				}
			}

			if ($this->aUsageUse !== null) {
				if (!$this->aUsageUse->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUsageUse->getValidationFailures());
				}
			}

			if ($this->aUsageCommercial !== null) {
				if (!$this->aUsageCommercial->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUsageCommercial->getValidationFailures());
				}
			}

			if ($this->aCreativeCommons !== null) {
				if (!$this->aCreativeCommons->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCreativeCommons->getValidationFailures());
				}
			}


			if (($retval = FilePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collComments !== null) {
					foreach ($this->collComments as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFileTmps !== null) {
					foreach ($this->collFileTmps as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRatings !== null) {
					foreach ($this->collRatings as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collExifs !== null) {
					foreach ($this->collExifs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collIptcs !== null) {
					foreach ($this->collIptcs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collBasketHasContents !== null) {
					foreach ($this->collBasketHasContents as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFileWaitings !== null) {
					foreach ($this->collFileWaitings as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFileRelatedsRelatedByFileIdTo !== null) {
					foreach ($this->collFileRelatedsRelatedByFileIdTo as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFileRelatedsRelatedByFileIdFrom !== null) {
					foreach ($this->collFileRelatedsRelatedByFileIdFrom as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = FilePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getType();
				break;
			case 2:
				return $this->getName();
				break;
			case 3:
				return $this->getDescription();
				break;
			case 4:
				return $this->getOriginal();
				break;
			case 5:
				return $this->getWeb();
				break;
			case 6:
				return $this->getThumb200();
				break;
			case 7:
				return $this->getThumb100();
				break;
			case 8:
				return $this->getExtention();
				break;
			case 9:
				return $this->getSize();
				break;
			case 10:
				return $this->getFolderCover();
				break;
			case 11:
				return $this->getLat();
				break;
			case 12:
				return $this->getLng();
				break;
			case 13:
				return $this->getAveragePoint();
				break;
			case 14:
				return $this->getUserId();
				break;
			case 15:
				return $this->getGroupeId();
				break;
			case 16:
				return $this->getFolderId();
				break;
			case 17:
				return $this->getCreatedAt();
				break;
			case 18:
				return $this->getMainColor();
				break;
			case 19:
				return $this->getState();
				break;
			case 20:
				return $this->getUpdatedAt();
				break;
			case 21:
				return $this->getDiskId();
				break;
			case 22:
				return $this->getSource();
				break;
			case 23:
				return $this->getLicenceId();
				break;
			case 24:
				return $this->getUsageDistributionId();
				break;
			case 25:
				return $this->getUsageConstraintId();
				break;
			case 26:
				return $this->getUsageUseId();
				break;
			case 27:
				return $this->getUsageCommercialId();
				break;
			case 28:
				return $this->getCreativeCommonsId();
				break;
			case 29:
				return $this->getWidth();
				break;
			case 30:
				return $this->getHeight();
				break;
			case 31:
				return $this->getChecksum();
				break;
			case 32:
				return $this->getThumbMob();
				break;
			case 33:
				return $this->getThumbMobW();
				break;
			case 34:
				return $this->getThumbTab();
				break;
			case 35:
				return $this->getThumbTabW();
				break;
			case 36:
				return $this->getGroupeCover();
				break;
			case 37:
				return $this->getThumb400();
				break;
			case 38:
				return $this->getThumb400W();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = FilePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getType(),
			$keys[2] => $this->getName(),
			$keys[3] => $this->getDescription(),
			$keys[4] => $this->getOriginal(),
			$keys[5] => $this->getWeb(),
			$keys[6] => $this->getThumb200(),
			$keys[7] => $this->getThumb100(),
			$keys[8] => $this->getExtention(),
			$keys[9] => $this->getSize(),
			$keys[10] => $this->getFolderCover(),
			$keys[11] => $this->getLat(),
			$keys[12] => $this->getLng(),
			$keys[13] => $this->getAveragePoint(),
			$keys[14] => $this->getUserId(),
			$keys[15] => $this->getGroupeId(),
			$keys[16] => $this->getFolderId(),
			$keys[17] => $this->getCreatedAt(),
			$keys[18] => $this->getMainColor(),
			$keys[19] => $this->getState(),
			$keys[20] => $this->getUpdatedAt(),
			$keys[21] => $this->getDiskId(),
			$keys[22] => $this->getSource(),
			$keys[23] => $this->getLicenceId(),
			$keys[24] => $this->getUsageDistributionId(),
			$keys[25] => $this->getUsageConstraintId(),
			$keys[26] => $this->getUsageUseId(),
			$keys[27] => $this->getUsageCommercialId(),
			$keys[28] => $this->getCreativeCommonsId(),
			$keys[29] => $this->getWidth(),
			$keys[30] => $this->getHeight(),
			$keys[31] => $this->getChecksum(),
			$keys[32] => $this->getThumbMob(),
			$keys[33] => $this->getThumbMobW(),
			$keys[34] => $this->getThumbTab(),
			$keys[35] => $this->getThumbTabW(),
			$keys[36] => $this->getGroupeCover(),
			$keys[37] => $this->getThumb400(),
			$keys[38] => $this->getThumb400W(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = FilePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setType($value);
				break;
			case 2:
				$this->setName($value);
				break;
			case 3:
				$this->setDescription($value);
				break;
			case 4:
				$this->setOriginal($value);
				break;
			case 5:
				$this->setWeb($value);
				break;
			case 6:
				$this->setThumb200($value);
				break;
			case 7:
				$this->setThumb100($value);
				break;
			case 8:
				$this->setExtention($value);
				break;
			case 9:
				$this->setSize($value);
				break;
			case 10:
				$this->setFolderCover($value);
				break;
			case 11:
				$this->setLat($value);
				break;
			case 12:
				$this->setLng($value);
				break;
			case 13:
				$this->setAveragePoint($value);
				break;
			case 14:
				$this->setUserId($value);
				break;
			case 15:
				$this->setGroupeId($value);
				break;
			case 16:
				$this->setFolderId($value);
				break;
			case 17:
				$this->setCreatedAt($value);
				break;
			case 18:
				$this->setMainColor($value);
				break;
			case 19:
				$this->setState($value);
				break;
			case 20:
				$this->setUpdatedAt($value);
				break;
			case 21:
				$this->setDiskId($value);
				break;
			case 22:
				$this->setSource($value);
				break;
			case 23:
				$this->setLicenceId($value);
				break;
			case 24:
				$this->setUsageDistributionId($value);
				break;
			case 25:
				$this->setUsageConstraintId($value);
				break;
			case 26:
				$this->setUsageUseId($value);
				break;
			case 27:
				$this->setUsageCommercialId($value);
				break;
			case 28:
				$this->setCreativeCommonsId($value);
				break;
			case 29:
				$this->setWidth($value);
				break;
			case 30:
				$this->setHeight($value);
				break;
			case 31:
				$this->setChecksum($value);
				break;
			case 32:
				$this->setThumbMob($value);
				break;
			case 33:
				$this->setThumbMobW($value);
				break;
			case 34:
				$this->setThumbTab($value);
				break;
			case 35:
				$this->setThumbTabW($value);
				break;
			case 36:
				$this->setGroupeCover($value);
				break;
			case 37:
				$this->setThumb400($value);
				break;
			case 38:
				$this->setThumb400W($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = FilePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setType($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setDescription($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setOriginal($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setWeb($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setThumb200($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setThumb100($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setExtention($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setSize($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setFolderCover($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setLat($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setLng($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setAveragePoint($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setUserId($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setGroupeId($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setFolderId($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCreatedAt($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setMainColor($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setState($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setUpdatedAt($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setDiskId($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setSource($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setLicenceId($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setUsageDistributionId($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setUsageConstraintId($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setUsageUseId($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setUsageCommercialId($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setCreativeCommonsId($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setWidth($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setHeight($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setChecksum($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setThumbMob($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setThumbMobW($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setThumbTab($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setThumbTabW($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setGroupeCover($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setThumb400($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setThumb400W($arr[$keys[38]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(FilePeer::DATABASE_NAME);

		if ($this->isColumnModified(FilePeer::ID)) $criteria->add(FilePeer::ID, $this->id);
		if ($this->isColumnModified(FilePeer::TYPE)) $criteria->add(FilePeer::TYPE, $this->type);
		if ($this->isColumnModified(FilePeer::NAME)) $criteria->add(FilePeer::NAME, $this->name);
		if ($this->isColumnModified(FilePeer::DESCRIPTION)) $criteria->add(FilePeer::DESCRIPTION, $this->description);
		if ($this->isColumnModified(FilePeer::ORIGINAL)) $criteria->add(FilePeer::ORIGINAL, $this->original);
		if ($this->isColumnModified(FilePeer::WEB)) $criteria->add(FilePeer::WEB, $this->web);
		if ($this->isColumnModified(FilePeer::THUMB200)) $criteria->add(FilePeer::THUMB200, $this->thumb200);
		if ($this->isColumnModified(FilePeer::THUMB100)) $criteria->add(FilePeer::THUMB100, $this->thumb100);
		if ($this->isColumnModified(FilePeer::EXTENTION)) $criteria->add(FilePeer::EXTENTION, $this->extention);
		if ($this->isColumnModified(FilePeer::SIZE)) $criteria->add(FilePeer::SIZE, $this->size);
		if ($this->isColumnModified(FilePeer::FOLDER_COVER)) $criteria->add(FilePeer::FOLDER_COVER, $this->folder_cover);
		if ($this->isColumnModified(FilePeer::LAT)) $criteria->add(FilePeer::LAT, $this->lat);
		if ($this->isColumnModified(FilePeer::LNG)) $criteria->add(FilePeer::LNG, $this->lng);
		if ($this->isColumnModified(FilePeer::AVERAGE_POINT)) $criteria->add(FilePeer::AVERAGE_POINT, $this->average_point);
		if ($this->isColumnModified(FilePeer::USER_ID)) $criteria->add(FilePeer::USER_ID, $this->user_id);
		if ($this->isColumnModified(FilePeer::GROUPE_ID)) $criteria->add(FilePeer::GROUPE_ID, $this->groupe_id);
		if ($this->isColumnModified(FilePeer::FOLDER_ID)) $criteria->add(FilePeer::FOLDER_ID, $this->folder_id);
		if ($this->isColumnModified(FilePeer::CREATED_AT)) $criteria->add(FilePeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(FilePeer::MAIN_COLOR)) $criteria->add(FilePeer::MAIN_COLOR, $this->main_color);
		if ($this->isColumnModified(FilePeer::STATE)) $criteria->add(FilePeer::STATE, $this->state);
		if ($this->isColumnModified(FilePeer::UPDATED_AT)) $criteria->add(FilePeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(FilePeer::DISK_ID)) $criteria->add(FilePeer::DISK_ID, $this->disk_id);
		if ($this->isColumnModified(FilePeer::SOURCE)) $criteria->add(FilePeer::SOURCE, $this->source);
		if ($this->isColumnModified(FilePeer::LICENCE_ID)) $criteria->add(FilePeer::LICENCE_ID, $this->licence_id);
		if ($this->isColumnModified(FilePeer::USAGE_DISTRIBUTION_ID)) $criteria->add(FilePeer::USAGE_DISTRIBUTION_ID, $this->usage_distribution_id);
		if ($this->isColumnModified(FilePeer::USAGE_CONSTRAINT_ID)) $criteria->add(FilePeer::USAGE_CONSTRAINT_ID, $this->usage_constraint_id);
		if ($this->isColumnModified(FilePeer::USAGE_USE_ID)) $criteria->add(FilePeer::USAGE_USE_ID, $this->usage_use_id);
		if ($this->isColumnModified(FilePeer::USAGE_COMMERCIAL_ID)) $criteria->add(FilePeer::USAGE_COMMERCIAL_ID, $this->usage_commercial_id);
		if ($this->isColumnModified(FilePeer::CREATIVE_COMMONS_ID)) $criteria->add(FilePeer::CREATIVE_COMMONS_ID, $this->creative_commons_id);
		if ($this->isColumnModified(FilePeer::WIDTH)) $criteria->add(FilePeer::WIDTH, $this->width);
		if ($this->isColumnModified(FilePeer::HEIGHT)) $criteria->add(FilePeer::HEIGHT, $this->height);
		if ($this->isColumnModified(FilePeer::CHECKSUM)) $criteria->add(FilePeer::CHECKSUM, $this->checksum);
		if ($this->isColumnModified(FilePeer::THUMB_MOB)) $criteria->add(FilePeer::THUMB_MOB, $this->thumb_mob);
		if ($this->isColumnModified(FilePeer::THUMB_MOB_W)) $criteria->add(FilePeer::THUMB_MOB_W, $this->thumb_mob_w);
		if ($this->isColumnModified(FilePeer::THUMB_TAB)) $criteria->add(FilePeer::THUMB_TAB, $this->thumb_tab);
		if ($this->isColumnModified(FilePeer::THUMB_TAB_W)) $criteria->add(FilePeer::THUMB_TAB_W, $this->thumb_tab_w);
		if ($this->isColumnModified(FilePeer::GROUPE_COVER)) $criteria->add(FilePeer::GROUPE_COVER, $this->groupe_cover);
		if ($this->isColumnModified(FilePeer::THUMB400)) $criteria->add(FilePeer::THUMB400, $this->thumb400);
		if ($this->isColumnModified(FilePeer::THUMB400_W)) $criteria->add(FilePeer::THUMB400_W, $this->thumb400_w);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(FilePeer::DATABASE_NAME);

		$criteria->add(FilePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of File (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setType($this->type);

		$copyObj->setName($this->name);

		$copyObj->setDescription($this->description);

		$copyObj->setOriginal($this->original);

		$copyObj->setWeb($this->web);

		$copyObj->setThumb200($this->thumb200);

		$copyObj->setThumb100($this->thumb100);

		$copyObj->setExtention($this->extention);

		$copyObj->setSize($this->size);

		$copyObj->setFolderCover($this->folder_cover);

		$copyObj->setLat($this->lat);

		$copyObj->setLng($this->lng);

		$copyObj->setAveragePoint($this->average_point);

		$copyObj->setUserId($this->user_id);

		$copyObj->setGroupeId($this->groupe_id);

		$copyObj->setFolderId($this->folder_id);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setMainColor($this->main_color);

		$copyObj->setState($this->state);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setDiskId($this->disk_id);

		$copyObj->setSource($this->source);

		$copyObj->setLicenceId($this->licence_id);

		$copyObj->setUsageDistributionId($this->usage_distribution_id);

		$copyObj->setUsageConstraintId($this->usage_constraint_id);

		$copyObj->setUsageUseId($this->usage_use_id);

		$copyObj->setUsageCommercialId($this->usage_commercial_id);

		$copyObj->setCreativeCommonsId($this->creative_commons_id);

		$copyObj->setWidth($this->width);

		$copyObj->setHeight($this->height);

		$copyObj->setChecksum($this->checksum);

		$copyObj->setThumbMob($this->thumb_mob);

		$copyObj->setThumbMobW($this->thumb_mob_w);

		$copyObj->setThumbTab($this->thumb_tab);

		$copyObj->setThumbTabW($this->thumb_tab_w);

		$copyObj->setGroupeCover($this->groupe_cover);

		$copyObj->setThumb400($this->thumb400);

		$copyObj->setThumb400W($this->thumb400_w);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getComments() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addComment($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFileTmps() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFileTmp($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRatings() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRating($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getExifs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addExif($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getIptcs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addIptc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getBasketHasContents() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBasketHasContent($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFileWaitings() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFileWaiting($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFileRelatedsRelatedByFileIdTo() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFileRelatedRelatedByFileIdTo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFileRelatedsRelatedByFileIdFrom() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFileRelatedRelatedByFileIdFrom($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     File Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     FilePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new FilePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a User object.
	 *
	 * @param      User $v
	 * @return     File The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUser(User $v = null)
	{
		if ($v === null) {
			$this->setUserId(NULL);
		} else {
			$this->setUserId($v->getId());
		}

		$this->aUser = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the User object, it will not be re-added.
		if ($v !== null) {
			$v->addFile($this);
		}

		return $this;
	}


	/**
	 * Get the associated User object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     User The associated User object.
	 * @throws     PropelException
	 */
	public function getUser(PropelPDO $con = null)
	{
		if ($this->aUser === null && ($this->user_id !== null)) {
			$this->aUser = UserPeer::retrieveByPk($this->user_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUser->addFiles($this);
			 */
		}
		return $this->aUser;
	}

	/**
	 * Declares an association between this object and a Groupe object.
	 *
	 * @param      Groupe $v
	 * @return     File The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setGroupe(Groupe $v = null)
	{
		if ($v === null) {
			$this->setGroupeId(NULL);
		} else {
			$this->setGroupeId($v->getId());
		}

		$this->aGroupe = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Groupe object, it will not be re-added.
		if ($v !== null) {
			$v->addFile($this);
		}

		return $this;
	}


	/**
	 * Get the associated Groupe object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Groupe The associated Groupe object.
	 * @throws     PropelException
	 */
	public function getGroupe(PropelPDO $con = null)
	{
		if ($this->aGroupe === null && ($this->groupe_id !== null)) {
			$this->aGroupe = GroupePeer::retrieveByPk($this->groupe_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aGroupe->addFiles($this);
			 */
		}
		return $this->aGroupe;
	}

	/**
	 * Declares an association between this object and a Folder object.
	 *
	 * @param      Folder $v
	 * @return     File The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setFolder(Folder $v = null)
	{
		if ($v === null) {
			$this->setFolderId(NULL);
		} else {
			$this->setFolderId($v->getId());
		}

		$this->aFolder = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Folder object, it will not be re-added.
		if ($v !== null) {
			$v->addFile($this);
		}

		return $this;
	}


	/**
	 * Get the associated Folder object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Folder The associated Folder object.
	 * @throws     PropelException
	 */
	public function getFolder(PropelPDO $con = null)
	{
		if ($this->aFolder === null && ($this->folder_id !== null)) {
			$this->aFolder = FolderPeer::retrieveByPk($this->folder_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aFolder->addFiles($this);
			 */
		}
		return $this->aFolder;
	}

	/**
	 * Declares an association between this object and a Disk object.
	 *
	 * @param      Disk $v
	 * @return     File The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setDisk(Disk $v = null)
	{
		if ($v === null) {
			$this->setDiskId(NULL);
		} else {
			$this->setDiskId($v->getId());
		}

		$this->aDisk = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Disk object, it will not be re-added.
		if ($v !== null) {
			$v->addFile($this);
		}

		return $this;
	}


	/**
	 * Get the associated Disk object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Disk The associated Disk object.
	 * @throws     PropelException
	 */
	public function getDisk(PropelPDO $con = null)
	{
		if ($this->aDisk === null && ($this->disk_id !== null)) {
			$this->aDisk = DiskPeer::retrieveByPk($this->disk_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aDisk->addFiles($this);
			 */
		}
		return $this->aDisk;
	}

	/**
	 * Declares an association between this object and a Licence object.
	 *
	 * @param      Licence $v
	 * @return     File The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setLicence(Licence $v = null)
	{
		if ($v === null) {
			$this->setLicenceId(NULL);
		} else {
			$this->setLicenceId($v->getId());
		}

		$this->aLicence = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Licence object, it will not be re-added.
		if ($v !== null) {
			$v->addFile($this);
		}

		return $this;
	}


	/**
	 * Get the associated Licence object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Licence The associated Licence object.
	 * @throws     PropelException
	 */
	public function getLicence(PropelPDO $con = null)
	{
		if ($this->aLicence === null && ($this->licence_id !== null)) {
			$this->aLicence = LicencePeer::retrieveByPk($this->licence_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aLicence->addFiles($this);
			 */
		}
		return $this->aLicence;
	}

	/**
	 * Declares an association between this object and a UsageDistribution object.
	 *
	 * @param      UsageDistribution $v
	 * @return     File The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUsageDistribution(UsageDistribution $v = null)
	{
		if ($v === null) {
			$this->setUsageDistributionId(NULL);
		} else {
			$this->setUsageDistributionId($v->getId());
		}

		$this->aUsageDistribution = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the UsageDistribution object, it will not be re-added.
		if ($v !== null) {
			$v->addFile($this);
		}

		return $this;
	}


	/**
	 * Get the associated UsageDistribution object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     UsageDistribution The associated UsageDistribution object.
	 * @throws     PropelException
	 */
	public function getUsageDistribution(PropelPDO $con = null)
	{
		if ($this->aUsageDistribution === null && ($this->usage_distribution_id !== null)) {
			$this->aUsageDistribution = UsageDistributionPeer::retrieveByPk($this->usage_distribution_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUsageDistribution->addFiles($this);
			 */
		}
		return $this->aUsageDistribution;
	}

	/**
	 * Declares an association between this object and a UsageConstraint object.
	 *
	 * @param      UsageConstraint $v
	 * @return     File The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUsageConstraint(UsageConstraint $v = null)
	{
		if ($v === null) {
			$this->setUsageConstraintId(NULL);
		} else {
			$this->setUsageConstraintId($v->getId());
		}

		$this->aUsageConstraint = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the UsageConstraint object, it will not be re-added.
		if ($v !== null) {
			$v->addFile($this);
		}

		return $this;
	}


	/**
	 * Get the associated UsageConstraint object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     UsageConstraint The associated UsageConstraint object.
	 * @throws     PropelException
	 */
	public function getUsageConstraint(PropelPDO $con = null)
	{
		if ($this->aUsageConstraint === null && ($this->usage_constraint_id !== null)) {
			$this->aUsageConstraint = UsageConstraintPeer::retrieveByPk($this->usage_constraint_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUsageConstraint->addFiles($this);
			 */
		}
		return $this->aUsageConstraint;
	}

	/**
	 * Declares an association between this object and a UsageUse object.
	 *
	 * @param      UsageUse $v
	 * @return     File The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUsageUse(UsageUse $v = null)
	{
		if ($v === null) {
			$this->setUsageUseId(NULL);
		} else {
			$this->setUsageUseId($v->getId());
		}

		$this->aUsageUse = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the UsageUse object, it will not be re-added.
		if ($v !== null) {
			$v->addFile($this);
		}

		return $this;
	}


	/**
	 * Get the associated UsageUse object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     UsageUse The associated UsageUse object.
	 * @throws     PropelException
	 */
	public function getUsageUse(PropelPDO $con = null)
	{
		if ($this->aUsageUse === null && ($this->usage_use_id !== null)) {
			$this->aUsageUse = UsageUsePeer::retrieveByPk($this->usage_use_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUsageUse->addFiles($this);
			 */
		}
		return $this->aUsageUse;
	}

	/**
	 * Declares an association between this object and a UsageCommercial object.
	 *
	 * @param      UsageCommercial $v
	 * @return     File The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUsageCommercial(UsageCommercial $v = null)
	{
		if ($v === null) {
			$this->setUsageCommercialId(NULL);
		} else {
			$this->setUsageCommercialId($v->getId());
		}

		$this->aUsageCommercial = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the UsageCommercial object, it will not be re-added.
		if ($v !== null) {
			$v->addFile($this);
		}

		return $this;
	}


	/**
	 * Get the associated UsageCommercial object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     UsageCommercial The associated UsageCommercial object.
	 * @throws     PropelException
	 */
	public function getUsageCommercial(PropelPDO $con = null)
	{
		if ($this->aUsageCommercial === null && ($this->usage_commercial_id !== null)) {
			$this->aUsageCommercial = UsageCommercialPeer::retrieveByPk($this->usage_commercial_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUsageCommercial->addFiles($this);
			 */
		}
		return $this->aUsageCommercial;
	}

	/**
	 * Declares an association between this object and a CreativeCommons object.
	 *
	 * @param      CreativeCommons $v
	 * @return     File The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCreativeCommons(CreativeCommons $v = null)
	{
		if ($v === null) {
			$this->setCreativeCommonsId(NULL);
		} else {
			$this->setCreativeCommonsId($v->getId());
		}

		$this->aCreativeCommons = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the CreativeCommons object, it will not be re-added.
		if ($v !== null) {
			$v->addFile($this);
		}

		return $this;
	}


	/**
	 * Get the associated CreativeCommons object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     CreativeCommons The associated CreativeCommons object.
	 * @throws     PropelException
	 */
	public function getCreativeCommons(PropelPDO $con = null)
	{
		if ($this->aCreativeCommons === null && ($this->creative_commons_id !== null)) {
			$this->aCreativeCommons = CreativeCommonsPeer::retrieveByPk($this->creative_commons_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCreativeCommons->addFiles($this);
			 */
		}
		return $this->aCreativeCommons;
	}

	/**
	 * Clears out the collComments collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addComments()
	 */
	public function clearComments()
	{
		$this->collComments = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collComments collection (array).
	 *
	 * By default this just sets the collComments collection to an empty array (like clearcollComments());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initComments()
	{
		$this->collComments = array();
	}

	/**
	 * Gets an array of Comment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this File has previously been saved, it will retrieve
	 * related Comments from storage. If this File is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Comment[]
	 * @throws     PropelException
	 */
	public function getComments($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collComments === null) {
			if ($this->isNew()) {
			   $this->collComments = array();
			} else {

				$criteria->add(CommentPeer::FILE_ID, $this->id);

				CommentPeer::addSelectColumns($criteria);
				$this->collComments = CommentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CommentPeer::FILE_ID, $this->id);

				CommentPeer::addSelectColumns($criteria);
				if (!isset($this->lastCommentCriteria) || !$this->lastCommentCriteria->equals($criteria)) {
					$this->collComments = CommentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCommentCriteria = $criteria;
		return $this->collComments;
	}

	/**
	 * Returns the number of related Comment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Comment objects.
	 * @throws     PropelException
	 */
	public function countComments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collComments === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CommentPeer::FILE_ID, $this->id);

				$count = CommentPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CommentPeer::FILE_ID, $this->id);

				if (!isset($this->lastCommentCriteria) || !$this->lastCommentCriteria->equals($criteria)) {
					$count = CommentPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collComments);
				}
			} else {
				$count = count($this->collComments);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Comment object to this object
	 * through the Comment foreign key attribute.
	 *
	 * @param      Comment $l Comment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addComment(Comment $l)
	{
		if ($this->collComments === null) {
			$this->initComments();
		}
		if (!in_array($l, $this->collComments, true)) { // only add it if the **same** object is not already associated
			array_push($this->collComments, $l);
			$l->setFile($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this File is new, it will return
	 * an empty collection; or if this File has previously
	 * been saved, it will retrieve related Comments from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in File.
	 */
	public function getCommentsJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collComments === null) {
			if ($this->isNew()) {
				$this->collComments = array();
			} else {

				$criteria->add(CommentPeer::FILE_ID, $this->id);

				$this->collComments = CommentPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CommentPeer::FILE_ID, $this->id);

			if (!isset($this->lastCommentCriteria) || !$this->lastCommentCriteria->equals($criteria)) {
				$this->collComments = CommentPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastCommentCriteria = $criteria;

		return $this->collComments;
	}

	/**
	 * Clears out the collFileTmps collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFileTmps()
	 */
	public function clearFileTmps()
	{
		$this->collFileTmps = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFileTmps collection (array).
	 *
	 * By default this just sets the collFileTmps collection to an empty array (like clearcollFileTmps());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFileTmps()
	{
		$this->collFileTmps = array();
	}

	/**
	 * Gets an array of FileTmp objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this File has previously been saved, it will retrieve
	 * related FileTmps from storage. If this File is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array FileTmp[]
	 * @throws     PropelException
	 */
	public function getFileTmps($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileTmps === null) {
			if ($this->isNew()) {
			   $this->collFileTmps = array();
			} else {

				$criteria->add(FileTmpPeer::FILE_ID, $this->id);

				FileTmpPeer::addSelectColumns($criteria);
				$this->collFileTmps = FileTmpPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FileTmpPeer::FILE_ID, $this->id);

				FileTmpPeer::addSelectColumns($criteria);
				if (!isset($this->lastFileTmpCriteria) || !$this->lastFileTmpCriteria->equals($criteria)) {
					$this->collFileTmps = FileTmpPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFileTmpCriteria = $criteria;
		return $this->collFileTmps;
	}

	/**
	 * Returns the number of related FileTmp objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related FileTmp objects.
	 * @throws     PropelException
	 */
	public function countFileTmps(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFileTmps === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FileTmpPeer::FILE_ID, $this->id);

				$count = FileTmpPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FileTmpPeer::FILE_ID, $this->id);

				if (!isset($this->lastFileTmpCriteria) || !$this->lastFileTmpCriteria->equals($criteria)) {
					$count = FileTmpPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFileTmps);
				}
			} else {
				$count = count($this->collFileTmps);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a FileTmp object to this object
	 * through the FileTmp foreign key attribute.
	 *
	 * @param      FileTmp $l FileTmp
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFileTmp(FileTmp $l)
	{
		if ($this->collFileTmps === null) {
			$this->initFileTmps();
		}
		if (!in_array($l, $this->collFileTmps, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFileTmps, $l);
			$l->setFile($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this File is new, it will return
	 * an empty collection; or if this File has previously
	 * been saved, it will retrieve related FileTmps from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in File.
	 */
	public function getFileTmpsJoinFolder($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileTmps === null) {
			if ($this->isNew()) {
				$this->collFileTmps = array();
			} else {

				$criteria->add(FileTmpPeer::FILE_ID, $this->id);

				$this->collFileTmps = FileTmpPeer::doSelectJoinFolder($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FileTmpPeer::FILE_ID, $this->id);

			if (!isset($this->lastFileTmpCriteria) || !$this->lastFileTmpCriteria->equals($criteria)) {
				$this->collFileTmps = FileTmpPeer::doSelectJoinFolder($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileTmpCriteria = $criteria;

		return $this->collFileTmps;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this File is new, it will return
	 * an empty collection; or if this File has previously
	 * been saved, it will retrieve related FileTmps from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in File.
	 */
	public function getFileTmpsJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileTmps === null) {
			if ($this->isNew()) {
				$this->collFileTmps = array();
			} else {

				$criteria->add(FileTmpPeer::FILE_ID, $this->id);

				$this->collFileTmps = FileTmpPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FileTmpPeer::FILE_ID, $this->id);

			if (!isset($this->lastFileTmpCriteria) || !$this->lastFileTmpCriteria->equals($criteria)) {
				$this->collFileTmps = FileTmpPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileTmpCriteria = $criteria;

		return $this->collFileTmps;
	}

	/**
	 * Clears out the collRatings collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRatings()
	 */
	public function clearRatings()
	{
		$this->collRatings = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRatings collection (array).
	 *
	 * By default this just sets the collRatings collection to an empty array (like clearcollRatings());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRatings()
	{
		$this->collRatings = array();
	}

	/**
	 * Gets an array of Rating objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this File has previously been saved, it will retrieve
	 * related Ratings from storage. If this File is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Rating[]
	 * @throws     PropelException
	 */
	public function getRatings($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRatings === null) {
			if ($this->isNew()) {
			   $this->collRatings = array();
			} else {

				$criteria->add(RatingPeer::FILE_ID, $this->id);

				RatingPeer::addSelectColumns($criteria);
				$this->collRatings = RatingPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RatingPeer::FILE_ID, $this->id);

				RatingPeer::addSelectColumns($criteria);
				if (!isset($this->lastRatingCriteria) || !$this->lastRatingCriteria->equals($criteria)) {
					$this->collRatings = RatingPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRatingCriteria = $criteria;
		return $this->collRatings;
	}

	/**
	 * Returns the number of related Rating objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Rating objects.
	 * @throws     PropelException
	 */
	public function countRatings(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRatings === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RatingPeer::FILE_ID, $this->id);

				$count = RatingPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RatingPeer::FILE_ID, $this->id);

				if (!isset($this->lastRatingCriteria) || !$this->lastRatingCriteria->equals($criteria)) {
					$count = RatingPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRatings);
				}
			} else {
				$count = count($this->collRatings);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Rating object to this object
	 * through the Rating foreign key attribute.
	 *
	 * @param      Rating $l Rating
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRating(Rating $l)
	{
		if ($this->collRatings === null) {
			$this->initRatings();
		}
		if (!in_array($l, $this->collRatings, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRatings, $l);
			$l->setFile($this);
		}
	}

	/**
	 * Clears out the collExifs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addExifs()
	 */
	public function clearExifs()
	{
		$this->collExifs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collExifs collection (array).
	 *
	 * By default this just sets the collExifs collection to an empty array (like clearcollExifs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initExifs()
	{
		$this->collExifs = array();
	}

	/**
	 * Gets an array of Exif objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this File has previously been saved, it will retrieve
	 * related Exifs from storage. If this File is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Exif[]
	 * @throws     PropelException
	 */
	public function getExifs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collExifs === null) {
			if ($this->isNew()) {
			   $this->collExifs = array();
			} else {

				$criteria->add(ExifPeer::FILE_ID, $this->id);

				ExifPeer::addSelectColumns($criteria);
				$this->collExifs = ExifPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ExifPeer::FILE_ID, $this->id);

				ExifPeer::addSelectColumns($criteria);
				if (!isset($this->lastExifCriteria) || !$this->lastExifCriteria->equals($criteria)) {
					$this->collExifs = ExifPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastExifCriteria = $criteria;
		return $this->collExifs;
	}

	/**
	 * Returns the number of related Exif objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Exif objects.
	 * @throws     PropelException
	 */
	public function countExifs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collExifs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ExifPeer::FILE_ID, $this->id);

				$count = ExifPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ExifPeer::FILE_ID, $this->id);

				if (!isset($this->lastExifCriteria) || !$this->lastExifCriteria->equals($criteria)) {
					$count = ExifPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collExifs);
				}
			} else {
				$count = count($this->collExifs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Exif object to this object
	 * through the Exif foreign key attribute.
	 *
	 * @param      Exif $l Exif
	 * @return     void
	 * @throws     PropelException
	 */
	public function addExif(Exif $l)
	{
		if ($this->collExifs === null) {
			$this->initExifs();
		}
		if (!in_array($l, $this->collExifs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collExifs, $l);
			$l->setFile($this);
		}
	}

	/**
	 * Clears out the collIptcs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addIptcs()
	 */
	public function clearIptcs()
	{
		$this->collIptcs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collIptcs collection (array).
	 *
	 * By default this just sets the collIptcs collection to an empty array (like clearcollIptcs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initIptcs()
	{
		$this->collIptcs = array();
	}

	/**
	 * Gets an array of Iptc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this File has previously been saved, it will retrieve
	 * related Iptcs from storage. If this File is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Iptc[]
	 * @throws     PropelException
	 */
	public function getIptcs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collIptcs === null) {
			if ($this->isNew()) {
			   $this->collIptcs = array();
			} else {

				$criteria->add(IptcPeer::FILE_ID, $this->id);

				IptcPeer::addSelectColumns($criteria);
				$this->collIptcs = IptcPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(IptcPeer::FILE_ID, $this->id);

				IptcPeer::addSelectColumns($criteria);
				if (!isset($this->lastIptcCriteria) || !$this->lastIptcCriteria->equals($criteria)) {
					$this->collIptcs = IptcPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastIptcCriteria = $criteria;
		return $this->collIptcs;
	}

	/**
	 * Returns the number of related Iptc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Iptc objects.
	 * @throws     PropelException
	 */
	public function countIptcs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collIptcs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(IptcPeer::FILE_ID, $this->id);

				$count = IptcPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(IptcPeer::FILE_ID, $this->id);

				if (!isset($this->lastIptcCriteria) || !$this->lastIptcCriteria->equals($criteria)) {
					$count = IptcPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collIptcs);
				}
			} else {
				$count = count($this->collIptcs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Iptc object to this object
	 * through the Iptc foreign key attribute.
	 *
	 * @param      Iptc $l Iptc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addIptc(Iptc $l)
	{
		if ($this->collIptcs === null) {
			$this->initIptcs();
		}
		if (!in_array($l, $this->collIptcs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collIptcs, $l);
			$l->setFile($this);
		}
	}

	/**
	 * Clears out the collBasketHasContents collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBasketHasContents()
	 */
	public function clearBasketHasContents()
	{
		$this->collBasketHasContents = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBasketHasContents collection (array).
	 *
	 * By default this just sets the collBasketHasContents collection to an empty array (like clearcollBasketHasContents());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBasketHasContents()
	{
		$this->collBasketHasContents = array();
	}

	/**
	 * Gets an array of BasketHasContent objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this File has previously been saved, it will retrieve
	 * related BasketHasContents from storage. If this File is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array BasketHasContent[]
	 * @throws     PropelException
	 */
	public function getBasketHasContents($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBasketHasContents === null) {
			if ($this->isNew()) {
			   $this->collBasketHasContents = array();
			} else {

				$criteria->add(BasketHasContentPeer::FILE_ID, $this->id);

				BasketHasContentPeer::addSelectColumns($criteria);
				$this->collBasketHasContents = BasketHasContentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BasketHasContentPeer::FILE_ID, $this->id);

				BasketHasContentPeer::addSelectColumns($criteria);
				if (!isset($this->lastBasketHasContentCriteria) || !$this->lastBasketHasContentCriteria->equals($criteria)) {
					$this->collBasketHasContents = BasketHasContentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBasketHasContentCriteria = $criteria;
		return $this->collBasketHasContents;
	}

	/**
	 * Returns the number of related BasketHasContent objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related BasketHasContent objects.
	 * @throws     PropelException
	 */
	public function countBasketHasContents(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBasketHasContents === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BasketHasContentPeer::FILE_ID, $this->id);

				$count = BasketHasContentPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BasketHasContentPeer::FILE_ID, $this->id);

				if (!isset($this->lastBasketHasContentCriteria) || !$this->lastBasketHasContentCriteria->equals($criteria)) {
					$count = BasketHasContentPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collBasketHasContents);
				}
			} else {
				$count = count($this->collBasketHasContents);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a BasketHasContent object to this object
	 * through the BasketHasContent foreign key attribute.
	 *
	 * @param      BasketHasContent $l BasketHasContent
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBasketHasContent(BasketHasContent $l)
	{
		if ($this->collBasketHasContents === null) {
			$this->initBasketHasContents();
		}
		if (!in_array($l, $this->collBasketHasContents, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBasketHasContents, $l);
			$l->setFile($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this File is new, it will return
	 * an empty collection; or if this File has previously
	 * been saved, it will retrieve related BasketHasContents from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in File.
	 */
	public function getBasketHasContentsJoinBasket($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBasketHasContents === null) {
			if ($this->isNew()) {
				$this->collBasketHasContents = array();
			} else {

				$criteria->add(BasketHasContentPeer::FILE_ID, $this->id);

				$this->collBasketHasContents = BasketHasContentPeer::doSelectJoinBasket($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(BasketHasContentPeer::FILE_ID, $this->id);

			if (!isset($this->lastBasketHasContentCriteria) || !$this->lastBasketHasContentCriteria->equals($criteria)) {
				$this->collBasketHasContents = BasketHasContentPeer::doSelectJoinBasket($criteria, $con, $join_behavior);
			}
		}
		$this->lastBasketHasContentCriteria = $criteria;

		return $this->collBasketHasContents;
	}

	/**
	 * Clears out the collFileWaitings collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFileWaitings()
	 */
	public function clearFileWaitings()
	{
		$this->collFileWaitings = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFileWaitings collection (array).
	 *
	 * By default this just sets the collFileWaitings collection to an empty array (like clearcollFileWaitings());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFileWaitings()
	{
		$this->collFileWaitings = array();
	}

	/**
	 * Gets an array of FileWaiting objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this File has previously been saved, it will retrieve
	 * related FileWaitings from storage. If this File is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array FileWaiting[]
	 * @throws     PropelException
	 */
	public function getFileWaitings($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileWaitings === null) {
			if ($this->isNew()) {
			   $this->collFileWaitings = array();
			} else {

				$criteria->add(FileWaitingPeer::FILE_ID, $this->id);

				FileWaitingPeer::addSelectColumns($criteria);
				$this->collFileWaitings = FileWaitingPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FileWaitingPeer::FILE_ID, $this->id);

				FileWaitingPeer::addSelectColumns($criteria);
				if (!isset($this->lastFileWaitingCriteria) || !$this->lastFileWaitingCriteria->equals($criteria)) {
					$this->collFileWaitings = FileWaitingPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFileWaitingCriteria = $criteria;
		return $this->collFileWaitings;
	}

	/**
	 * Returns the number of related FileWaiting objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related FileWaiting objects.
	 * @throws     PropelException
	 */
	public function countFileWaitings(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFileWaitings === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FileWaitingPeer::FILE_ID, $this->id);

				$count = FileWaitingPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FileWaitingPeer::FILE_ID, $this->id);

				if (!isset($this->lastFileWaitingCriteria) || !$this->lastFileWaitingCriteria->equals($criteria)) {
					$count = FileWaitingPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFileWaitings);
				}
			} else {
				$count = count($this->collFileWaitings);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a FileWaiting object to this object
	 * through the FileWaiting foreign key attribute.
	 *
	 * @param      FileWaiting $l FileWaiting
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFileWaiting(FileWaiting $l)
	{
		if ($this->collFileWaitings === null) {
			$this->initFileWaitings();
		}
		if (!in_array($l, $this->collFileWaitings, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFileWaitings, $l);
			$l->setFile($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this File is new, it will return
	 * an empty collection; or if this File has previously
	 * been saved, it will retrieve related FileWaitings from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in File.
	 */
	public function getFileWaitingsJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileWaitings === null) {
			if ($this->isNew()) {
				$this->collFileWaitings = array();
			} else {

				$criteria->add(FileWaitingPeer::FILE_ID, $this->id);

				$this->collFileWaitings = FileWaitingPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FileWaitingPeer::FILE_ID, $this->id);

			if (!isset($this->lastFileWaitingCriteria) || !$this->lastFileWaitingCriteria->equals($criteria)) {
				$this->collFileWaitings = FileWaitingPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileWaitingCriteria = $criteria;

		return $this->collFileWaitings;
	}

	/**
	 * Clears out the collFileRelatedsRelatedByFileIdTo collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFileRelatedsRelatedByFileIdTo()
	 */
	public function clearFileRelatedsRelatedByFileIdTo()
	{
		$this->collFileRelatedsRelatedByFileIdTo = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFileRelatedsRelatedByFileIdTo collection (array).
	 *
	 * By default this just sets the collFileRelatedsRelatedByFileIdTo collection to an empty array (like clearcollFileRelatedsRelatedByFileIdTo());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFileRelatedsRelatedByFileIdTo()
	{
		$this->collFileRelatedsRelatedByFileIdTo = array();
	}

	/**
	 * Gets an array of FileRelated objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this File has previously been saved, it will retrieve
	 * related FileRelatedsRelatedByFileIdTo from storage. If this File is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array FileRelated[]
	 * @throws     PropelException
	 */
	public function getFileRelatedsRelatedByFileIdTo($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileRelatedsRelatedByFileIdTo === null) {
			if ($this->isNew()) {
			   $this->collFileRelatedsRelatedByFileIdTo = array();
			} else {

				$criteria->add(FileRelatedPeer::FILE_ID_TO, $this->id);

				FileRelatedPeer::addSelectColumns($criteria);
				$this->collFileRelatedsRelatedByFileIdTo = FileRelatedPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FileRelatedPeer::FILE_ID_TO, $this->id);

				FileRelatedPeer::addSelectColumns($criteria);
				if (!isset($this->lastFileRelatedRelatedByFileIdToCriteria) || !$this->lastFileRelatedRelatedByFileIdToCriteria->equals($criteria)) {
					$this->collFileRelatedsRelatedByFileIdTo = FileRelatedPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFileRelatedRelatedByFileIdToCriteria = $criteria;
		return $this->collFileRelatedsRelatedByFileIdTo;
	}

	/**
	 * Returns the number of related FileRelated objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related FileRelated objects.
	 * @throws     PropelException
	 */
	public function countFileRelatedsRelatedByFileIdTo(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFileRelatedsRelatedByFileIdTo === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FileRelatedPeer::FILE_ID_TO, $this->id);

				$count = FileRelatedPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FileRelatedPeer::FILE_ID_TO, $this->id);

				if (!isset($this->lastFileRelatedRelatedByFileIdToCriteria) || !$this->lastFileRelatedRelatedByFileIdToCriteria->equals($criteria)) {
					$count = FileRelatedPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFileRelatedsRelatedByFileIdTo);
				}
			} else {
				$count = count($this->collFileRelatedsRelatedByFileIdTo);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a FileRelated object to this object
	 * through the FileRelated foreign key attribute.
	 *
	 * @param      FileRelated $l FileRelated
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFileRelatedRelatedByFileIdTo(FileRelated $l)
	{
		if ($this->collFileRelatedsRelatedByFileIdTo === null) {
			$this->initFileRelatedsRelatedByFileIdTo();
		}
		if (!in_array($l, $this->collFileRelatedsRelatedByFileIdTo, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFileRelatedsRelatedByFileIdTo, $l);
			$l->setFileRelatedByFileIdTo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this File is new, it will return
	 * an empty collection; or if this File has previously
	 * been saved, it will retrieve related FileRelatedsRelatedByFileIdTo from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in File.
	 */
	public function getFileRelatedsRelatedByFileIdToJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileRelatedsRelatedByFileIdTo === null) {
			if ($this->isNew()) {
				$this->collFileRelatedsRelatedByFileIdTo = array();
			} else {

				$criteria->add(FileRelatedPeer::FILE_ID_TO, $this->id);

				$this->collFileRelatedsRelatedByFileIdTo = FileRelatedPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FileRelatedPeer::FILE_ID_TO, $this->id);

			if (!isset($this->lastFileRelatedRelatedByFileIdToCriteria) || !$this->lastFileRelatedRelatedByFileIdToCriteria->equals($criteria)) {
				$this->collFileRelatedsRelatedByFileIdTo = FileRelatedPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileRelatedRelatedByFileIdToCriteria = $criteria;

		return $this->collFileRelatedsRelatedByFileIdTo;
	}

	/**
	 * Clears out the collFileRelatedsRelatedByFileIdFrom collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFileRelatedsRelatedByFileIdFrom()
	 */
	public function clearFileRelatedsRelatedByFileIdFrom()
	{
		$this->collFileRelatedsRelatedByFileIdFrom = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFileRelatedsRelatedByFileIdFrom collection (array).
	 *
	 * By default this just sets the collFileRelatedsRelatedByFileIdFrom collection to an empty array (like clearcollFileRelatedsRelatedByFileIdFrom());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFileRelatedsRelatedByFileIdFrom()
	{
		$this->collFileRelatedsRelatedByFileIdFrom = array();
	}

	/**
	 * Gets an array of FileRelated objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this File has previously been saved, it will retrieve
	 * related FileRelatedsRelatedByFileIdFrom from storage. If this File is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array FileRelated[]
	 * @throws     PropelException
	 */
	public function getFileRelatedsRelatedByFileIdFrom($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileRelatedsRelatedByFileIdFrom === null) {
			if ($this->isNew()) {
			   $this->collFileRelatedsRelatedByFileIdFrom = array();
			} else {

				$criteria->add(FileRelatedPeer::FILE_ID_FROM, $this->id);

				FileRelatedPeer::addSelectColumns($criteria);
				$this->collFileRelatedsRelatedByFileIdFrom = FileRelatedPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FileRelatedPeer::FILE_ID_FROM, $this->id);

				FileRelatedPeer::addSelectColumns($criteria);
				if (!isset($this->lastFileRelatedRelatedByFileIdFromCriteria) || !$this->lastFileRelatedRelatedByFileIdFromCriteria->equals($criteria)) {
					$this->collFileRelatedsRelatedByFileIdFrom = FileRelatedPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFileRelatedRelatedByFileIdFromCriteria = $criteria;
		return $this->collFileRelatedsRelatedByFileIdFrom;
	}

	/**
	 * Returns the number of related FileRelated objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related FileRelated objects.
	 * @throws     PropelException
	 */
	public function countFileRelatedsRelatedByFileIdFrom(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFileRelatedsRelatedByFileIdFrom === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FileRelatedPeer::FILE_ID_FROM, $this->id);

				$count = FileRelatedPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FileRelatedPeer::FILE_ID_FROM, $this->id);

				if (!isset($this->lastFileRelatedRelatedByFileIdFromCriteria) || !$this->lastFileRelatedRelatedByFileIdFromCriteria->equals($criteria)) {
					$count = FileRelatedPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFileRelatedsRelatedByFileIdFrom);
				}
			} else {
				$count = count($this->collFileRelatedsRelatedByFileIdFrom);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a FileRelated object to this object
	 * through the FileRelated foreign key attribute.
	 *
	 * @param      FileRelated $l FileRelated
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFileRelatedRelatedByFileIdFrom(FileRelated $l)
	{
		if ($this->collFileRelatedsRelatedByFileIdFrom === null) {
			$this->initFileRelatedsRelatedByFileIdFrom();
		}
		if (!in_array($l, $this->collFileRelatedsRelatedByFileIdFrom, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFileRelatedsRelatedByFileIdFrom, $l);
			$l->setFileRelatedByFileIdFrom($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this File is new, it will return
	 * an empty collection; or if this File has previously
	 * been saved, it will retrieve related FileRelatedsRelatedByFileIdFrom from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in File.
	 */
	public function getFileRelatedsRelatedByFileIdFromJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileRelatedsRelatedByFileIdFrom === null) {
			if ($this->isNew()) {
				$this->collFileRelatedsRelatedByFileIdFrom = array();
			} else {

				$criteria->add(FileRelatedPeer::FILE_ID_FROM, $this->id);

				$this->collFileRelatedsRelatedByFileIdFrom = FileRelatedPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FileRelatedPeer::FILE_ID_FROM, $this->id);

			if (!isset($this->lastFileRelatedRelatedByFileIdFromCriteria) || !$this->lastFileRelatedRelatedByFileIdFromCriteria->equals($criteria)) {
				$this->collFileRelatedsRelatedByFileIdFrom = FileRelatedPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileRelatedRelatedByFileIdFromCriteria = $criteria;

		return $this->collFileRelatedsRelatedByFileIdFrom;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collComments) {
				foreach ((array) $this->collComments as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFileTmps) {
				foreach ((array) $this->collFileTmps as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRatings) {
				foreach ((array) $this->collRatings as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collExifs) {
				foreach ((array) $this->collExifs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collIptcs) {
				foreach ((array) $this->collIptcs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collBasketHasContents) {
				foreach ((array) $this->collBasketHasContents as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFileWaitings) {
				foreach ((array) $this->collFileWaitings as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFileRelatedsRelatedByFileIdTo) {
				foreach ((array) $this->collFileRelatedsRelatedByFileIdTo as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFileRelatedsRelatedByFileIdFrom) {
				foreach ((array) $this->collFileRelatedsRelatedByFileIdFrom as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collComments = null;
		$this->collFileTmps = null;
		$this->collRatings = null;
		$this->collExifs = null;
		$this->collIptcs = null;
		$this->collBasketHasContents = null;
		$this->collFileWaitings = null;
		$this->collFileRelatedsRelatedByFileIdTo = null;
		$this->collFileRelatedsRelatedByFileIdFrom = null;
			$this->aUser = null;
			$this->aGroupe = null;
			$this->aFolder = null;
			$this->aDisk = null;
			$this->aLicence = null;
			$this->aUsageDistribution = null;
			$this->aUsageConstraint = null;
			$this->aUsageUse = null;
			$this->aUsageCommercial = null;
			$this->aCreativeCommons = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseFile:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseFile::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseFile
