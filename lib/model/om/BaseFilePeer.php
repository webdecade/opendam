<?php

/**
 * Base static class for performing query and update operations on the 'file' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Oct 31 14:46:47 2013
 *
 * @package    lib.model.om
 */
abstract class BaseFilePeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'file';

	/** the related Propel class for this table */
	const OM_CLASS = 'File';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.File';

	/** the related TableMap class for this table */
	const TM_CLASS = 'FileTableMap';
	
	/** The total number of columns. */
	const NUM_COLUMNS = 39;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the ID field */
	const ID = 'file.ID';

	/** the column name for the TYPE field */
	const TYPE = 'file.TYPE';

	/** the column name for the NAME field */
	const NAME = 'file.NAME';

	/** the column name for the DESCRIPTION field */
	const DESCRIPTION = 'file.DESCRIPTION';

	/** the column name for the ORIGINAL field */
	const ORIGINAL = 'file.ORIGINAL';

	/** the column name for the WEB field */
	const WEB = 'file.WEB';

	/** the column name for the THUMB200 field */
	const THUMB200 = 'file.THUMB200';

	/** the column name for the THUMB100 field */
	const THUMB100 = 'file.THUMB100';

	/** the column name for the EXTENTION field */
	const EXTENTION = 'file.EXTENTION';

	/** the column name for the SIZE field */
	const SIZE = 'file.SIZE';

	/** the column name for the FOLDER_COVER field */
	const FOLDER_COVER = 'file.FOLDER_COVER';

	/** the column name for the LAT field */
	const LAT = 'file.LAT';

	/** the column name for the LNG field */
	const LNG = 'file.LNG';

	/** the column name for the AVERAGE_POINT field */
	const AVERAGE_POINT = 'file.AVERAGE_POINT';

	/** the column name for the USER_ID field */
	const USER_ID = 'file.USER_ID';

	/** the column name for the GROUPE_ID field */
	const GROUPE_ID = 'file.GROUPE_ID';

	/** the column name for the FOLDER_ID field */
	const FOLDER_ID = 'file.FOLDER_ID';

	/** the column name for the CREATED_AT field */
	const CREATED_AT = 'file.CREATED_AT';

	/** the column name for the MAIN_COLOR field */
	const MAIN_COLOR = 'file.MAIN_COLOR';

	/** the column name for the STATE field */
	const STATE = 'file.STATE';

	/** the column name for the UPDATED_AT field */
	const UPDATED_AT = 'file.UPDATED_AT';

	/** the column name for the DISK_ID field */
	const DISK_ID = 'file.DISK_ID';

	/** the column name for the SOURCE field */
	const SOURCE = 'file.SOURCE';

	/** the column name for the LICENCE_ID field */
	const LICENCE_ID = 'file.LICENCE_ID';

	/** the column name for the USAGE_DISTRIBUTION_ID field */
	const USAGE_DISTRIBUTION_ID = 'file.USAGE_DISTRIBUTION_ID';

	/** the column name for the USAGE_CONSTRAINT_ID field */
	const USAGE_CONSTRAINT_ID = 'file.USAGE_CONSTRAINT_ID';

	/** the column name for the USAGE_USE_ID field */
	const USAGE_USE_ID = 'file.USAGE_USE_ID';

	/** the column name for the USAGE_COMMERCIAL_ID field */
	const USAGE_COMMERCIAL_ID = 'file.USAGE_COMMERCIAL_ID';

	/** the column name for the CREATIVE_COMMONS_ID field */
	const CREATIVE_COMMONS_ID = 'file.CREATIVE_COMMONS_ID';

	/** the column name for the WIDTH field */
	const WIDTH = 'file.WIDTH';

	/** the column name for the HEIGHT field */
	const HEIGHT = 'file.HEIGHT';

	/** the column name for the CHECKSUM field */
	const CHECKSUM = 'file.CHECKSUM';

	/** the column name for the THUMB_MOB field */
	const THUMB_MOB = 'file.THUMB_MOB';

	/** the column name for the THUMB_MOB_W field */
	const THUMB_MOB_W = 'file.THUMB_MOB_W';

	/** the column name for the THUMB_TAB field */
	const THUMB_TAB = 'file.THUMB_TAB';

	/** the column name for the THUMB_TAB_W field */
	const THUMB_TAB_W = 'file.THUMB_TAB_W';

	/** the column name for the GROUPE_COVER field */
	const GROUPE_COVER = 'file.GROUPE_COVER';

	/** the column name for the THUMB400 field */
	const THUMB400 = 'file.THUMB400';

	/** the column name for the THUMB400_W field */
	const THUMB400_W = 'file.THUMB400_W';

	/**
	 * An identiy map to hold any loaded instances of File objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array File[]
	 */
	public static $instances = array();


	// symfony behavior
	
	/**
	 * Indicates whether the current model includes I18N.
	 */
	const IS_I18N = false;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('Id', 'Type', 'Name', 'Description', 'Original', 'Web', 'Thumb200', 'Thumb100', 'Extention', 'Size', 'FolderCover', 'Lat', 'Lng', 'AveragePoint', 'UserId', 'GroupeId', 'FolderId', 'CreatedAt', 'MainColor', 'State', 'UpdatedAt', 'DiskId', 'Source', 'LicenceId', 'UsageDistributionId', 'UsageConstraintId', 'UsageUseId', 'UsageCommercialId', 'CreativeCommonsId', 'Width', 'Height', 'Checksum', 'ThumbMob', 'ThumbMobW', 'ThumbTab', 'ThumbTabW', 'GroupeCover', 'Thumb400', 'Thumb400W', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id', 'type', 'name', 'description', 'original', 'web', 'thumb200', 'thumb100', 'extention', 'size', 'folderCover', 'lat', 'lng', 'averagePoint', 'userId', 'groupeId', 'folderId', 'createdAt', 'mainColor', 'state', 'updatedAt', 'diskId', 'source', 'licenceId', 'usageDistributionId', 'usageConstraintId', 'usageUseId', 'usageCommercialId', 'creativeCommonsId', 'width', 'height', 'checksum', 'thumbMob', 'thumbMobW', 'thumbTab', 'thumbTabW', 'groupeCover', 'thumb400', 'thumb400W', ),
		BasePeer::TYPE_COLNAME => array (self::ID, self::TYPE, self::NAME, self::DESCRIPTION, self::ORIGINAL, self::WEB, self::THUMB200, self::THUMB100, self::EXTENTION, self::SIZE, self::FOLDER_COVER, self::LAT, self::LNG, self::AVERAGE_POINT, self::USER_ID, self::GROUPE_ID, self::FOLDER_ID, self::CREATED_AT, self::MAIN_COLOR, self::STATE, self::UPDATED_AT, self::DISK_ID, self::SOURCE, self::LICENCE_ID, self::USAGE_DISTRIBUTION_ID, self::USAGE_CONSTRAINT_ID, self::USAGE_USE_ID, self::USAGE_COMMERCIAL_ID, self::CREATIVE_COMMONS_ID, self::WIDTH, self::HEIGHT, self::CHECKSUM, self::THUMB_MOB, self::THUMB_MOB_W, self::THUMB_TAB, self::THUMB_TAB_W, self::GROUPE_COVER, self::THUMB400, self::THUMB400_W, ),
		BasePeer::TYPE_FIELDNAME => array ('id', 'type', 'name', 'description', 'original', 'web', 'thumb200', 'thumb100', 'extention', 'size', 'folder_cover', 'lat', 'lng', 'average_point', 'user_id', 'groupe_id', 'folder_id', 'created_at', 'main_color', 'state', 'updated_at', 'disk_id', 'source', 'licence_id', 'usage_distribution_id', 'usage_constraint_id', 'usage_use_id', 'usage_commercial_id', 'creative_commons_id', 'width', 'height', 'checksum', 'thumb_mob', 'thumb_mob_w', 'thumb_tab', 'thumb_tab_w', 'groupe_cover', 'thumb400', 'thumb400_w', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('Id' => 0, 'Type' => 1, 'Name' => 2, 'Description' => 3, 'Original' => 4, 'Web' => 5, 'Thumb200' => 6, 'Thumb100' => 7, 'Extention' => 8, 'Size' => 9, 'FolderCover' => 10, 'Lat' => 11, 'Lng' => 12, 'AveragePoint' => 13, 'UserId' => 14, 'GroupeId' => 15, 'FolderId' => 16, 'CreatedAt' => 17, 'MainColor' => 18, 'State' => 19, 'UpdatedAt' => 20, 'DiskId' => 21, 'Source' => 22, 'LicenceId' => 23, 'UsageDistributionId' => 24, 'UsageConstraintId' => 25, 'UsageUseId' => 26, 'UsageCommercialId' => 27, 'CreativeCommonsId' => 28, 'Width' => 29, 'Height' => 30, 'Checksum' => 31, 'ThumbMob' => 32, 'ThumbMobW' => 33, 'ThumbTab' => 34, 'ThumbTabW' => 35, 'GroupeCover' => 36, 'Thumb400' => 37, 'Thumb400W' => 38, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id' => 0, 'type' => 1, 'name' => 2, 'description' => 3, 'original' => 4, 'web' => 5, 'thumb200' => 6, 'thumb100' => 7, 'extention' => 8, 'size' => 9, 'folderCover' => 10, 'lat' => 11, 'lng' => 12, 'averagePoint' => 13, 'userId' => 14, 'groupeId' => 15, 'folderId' => 16, 'createdAt' => 17, 'mainColor' => 18, 'state' => 19, 'updatedAt' => 20, 'diskId' => 21, 'source' => 22, 'licenceId' => 23, 'usageDistributionId' => 24, 'usageConstraintId' => 25, 'usageUseId' => 26, 'usageCommercialId' => 27, 'creativeCommonsId' => 28, 'width' => 29, 'height' => 30, 'checksum' => 31, 'thumbMob' => 32, 'thumbMobW' => 33, 'thumbTab' => 34, 'thumbTabW' => 35, 'groupeCover' => 36, 'thumb400' => 37, 'thumb400W' => 38, ),
		BasePeer::TYPE_COLNAME => array (self::ID => 0, self::TYPE => 1, self::NAME => 2, self::DESCRIPTION => 3, self::ORIGINAL => 4, self::WEB => 5, self::THUMB200 => 6, self::THUMB100 => 7, self::EXTENTION => 8, self::SIZE => 9, self::FOLDER_COVER => 10, self::LAT => 11, self::LNG => 12, self::AVERAGE_POINT => 13, self::USER_ID => 14, self::GROUPE_ID => 15, self::FOLDER_ID => 16, self::CREATED_AT => 17, self::MAIN_COLOR => 18, self::STATE => 19, self::UPDATED_AT => 20, self::DISK_ID => 21, self::SOURCE => 22, self::LICENCE_ID => 23, self::USAGE_DISTRIBUTION_ID => 24, self::USAGE_CONSTRAINT_ID => 25, self::USAGE_USE_ID => 26, self::USAGE_COMMERCIAL_ID => 27, self::CREATIVE_COMMONS_ID => 28, self::WIDTH => 29, self::HEIGHT => 30, self::CHECKSUM => 31, self::THUMB_MOB => 32, self::THUMB_MOB_W => 33, self::THUMB_TAB => 34, self::THUMB_TAB_W => 35, self::GROUPE_COVER => 36, self::THUMB400 => 37, self::THUMB400_W => 38, ),
		BasePeer::TYPE_FIELDNAME => array ('id' => 0, 'type' => 1, 'name' => 2, 'description' => 3, 'original' => 4, 'web' => 5, 'thumb200' => 6, 'thumb100' => 7, 'extention' => 8, 'size' => 9, 'folder_cover' => 10, 'lat' => 11, 'lng' => 12, 'average_point' => 13, 'user_id' => 14, 'groupe_id' => 15, 'folder_id' => 16, 'created_at' => 17, 'main_color' => 18, 'state' => 19, 'updated_at' => 20, 'disk_id' => 21, 'source' => 22, 'licence_id' => 23, 'usage_distribution_id' => 24, 'usage_constraint_id' => 25, 'usage_use_id' => 26, 'usage_commercial_id' => 27, 'creative_commons_id' => 28, 'width' => 29, 'height' => 30, 'checksum' => 31, 'thumb_mob' => 32, 'thumb_mob_w' => 33, 'thumb_tab' => 34, 'thumb_tab_w' => 35, 'groupe_cover' => 36, 'thumb400' => 37, 'thumb400_w' => 38, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, )
	);

	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. FilePeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(FilePeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{
		$criteria->addSelectColumn(FilePeer::ID);
		$criteria->addSelectColumn(FilePeer::TYPE);
		$criteria->addSelectColumn(FilePeer::NAME);
		$criteria->addSelectColumn(FilePeer::DESCRIPTION);
		$criteria->addSelectColumn(FilePeer::ORIGINAL);
		$criteria->addSelectColumn(FilePeer::WEB);
		$criteria->addSelectColumn(FilePeer::THUMB200);
		$criteria->addSelectColumn(FilePeer::THUMB100);
		$criteria->addSelectColumn(FilePeer::EXTENTION);
		$criteria->addSelectColumn(FilePeer::SIZE);
		$criteria->addSelectColumn(FilePeer::FOLDER_COVER);
		$criteria->addSelectColumn(FilePeer::LAT);
		$criteria->addSelectColumn(FilePeer::LNG);
		$criteria->addSelectColumn(FilePeer::AVERAGE_POINT);
		$criteria->addSelectColumn(FilePeer::USER_ID);
		$criteria->addSelectColumn(FilePeer::GROUPE_ID);
		$criteria->addSelectColumn(FilePeer::FOLDER_ID);
		$criteria->addSelectColumn(FilePeer::CREATED_AT);
		$criteria->addSelectColumn(FilePeer::MAIN_COLOR);
		$criteria->addSelectColumn(FilePeer::STATE);
		$criteria->addSelectColumn(FilePeer::UPDATED_AT);
		$criteria->addSelectColumn(FilePeer::DISK_ID);
		$criteria->addSelectColumn(FilePeer::SOURCE);
		$criteria->addSelectColumn(FilePeer::LICENCE_ID);
		$criteria->addSelectColumn(FilePeer::USAGE_DISTRIBUTION_ID);
		$criteria->addSelectColumn(FilePeer::USAGE_CONSTRAINT_ID);
		$criteria->addSelectColumn(FilePeer::USAGE_USE_ID);
		$criteria->addSelectColumn(FilePeer::USAGE_COMMERCIAL_ID);
		$criteria->addSelectColumn(FilePeer::CREATIVE_COMMONS_ID);
		$criteria->addSelectColumn(FilePeer::WIDTH);
		$criteria->addSelectColumn(FilePeer::HEIGHT);
		$criteria->addSelectColumn(FilePeer::CHECKSUM);
		$criteria->addSelectColumn(FilePeer::THUMB_MOB);
		$criteria->addSelectColumn(FilePeer::THUMB_MOB_W);
		$criteria->addSelectColumn(FilePeer::THUMB_TAB);
		$criteria->addSelectColumn(FilePeer::THUMB_TAB_W);
		$criteria->addSelectColumn(FilePeer::GROUPE_COVER);
		$criteria->addSelectColumn(FilePeer::THUMB400);
		$criteria->addSelectColumn(FilePeer::THUMB400_W);
	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     File
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = FilePeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return FilePeer::populateObjects(FilePeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			FilePeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}


		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      File $value A File object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(File $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A File object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof File) {
				$key = (string) $value->getId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or File object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     File Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Method to invalidate the instance pool of all tables related to file
	 * by a foreign key with ON DELETE CASCADE
	 */
	public static function clearRelatedInstancePool()
	{
		// invalidate objects in CommentPeer instance pool, since one or more of them may be deleted by ON DELETE CASCADE rule.
		CommentPeer::clearInstancePool();

		// invalidate objects in FileTmpPeer instance pool, since one or more of them may be deleted by ON DELETE CASCADE rule.
		FileTmpPeer::clearInstancePool();

		// invalidate objects in RatingPeer instance pool, since one or more of them may be deleted by ON DELETE CASCADE rule.
		RatingPeer::clearInstancePool();

		// invalidate objects in ExifPeer instance pool, since one or more of them may be deleted by ON DELETE CASCADE rule.
		ExifPeer::clearInstancePool();

		// invalidate objects in IptcPeer instance pool, since one or more of them may be deleted by ON DELETE CASCADE rule.
		IptcPeer::clearInstancePool();

		// invalidate objects in BasketHasContentPeer instance pool, since one or more of them may be deleted by ON DELETE CASCADE rule.
		BasketHasContentPeer::clearInstancePool();

		// invalidate objects in FileWaitingPeer instance pool, since one or more of them may be deleted by ON DELETE CASCADE rule.
		FileWaitingPeer::clearInstancePool();

		// invalidate objects in FileRelatedPeer instance pool, since one or more of them may be deleted by ON DELETE CASCADE rule.
		FileRelatedPeer::clearInstancePool();

		// invalidate objects in FileRelatedPeer instance pool, since one or more of them may be deleted by ON DELETE CASCADE rule.
		FileRelatedPeer::clearInstancePool();

	}

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol] === null) {
			return null;
		}
		return (string) $row[$startcol];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = FilePeer::getOMClass(false);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = FilePeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				FilePeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related User table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinUser(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Groupe table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinGroupe(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Folder table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinFolder(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Disk table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinDisk(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Licence table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinLicence(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related UsageDistribution table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinUsageDistribution(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related UsageConstraint table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinUsageConstraint(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related UsageUse table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinUsageUse(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related UsageCommercial table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinUsageCommercial(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related CreativeCommons table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinCreativeCommons(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of File objects pre-filled with their User objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinUser(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);
		UserPeer::addSelectColumns($criteria);

		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = UserPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = UserPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = UserPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					UserPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (File) to $obj2 (User)
				$obj2->addFile($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with their Groupe objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinGroupe(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);
		GroupePeer::addSelectColumns($criteria);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = GroupePeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = GroupePeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = GroupePeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					GroupePeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (File) to $obj2 (Groupe)
				$obj2->addFile($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with their Folder objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinFolder(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);
		FolderPeer::addSelectColumns($criteria);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = FolderPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = FolderPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = FolderPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					FolderPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (File) to $obj2 (Folder)
				$obj2->addFile($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with their Disk objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinDisk(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);
		DiskPeer::addSelectColumns($criteria);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = DiskPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = DiskPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = DiskPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					DiskPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (File) to $obj2 (Disk)
				$obj2->addFile($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with their Licence objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinLicence(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);
		LicencePeer::addSelectColumns($criteria);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = LicencePeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = LicencePeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = LicencePeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					LicencePeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (File) to $obj2 (Licence)
				$obj2->addFile($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with their UsageDistribution objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinUsageDistribution(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);
		UsageDistributionPeer::addSelectColumns($criteria);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = UsageDistributionPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = UsageDistributionPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = UsageDistributionPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					UsageDistributionPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (File) to $obj2 (UsageDistribution)
				$obj2->addFile($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with their UsageConstraint objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinUsageConstraint(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);
		UsageConstraintPeer::addSelectColumns($criteria);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = UsageConstraintPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = UsageConstraintPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = UsageConstraintPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					UsageConstraintPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (File) to $obj2 (UsageConstraint)
				$obj2->addFile($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with their UsageUse objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinUsageUse(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);
		UsageUsePeer::addSelectColumns($criteria);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = UsageUsePeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = UsageUsePeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = UsageUsePeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					UsageUsePeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (File) to $obj2 (UsageUse)
				$obj2->addFile($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with their UsageCommercial objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinUsageCommercial(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);
		UsageCommercialPeer::addSelectColumns($criteria);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = UsageCommercialPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = UsageCommercialPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = UsageCommercialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					UsageCommercialPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (File) to $obj2 (UsageCommercial)
				$obj2->addFile($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with their CreativeCommons objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinCreativeCommons(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);
		CreativeCommonsPeer::addSelectColumns($criteria);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = CreativeCommonsPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = CreativeCommonsPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = CreativeCommonsPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					CreativeCommonsPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (File) to $obj2 (CreativeCommons)
				$obj2->addFile($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of File objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol2 = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);

		UserPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS);

		GroupePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (GroupePeer::NUM_COLUMNS - GroupePeer::NUM_LAZY_LOAD_COLUMNS);

		FolderPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (FolderPeer::NUM_COLUMNS - FolderPeer::NUM_LAZY_LOAD_COLUMNS);

		DiskPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (DiskPeer::NUM_COLUMNS - DiskPeer::NUM_LAZY_LOAD_COLUMNS);

		LicencePeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (LicencePeer::NUM_COLUMNS - LicencePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageDistributionPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (UsageDistributionPeer::NUM_COLUMNS - UsageDistributionPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageConstraintPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (UsageConstraintPeer::NUM_COLUMNS - UsageConstraintPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageUsePeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (UsageUsePeer::NUM_COLUMNS - UsageUsePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageCommercialPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (UsageCommercialPeer::NUM_COLUMNS - UsageCommercialPeer::NUM_LAZY_LOAD_COLUMNS);

		CreativeCommonsPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (CreativeCommonsPeer::NUM_COLUMNS - CreativeCommonsPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined User rows

			$key2 = UserPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = UserPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = UserPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					UserPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (File) to the collection in $obj2 (User)
				$obj2->addFile($obj1);
			} // if joined row not null

			// Add objects for joined Groupe rows

			$key3 = GroupePeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = GroupePeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = GroupePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					GroupePeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (File) to the collection in $obj3 (Groupe)
				$obj3->addFile($obj1);
			} // if joined row not null

			// Add objects for joined Folder rows

			$key4 = FolderPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = FolderPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$cls = FolderPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					FolderPeer::addInstanceToPool($obj4, $key4);
				} // if obj4 loaded

				// Add the $obj1 (File) to the collection in $obj4 (Folder)
				$obj4->addFile($obj1);
			} // if joined row not null

			// Add objects for joined Disk rows

			$key5 = DiskPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = DiskPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$cls = DiskPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					DiskPeer::addInstanceToPool($obj5, $key5);
				} // if obj5 loaded

				// Add the $obj1 (File) to the collection in $obj5 (Disk)
				$obj5->addFile($obj1);
			} // if joined row not null

			// Add objects for joined Licence rows

			$key6 = LicencePeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = LicencePeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$cls = LicencePeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					LicencePeer::addInstanceToPool($obj6, $key6);
				} // if obj6 loaded

				// Add the $obj1 (File) to the collection in $obj6 (Licence)
				$obj6->addFile($obj1);
			} // if joined row not null

			// Add objects for joined UsageDistribution rows

			$key7 = UsageDistributionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = UsageDistributionPeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$cls = UsageDistributionPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UsageDistributionPeer::addInstanceToPool($obj7, $key7);
				} // if obj7 loaded

				// Add the $obj1 (File) to the collection in $obj7 (UsageDistribution)
				$obj7->addFile($obj1);
			} // if joined row not null

			// Add objects for joined UsageConstraint rows

			$key8 = UsageConstraintPeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = UsageConstraintPeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$cls = UsageConstraintPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsageConstraintPeer::addInstanceToPool($obj8, $key8);
				} // if obj8 loaded

				// Add the $obj1 (File) to the collection in $obj8 (UsageConstraint)
				$obj8->addFile($obj1);
			} // if joined row not null

			// Add objects for joined UsageUse rows

			$key9 = UsageUsePeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = UsageUsePeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$cls = UsageUsePeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					UsageUsePeer::addInstanceToPool($obj9, $key9);
				} // if obj9 loaded

				// Add the $obj1 (File) to the collection in $obj9 (UsageUse)
				$obj9->addFile($obj1);
			} // if joined row not null

			// Add objects for joined UsageCommercial rows

			$key10 = UsageCommercialPeer::getPrimaryKeyHashFromRow($row, $startcol10);
			if ($key10 !== null) {
				$obj10 = UsageCommercialPeer::getInstanceFromPool($key10);
				if (!$obj10) {

					$cls = UsageCommercialPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					UsageCommercialPeer::addInstanceToPool($obj10, $key10);
				} // if obj10 loaded

				// Add the $obj1 (File) to the collection in $obj10 (UsageCommercial)
				$obj10->addFile($obj1);
			} // if joined row not null

			// Add objects for joined CreativeCommons rows

			$key11 = CreativeCommonsPeer::getPrimaryKeyHashFromRow($row, $startcol11);
			if ($key11 !== null) {
				$obj11 = CreativeCommonsPeer::getInstanceFromPool($key11);
				if (!$obj11) {

					$cls = CreativeCommonsPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					CreativeCommonsPeer::addInstanceToPool($obj11, $key11);
				} // if obj11 loaded

				// Add the $obj1 (File) to the collection in $obj11 (CreativeCommons)
				$obj11->addFile($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related User table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptUser(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Groupe table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptGroupe(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Folder table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptFolder(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Disk table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptDisk(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Licence table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptLicence(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related UsageDistribution table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptUsageDistribution(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related UsageConstraint table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptUsageConstraint(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related UsageUse table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptUsageUse(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related UsageCommercial table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptUsageCommercial(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related CreativeCommons table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptCreativeCommons(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(FilePeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			FilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of File objects pre-filled with all related objects except User.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptUser(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol2 = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);

		GroupePeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (GroupePeer::NUM_COLUMNS - GroupePeer::NUM_LAZY_LOAD_COLUMNS);

		FolderPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (FolderPeer::NUM_COLUMNS - FolderPeer::NUM_LAZY_LOAD_COLUMNS);

		DiskPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (DiskPeer::NUM_COLUMNS - DiskPeer::NUM_LAZY_LOAD_COLUMNS);

		LicencePeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (LicencePeer::NUM_COLUMNS - LicencePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageDistributionPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (UsageDistributionPeer::NUM_COLUMNS - UsageDistributionPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageConstraintPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (UsageConstraintPeer::NUM_COLUMNS - UsageConstraintPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageUsePeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (UsageUsePeer::NUM_COLUMNS - UsageUsePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageCommercialPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (UsageCommercialPeer::NUM_COLUMNS - UsageCommercialPeer::NUM_LAZY_LOAD_COLUMNS);

		CreativeCommonsPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (CreativeCommonsPeer::NUM_COLUMNS - CreativeCommonsPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Groupe rows

				$key2 = GroupePeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = GroupePeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = GroupePeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					GroupePeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (File) to the collection in $obj2 (Groupe)
				$obj2->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Folder rows

				$key3 = FolderPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = FolderPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = FolderPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					FolderPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (File) to the collection in $obj3 (Folder)
				$obj3->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Disk rows

				$key4 = DiskPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = DiskPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = DiskPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					DiskPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (File) to the collection in $obj4 (Disk)
				$obj4->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Licence rows

				$key5 = LicencePeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = LicencePeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = LicencePeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					LicencePeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (File) to the collection in $obj5 (Licence)
				$obj5->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageDistribution rows

				$key6 = UsageDistributionPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = UsageDistributionPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = UsageDistributionPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					UsageDistributionPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (File) to the collection in $obj6 (UsageDistribution)
				$obj6->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageConstraint rows

				$key7 = UsageConstraintPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UsageConstraintPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = UsageConstraintPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UsageConstraintPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (File) to the collection in $obj7 (UsageConstraint)
				$obj7->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageUse rows

				$key8 = UsageUsePeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsageUsePeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsageUsePeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsageUsePeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (File) to the collection in $obj8 (UsageUse)
				$obj8->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageCommercial rows

				$key9 = UsageCommercialPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = UsageCommercialPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = UsageCommercialPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					UsageCommercialPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (File) to the collection in $obj9 (UsageCommercial)
				$obj9->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined CreativeCommons rows

				$key10 = CreativeCommonsPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = CreativeCommonsPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = CreativeCommonsPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					CreativeCommonsPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (File) to the collection in $obj10 (CreativeCommons)
				$obj10->addFile($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with all related objects except Groupe.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptGroupe(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol2 = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);

		UserPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS);

		FolderPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (FolderPeer::NUM_COLUMNS - FolderPeer::NUM_LAZY_LOAD_COLUMNS);

		DiskPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (DiskPeer::NUM_COLUMNS - DiskPeer::NUM_LAZY_LOAD_COLUMNS);

		LicencePeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (LicencePeer::NUM_COLUMNS - LicencePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageDistributionPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (UsageDistributionPeer::NUM_COLUMNS - UsageDistributionPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageConstraintPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (UsageConstraintPeer::NUM_COLUMNS - UsageConstraintPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageUsePeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (UsageUsePeer::NUM_COLUMNS - UsageUsePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageCommercialPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (UsageCommercialPeer::NUM_COLUMNS - UsageCommercialPeer::NUM_LAZY_LOAD_COLUMNS);

		CreativeCommonsPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (CreativeCommonsPeer::NUM_COLUMNS - CreativeCommonsPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined User rows

				$key2 = UserPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = UserPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = UserPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					UserPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (File) to the collection in $obj2 (User)
				$obj2->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Folder rows

				$key3 = FolderPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = FolderPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = FolderPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					FolderPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (File) to the collection in $obj3 (Folder)
				$obj3->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Disk rows

				$key4 = DiskPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = DiskPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = DiskPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					DiskPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (File) to the collection in $obj4 (Disk)
				$obj4->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Licence rows

				$key5 = LicencePeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = LicencePeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = LicencePeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					LicencePeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (File) to the collection in $obj5 (Licence)
				$obj5->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageDistribution rows

				$key6 = UsageDistributionPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = UsageDistributionPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = UsageDistributionPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					UsageDistributionPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (File) to the collection in $obj6 (UsageDistribution)
				$obj6->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageConstraint rows

				$key7 = UsageConstraintPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UsageConstraintPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = UsageConstraintPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UsageConstraintPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (File) to the collection in $obj7 (UsageConstraint)
				$obj7->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageUse rows

				$key8 = UsageUsePeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsageUsePeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsageUsePeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsageUsePeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (File) to the collection in $obj8 (UsageUse)
				$obj8->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageCommercial rows

				$key9 = UsageCommercialPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = UsageCommercialPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = UsageCommercialPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					UsageCommercialPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (File) to the collection in $obj9 (UsageCommercial)
				$obj9->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined CreativeCommons rows

				$key10 = CreativeCommonsPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = CreativeCommonsPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = CreativeCommonsPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					CreativeCommonsPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (File) to the collection in $obj10 (CreativeCommons)
				$obj10->addFile($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with all related objects except Folder.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptFolder(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol2 = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);

		UserPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS);

		GroupePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (GroupePeer::NUM_COLUMNS - GroupePeer::NUM_LAZY_LOAD_COLUMNS);

		DiskPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (DiskPeer::NUM_COLUMNS - DiskPeer::NUM_LAZY_LOAD_COLUMNS);

		LicencePeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (LicencePeer::NUM_COLUMNS - LicencePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageDistributionPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (UsageDistributionPeer::NUM_COLUMNS - UsageDistributionPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageConstraintPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (UsageConstraintPeer::NUM_COLUMNS - UsageConstraintPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageUsePeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (UsageUsePeer::NUM_COLUMNS - UsageUsePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageCommercialPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (UsageCommercialPeer::NUM_COLUMNS - UsageCommercialPeer::NUM_LAZY_LOAD_COLUMNS);

		CreativeCommonsPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (CreativeCommonsPeer::NUM_COLUMNS - CreativeCommonsPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined User rows

				$key2 = UserPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = UserPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = UserPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					UserPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (File) to the collection in $obj2 (User)
				$obj2->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Groupe rows

				$key3 = GroupePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = GroupePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = GroupePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					GroupePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (File) to the collection in $obj3 (Groupe)
				$obj3->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Disk rows

				$key4 = DiskPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = DiskPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = DiskPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					DiskPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (File) to the collection in $obj4 (Disk)
				$obj4->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Licence rows

				$key5 = LicencePeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = LicencePeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = LicencePeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					LicencePeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (File) to the collection in $obj5 (Licence)
				$obj5->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageDistribution rows

				$key6 = UsageDistributionPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = UsageDistributionPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = UsageDistributionPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					UsageDistributionPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (File) to the collection in $obj6 (UsageDistribution)
				$obj6->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageConstraint rows

				$key7 = UsageConstraintPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UsageConstraintPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = UsageConstraintPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UsageConstraintPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (File) to the collection in $obj7 (UsageConstraint)
				$obj7->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageUse rows

				$key8 = UsageUsePeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsageUsePeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsageUsePeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsageUsePeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (File) to the collection in $obj8 (UsageUse)
				$obj8->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageCommercial rows

				$key9 = UsageCommercialPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = UsageCommercialPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = UsageCommercialPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					UsageCommercialPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (File) to the collection in $obj9 (UsageCommercial)
				$obj9->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined CreativeCommons rows

				$key10 = CreativeCommonsPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = CreativeCommonsPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = CreativeCommonsPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					CreativeCommonsPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (File) to the collection in $obj10 (CreativeCommons)
				$obj10->addFile($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with all related objects except Disk.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptDisk(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol2 = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);

		UserPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS);

		GroupePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (GroupePeer::NUM_COLUMNS - GroupePeer::NUM_LAZY_LOAD_COLUMNS);

		FolderPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (FolderPeer::NUM_COLUMNS - FolderPeer::NUM_LAZY_LOAD_COLUMNS);

		LicencePeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (LicencePeer::NUM_COLUMNS - LicencePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageDistributionPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (UsageDistributionPeer::NUM_COLUMNS - UsageDistributionPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageConstraintPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (UsageConstraintPeer::NUM_COLUMNS - UsageConstraintPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageUsePeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (UsageUsePeer::NUM_COLUMNS - UsageUsePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageCommercialPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (UsageCommercialPeer::NUM_COLUMNS - UsageCommercialPeer::NUM_LAZY_LOAD_COLUMNS);

		CreativeCommonsPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (CreativeCommonsPeer::NUM_COLUMNS - CreativeCommonsPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined User rows

				$key2 = UserPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = UserPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = UserPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					UserPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (File) to the collection in $obj2 (User)
				$obj2->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Groupe rows

				$key3 = GroupePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = GroupePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = GroupePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					GroupePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (File) to the collection in $obj3 (Groupe)
				$obj3->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Folder rows

				$key4 = FolderPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = FolderPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = FolderPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					FolderPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (File) to the collection in $obj4 (Folder)
				$obj4->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Licence rows

				$key5 = LicencePeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = LicencePeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = LicencePeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					LicencePeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (File) to the collection in $obj5 (Licence)
				$obj5->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageDistribution rows

				$key6 = UsageDistributionPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = UsageDistributionPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = UsageDistributionPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					UsageDistributionPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (File) to the collection in $obj6 (UsageDistribution)
				$obj6->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageConstraint rows

				$key7 = UsageConstraintPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UsageConstraintPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = UsageConstraintPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UsageConstraintPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (File) to the collection in $obj7 (UsageConstraint)
				$obj7->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageUse rows

				$key8 = UsageUsePeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsageUsePeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsageUsePeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsageUsePeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (File) to the collection in $obj8 (UsageUse)
				$obj8->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageCommercial rows

				$key9 = UsageCommercialPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = UsageCommercialPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = UsageCommercialPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					UsageCommercialPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (File) to the collection in $obj9 (UsageCommercial)
				$obj9->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined CreativeCommons rows

				$key10 = CreativeCommonsPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = CreativeCommonsPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = CreativeCommonsPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					CreativeCommonsPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (File) to the collection in $obj10 (CreativeCommons)
				$obj10->addFile($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with all related objects except Licence.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptLicence(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol2 = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);

		UserPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS);

		GroupePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (GroupePeer::NUM_COLUMNS - GroupePeer::NUM_LAZY_LOAD_COLUMNS);

		FolderPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (FolderPeer::NUM_COLUMNS - FolderPeer::NUM_LAZY_LOAD_COLUMNS);

		DiskPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (DiskPeer::NUM_COLUMNS - DiskPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageDistributionPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (UsageDistributionPeer::NUM_COLUMNS - UsageDistributionPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageConstraintPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (UsageConstraintPeer::NUM_COLUMNS - UsageConstraintPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageUsePeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (UsageUsePeer::NUM_COLUMNS - UsageUsePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageCommercialPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (UsageCommercialPeer::NUM_COLUMNS - UsageCommercialPeer::NUM_LAZY_LOAD_COLUMNS);

		CreativeCommonsPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (CreativeCommonsPeer::NUM_COLUMNS - CreativeCommonsPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined User rows

				$key2 = UserPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = UserPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = UserPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					UserPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (File) to the collection in $obj2 (User)
				$obj2->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Groupe rows

				$key3 = GroupePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = GroupePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = GroupePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					GroupePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (File) to the collection in $obj3 (Groupe)
				$obj3->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Folder rows

				$key4 = FolderPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = FolderPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = FolderPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					FolderPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (File) to the collection in $obj4 (Folder)
				$obj4->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Disk rows

				$key5 = DiskPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = DiskPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = DiskPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					DiskPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (File) to the collection in $obj5 (Disk)
				$obj5->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageDistribution rows

				$key6 = UsageDistributionPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = UsageDistributionPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = UsageDistributionPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					UsageDistributionPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (File) to the collection in $obj6 (UsageDistribution)
				$obj6->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageConstraint rows

				$key7 = UsageConstraintPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UsageConstraintPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = UsageConstraintPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UsageConstraintPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (File) to the collection in $obj7 (UsageConstraint)
				$obj7->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageUse rows

				$key8 = UsageUsePeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsageUsePeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsageUsePeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsageUsePeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (File) to the collection in $obj8 (UsageUse)
				$obj8->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageCommercial rows

				$key9 = UsageCommercialPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = UsageCommercialPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = UsageCommercialPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					UsageCommercialPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (File) to the collection in $obj9 (UsageCommercial)
				$obj9->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined CreativeCommons rows

				$key10 = CreativeCommonsPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = CreativeCommonsPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = CreativeCommonsPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					CreativeCommonsPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (File) to the collection in $obj10 (CreativeCommons)
				$obj10->addFile($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with all related objects except UsageDistribution.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptUsageDistribution(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol2 = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);

		UserPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS);

		GroupePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (GroupePeer::NUM_COLUMNS - GroupePeer::NUM_LAZY_LOAD_COLUMNS);

		FolderPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (FolderPeer::NUM_COLUMNS - FolderPeer::NUM_LAZY_LOAD_COLUMNS);

		DiskPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (DiskPeer::NUM_COLUMNS - DiskPeer::NUM_LAZY_LOAD_COLUMNS);

		LicencePeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (LicencePeer::NUM_COLUMNS - LicencePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageConstraintPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (UsageConstraintPeer::NUM_COLUMNS - UsageConstraintPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageUsePeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (UsageUsePeer::NUM_COLUMNS - UsageUsePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageCommercialPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (UsageCommercialPeer::NUM_COLUMNS - UsageCommercialPeer::NUM_LAZY_LOAD_COLUMNS);

		CreativeCommonsPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (CreativeCommonsPeer::NUM_COLUMNS - CreativeCommonsPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined User rows

				$key2 = UserPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = UserPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = UserPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					UserPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (File) to the collection in $obj2 (User)
				$obj2->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Groupe rows

				$key3 = GroupePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = GroupePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = GroupePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					GroupePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (File) to the collection in $obj3 (Groupe)
				$obj3->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Folder rows

				$key4 = FolderPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = FolderPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = FolderPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					FolderPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (File) to the collection in $obj4 (Folder)
				$obj4->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Disk rows

				$key5 = DiskPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = DiskPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = DiskPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					DiskPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (File) to the collection in $obj5 (Disk)
				$obj5->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Licence rows

				$key6 = LicencePeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = LicencePeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = LicencePeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					LicencePeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (File) to the collection in $obj6 (Licence)
				$obj6->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageConstraint rows

				$key7 = UsageConstraintPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UsageConstraintPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = UsageConstraintPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UsageConstraintPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (File) to the collection in $obj7 (UsageConstraint)
				$obj7->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageUse rows

				$key8 = UsageUsePeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsageUsePeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsageUsePeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsageUsePeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (File) to the collection in $obj8 (UsageUse)
				$obj8->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageCommercial rows

				$key9 = UsageCommercialPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = UsageCommercialPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = UsageCommercialPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					UsageCommercialPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (File) to the collection in $obj9 (UsageCommercial)
				$obj9->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined CreativeCommons rows

				$key10 = CreativeCommonsPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = CreativeCommonsPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = CreativeCommonsPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					CreativeCommonsPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (File) to the collection in $obj10 (CreativeCommons)
				$obj10->addFile($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with all related objects except UsageConstraint.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptUsageConstraint(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol2 = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);

		UserPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS);

		GroupePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (GroupePeer::NUM_COLUMNS - GroupePeer::NUM_LAZY_LOAD_COLUMNS);

		FolderPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (FolderPeer::NUM_COLUMNS - FolderPeer::NUM_LAZY_LOAD_COLUMNS);

		DiskPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (DiskPeer::NUM_COLUMNS - DiskPeer::NUM_LAZY_LOAD_COLUMNS);

		LicencePeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (LicencePeer::NUM_COLUMNS - LicencePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageDistributionPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (UsageDistributionPeer::NUM_COLUMNS - UsageDistributionPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageUsePeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (UsageUsePeer::NUM_COLUMNS - UsageUsePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageCommercialPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (UsageCommercialPeer::NUM_COLUMNS - UsageCommercialPeer::NUM_LAZY_LOAD_COLUMNS);

		CreativeCommonsPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (CreativeCommonsPeer::NUM_COLUMNS - CreativeCommonsPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined User rows

				$key2 = UserPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = UserPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = UserPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					UserPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (File) to the collection in $obj2 (User)
				$obj2->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Groupe rows

				$key3 = GroupePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = GroupePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = GroupePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					GroupePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (File) to the collection in $obj3 (Groupe)
				$obj3->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Folder rows

				$key4 = FolderPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = FolderPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = FolderPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					FolderPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (File) to the collection in $obj4 (Folder)
				$obj4->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Disk rows

				$key5 = DiskPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = DiskPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = DiskPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					DiskPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (File) to the collection in $obj5 (Disk)
				$obj5->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Licence rows

				$key6 = LicencePeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = LicencePeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = LicencePeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					LicencePeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (File) to the collection in $obj6 (Licence)
				$obj6->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageDistribution rows

				$key7 = UsageDistributionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UsageDistributionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = UsageDistributionPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UsageDistributionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (File) to the collection in $obj7 (UsageDistribution)
				$obj7->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageUse rows

				$key8 = UsageUsePeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsageUsePeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsageUsePeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsageUsePeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (File) to the collection in $obj8 (UsageUse)
				$obj8->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageCommercial rows

				$key9 = UsageCommercialPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = UsageCommercialPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = UsageCommercialPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					UsageCommercialPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (File) to the collection in $obj9 (UsageCommercial)
				$obj9->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined CreativeCommons rows

				$key10 = CreativeCommonsPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = CreativeCommonsPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = CreativeCommonsPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					CreativeCommonsPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (File) to the collection in $obj10 (CreativeCommons)
				$obj10->addFile($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with all related objects except UsageUse.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptUsageUse(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol2 = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);

		UserPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS);

		GroupePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (GroupePeer::NUM_COLUMNS - GroupePeer::NUM_LAZY_LOAD_COLUMNS);

		FolderPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (FolderPeer::NUM_COLUMNS - FolderPeer::NUM_LAZY_LOAD_COLUMNS);

		DiskPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (DiskPeer::NUM_COLUMNS - DiskPeer::NUM_LAZY_LOAD_COLUMNS);

		LicencePeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (LicencePeer::NUM_COLUMNS - LicencePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageDistributionPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (UsageDistributionPeer::NUM_COLUMNS - UsageDistributionPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageConstraintPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (UsageConstraintPeer::NUM_COLUMNS - UsageConstraintPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageCommercialPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (UsageCommercialPeer::NUM_COLUMNS - UsageCommercialPeer::NUM_LAZY_LOAD_COLUMNS);

		CreativeCommonsPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (CreativeCommonsPeer::NUM_COLUMNS - CreativeCommonsPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined User rows

				$key2 = UserPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = UserPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = UserPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					UserPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (File) to the collection in $obj2 (User)
				$obj2->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Groupe rows

				$key3 = GroupePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = GroupePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = GroupePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					GroupePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (File) to the collection in $obj3 (Groupe)
				$obj3->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Folder rows

				$key4 = FolderPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = FolderPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = FolderPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					FolderPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (File) to the collection in $obj4 (Folder)
				$obj4->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Disk rows

				$key5 = DiskPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = DiskPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = DiskPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					DiskPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (File) to the collection in $obj5 (Disk)
				$obj5->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Licence rows

				$key6 = LicencePeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = LicencePeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = LicencePeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					LicencePeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (File) to the collection in $obj6 (Licence)
				$obj6->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageDistribution rows

				$key7 = UsageDistributionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UsageDistributionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = UsageDistributionPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UsageDistributionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (File) to the collection in $obj7 (UsageDistribution)
				$obj7->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageConstraint rows

				$key8 = UsageConstraintPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsageConstraintPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsageConstraintPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsageConstraintPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (File) to the collection in $obj8 (UsageConstraint)
				$obj8->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageCommercial rows

				$key9 = UsageCommercialPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = UsageCommercialPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = UsageCommercialPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					UsageCommercialPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (File) to the collection in $obj9 (UsageCommercial)
				$obj9->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined CreativeCommons rows

				$key10 = CreativeCommonsPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = CreativeCommonsPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = CreativeCommonsPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					CreativeCommonsPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (File) to the collection in $obj10 (CreativeCommons)
				$obj10->addFile($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with all related objects except UsageCommercial.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptUsageCommercial(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol2 = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);

		UserPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS);

		GroupePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (GroupePeer::NUM_COLUMNS - GroupePeer::NUM_LAZY_LOAD_COLUMNS);

		FolderPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (FolderPeer::NUM_COLUMNS - FolderPeer::NUM_LAZY_LOAD_COLUMNS);

		DiskPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (DiskPeer::NUM_COLUMNS - DiskPeer::NUM_LAZY_LOAD_COLUMNS);

		LicencePeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (LicencePeer::NUM_COLUMNS - LicencePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageDistributionPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (UsageDistributionPeer::NUM_COLUMNS - UsageDistributionPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageConstraintPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (UsageConstraintPeer::NUM_COLUMNS - UsageConstraintPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageUsePeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (UsageUsePeer::NUM_COLUMNS - UsageUsePeer::NUM_LAZY_LOAD_COLUMNS);

		CreativeCommonsPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (CreativeCommonsPeer::NUM_COLUMNS - CreativeCommonsPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::CREATIVE_COMMONS_ID, CreativeCommonsPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined User rows

				$key2 = UserPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = UserPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = UserPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					UserPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (File) to the collection in $obj2 (User)
				$obj2->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Groupe rows

				$key3 = GroupePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = GroupePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = GroupePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					GroupePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (File) to the collection in $obj3 (Groupe)
				$obj3->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Folder rows

				$key4 = FolderPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = FolderPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = FolderPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					FolderPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (File) to the collection in $obj4 (Folder)
				$obj4->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Disk rows

				$key5 = DiskPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = DiskPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = DiskPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					DiskPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (File) to the collection in $obj5 (Disk)
				$obj5->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Licence rows

				$key6 = LicencePeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = LicencePeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = LicencePeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					LicencePeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (File) to the collection in $obj6 (Licence)
				$obj6->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageDistribution rows

				$key7 = UsageDistributionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UsageDistributionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = UsageDistributionPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UsageDistributionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (File) to the collection in $obj7 (UsageDistribution)
				$obj7->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageConstraint rows

				$key8 = UsageConstraintPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsageConstraintPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsageConstraintPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsageConstraintPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (File) to the collection in $obj8 (UsageConstraint)
				$obj8->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageUse rows

				$key9 = UsageUsePeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = UsageUsePeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = UsageUsePeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					UsageUsePeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (File) to the collection in $obj9 (UsageUse)
				$obj9->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined CreativeCommons rows

				$key10 = CreativeCommonsPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = CreativeCommonsPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = CreativeCommonsPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					CreativeCommonsPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (File) to the collection in $obj10 (CreativeCommons)
				$obj10->addFile($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of File objects pre-filled with all related objects except CreativeCommons.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of File objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptCreativeCommons(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		FilePeer::addSelectColumns($criteria);
		$startcol2 = (FilePeer::NUM_COLUMNS - FilePeer::NUM_LAZY_LOAD_COLUMNS);

		UserPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS);

		GroupePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (GroupePeer::NUM_COLUMNS - GroupePeer::NUM_LAZY_LOAD_COLUMNS);

		FolderPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (FolderPeer::NUM_COLUMNS - FolderPeer::NUM_LAZY_LOAD_COLUMNS);

		DiskPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (DiskPeer::NUM_COLUMNS - DiskPeer::NUM_LAZY_LOAD_COLUMNS);

		LicencePeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (LicencePeer::NUM_COLUMNS - LicencePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageDistributionPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (UsageDistributionPeer::NUM_COLUMNS - UsageDistributionPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageConstraintPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (UsageConstraintPeer::NUM_COLUMNS - UsageConstraintPeer::NUM_LAZY_LOAD_COLUMNS);

		UsageUsePeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (UsageUsePeer::NUM_COLUMNS - UsageUsePeer::NUM_LAZY_LOAD_COLUMNS);

		UsageCommercialPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (UsageCommercialPeer::NUM_COLUMNS - UsageCommercialPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(FilePeer::USER_ID, UserPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::GROUPE_ID, GroupePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::FOLDER_ID, FolderPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::DISK_ID, DiskPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::LICENCE_ID, LicencePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_DISTRIBUTION_ID, UsageDistributionPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_CONSTRAINT_ID, UsageConstraintPeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_USE_ID, UsageUsePeer::ID, $join_behavior);

		$criteria->addJoin(FilePeer::USAGE_COMMERCIAL_ID, UsageCommercialPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseFilePeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = FilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = FilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = FilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				FilePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined User rows

				$key2 = UserPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = UserPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = UserPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					UserPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (File) to the collection in $obj2 (User)
				$obj2->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Groupe rows

				$key3 = GroupePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = GroupePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = GroupePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					GroupePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (File) to the collection in $obj3 (Groupe)
				$obj3->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Folder rows

				$key4 = FolderPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = FolderPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = FolderPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					FolderPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (File) to the collection in $obj4 (Folder)
				$obj4->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Disk rows

				$key5 = DiskPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = DiskPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = DiskPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					DiskPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (File) to the collection in $obj5 (Disk)
				$obj5->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined Licence rows

				$key6 = LicencePeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = LicencePeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = LicencePeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					LicencePeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (File) to the collection in $obj6 (Licence)
				$obj6->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageDistribution rows

				$key7 = UsageDistributionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = UsageDistributionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = UsageDistributionPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					UsageDistributionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (File) to the collection in $obj7 (UsageDistribution)
				$obj7->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageConstraint rows

				$key8 = UsageConstraintPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsageConstraintPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsageConstraintPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsageConstraintPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (File) to the collection in $obj8 (UsageConstraint)
				$obj8->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageUse rows

				$key9 = UsageUsePeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = UsageUsePeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = UsageUsePeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					UsageUsePeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (File) to the collection in $obj9 (UsageUse)
				$obj9->addFile($obj1);

			} // if joined row is not null

				// Add objects for joined UsageCommercial rows

				$key10 = UsageCommercialPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = UsageCommercialPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = UsageCommercialPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					UsageCommercialPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (File) to the collection in $obj10 (UsageCommercial)
				$obj10->addFile($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * Add a TableMap instance to the database for this peer class.
	 */
	public static function buildTableMap()
	{
	  $dbMap = Propel::getDatabaseMap(BaseFilePeer::DATABASE_NAME);
	  if (!$dbMap->hasTable(BaseFilePeer::TABLE_NAME))
	  {
	    $dbMap->addTableObject(new FileTableMap());
	  }
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * If $withPrefix is true, the returned path
	 * uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @param      boolean  Whether or not to return the path wit hthe class name 
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass($withPrefix = true)
	{
		return $withPrefix ? FilePeer::CLASS_DEFAULT : FilePeer::OM_CLASS;
	}

	/**
	 * Method perform an INSERT on the database, given a File or Criteria object.
	 *
	 * @param      mixed $values Criteria or File object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseFilePeer:doInsert:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseFilePeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from File object
		}

		if ($criteria->containsKey(FilePeer::ID) && $criteria->keyContainsValue(FilePeer::ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.FilePeer::ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseFilePeer:doInsert:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseFilePeer', $values, $con, $pk);
    }

		return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a File or Criteria object.
	 *
	 * @param      mixed $values Criteria or File object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseFilePeer:doUpdate:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseFilePeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(FilePeer::ID);
			$selectCriteria->add(FilePeer::ID, $criteria->remove(FilePeer::ID), $comparison);

		} else { // $values is File object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseFilePeer:doUpdate:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseFilePeer', $values, $con, $ret);
    }

    return $ret;
	}

	/**
	 * Method to DELETE all rows from the file table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += FilePeer::doOnDeleteCascade(new Criteria(FilePeer::DATABASE_NAME), $con);
			$affectedRows += BasePeer::doDeleteAll(FilePeer::TABLE_NAME, $con);
			// Because this db requires some delete cascade/set null emulation, we have to
			// clear the cached instance *after* the emulation has happened (since
			// instances get re-added by the select statement contained therein).
			FilePeer::clearInstancePool();
			FilePeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a File or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or File object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof File) { // it's a model object
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else { // it's a primary key, or an array of pks
			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(FilePeer::ID, (array) $values, Criteria::IN);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += FilePeer::doOnDeleteCascade($criteria, $con);
			
			// Because this db requires some delete cascade/set null emulation, we have to
			// clear the cached instance *after* the emulation has happened (since
			// instances get re-added by the select statement contained therein).
			if ($values instanceof Criteria) {
				FilePeer::clearInstancePool();
			} elseif ($values instanceof File) { // it's a model object
				FilePeer::removeInstanceFromPool($values);
			} else { // it's a primary key, or an array of pks
				foreach ((array) $values as $singleval) {
					FilePeer::removeInstanceFromPool($singleval);
				}
			}
			
			$affectedRows += BasePeer::doDelete($criteria, $con);
			FilePeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * This is a method for emulating ON DELETE CASCADE for DBs that don't support this
	 * feature (like MySQL or SQLite).
	 *
	 * This method is not very speedy because it must perform a query first to get
	 * the implicated records and then perform the deletes by calling those Peer classes.
	 *
	 * This method should be used within a transaction if possible.
	 *
	 * @param      Criteria $criteria
	 * @param      PropelPDO $con
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	protected static function doOnDeleteCascade(Criteria $criteria, PropelPDO $con)
	{
		// initialize var to track total num of affected rows
		$affectedRows = 0;

		// first find the objects that are implicated by the $criteria
		$objects = FilePeer::doSelect($criteria, $con);
		foreach ($objects as $obj) {


			// delete related Comment objects
			$criteria = new Criteria(CommentPeer::DATABASE_NAME);
			
			$criteria->add(CommentPeer::FILE_ID, $obj->getId());
			$affectedRows += CommentPeer::doDelete($criteria, $con);

			// delete related FileTmp objects
			$criteria = new Criteria(FileTmpPeer::DATABASE_NAME);
			
			$criteria->add(FileTmpPeer::FILE_ID, $obj->getId());
			$affectedRows += FileTmpPeer::doDelete($criteria, $con);

			// delete related Rating objects
			$criteria = new Criteria(RatingPeer::DATABASE_NAME);
			
			$criteria->add(RatingPeer::FILE_ID, $obj->getId());
			$affectedRows += RatingPeer::doDelete($criteria, $con);

			// delete related Exif objects
			$criteria = new Criteria(ExifPeer::DATABASE_NAME);
			
			$criteria->add(ExifPeer::FILE_ID, $obj->getId());
			$affectedRows += ExifPeer::doDelete($criteria, $con);

			// delete related Iptc objects
			$criteria = new Criteria(IptcPeer::DATABASE_NAME);
			
			$criteria->add(IptcPeer::FILE_ID, $obj->getId());
			$affectedRows += IptcPeer::doDelete($criteria, $con);

			// delete related BasketHasContent objects
			$criteria = new Criteria(BasketHasContentPeer::DATABASE_NAME);
			
			$criteria->add(BasketHasContentPeer::FILE_ID, $obj->getId());
			$affectedRows += BasketHasContentPeer::doDelete($criteria, $con);

			// delete related FileWaiting objects
			$criteria = new Criteria(FileWaitingPeer::DATABASE_NAME);
			
			$criteria->add(FileWaitingPeer::FILE_ID, $obj->getId());
			$affectedRows += FileWaitingPeer::doDelete($criteria, $con);

			// delete related FileRelated objects
			$criteria = new Criteria(FileRelatedPeer::DATABASE_NAME);
			
			$criteria->add(FileRelatedPeer::FILE_ID_TO, $obj->getId());
			$affectedRows += FileRelatedPeer::doDelete($criteria, $con);

			// delete related FileRelated objects
			$criteria = new Criteria(FileRelatedPeer::DATABASE_NAME);
			
			$criteria->add(FileRelatedPeer::FILE_ID_FROM, $obj->getId());
			$affectedRows += FileRelatedPeer::doDelete($criteria, $con);
		}
		return $affectedRows;
	}

	/**
	 * Validates all modified columns of given File object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      File $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(File $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(FilePeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(FilePeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		return BasePeer::doValidate(FilePeer::DATABASE_NAME, FilePeer::TABLE_NAME, $columns);
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     File
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = FilePeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(FilePeer::DATABASE_NAME);
		$criteria->add(FilePeer::ID, $pk);

		$v = FilePeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(FilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(FilePeer::DATABASE_NAME);
			$criteria->add(FilePeer::ID, $pks, Criteria::IN);
			$objs = FilePeer::doSelect($criteria, $con);
		}
		return $objs;
	}

	// symfony behavior
	
	/**
	 * Returns an array of arrays that contain columns in each unique index.
	 *
	 * @return array
	 */
	static public function getUniqueColumnNames()
	{
	  return array();
	}

	// symfony_behaviors behavior
	
	/**
	 * Returns the name of the hook to call from inside the supplied method.
	 *
	 * @param string $method The calling method
	 *
	 * @return string A hook name for {@link sfMixer}
	 *
	 * @throws LogicException If the method name is not recognized
	 */
	static private function getMixerPreSelectHook($method)
	{
	  if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
	  {
	    return sprintf('BaseFilePeer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
	  }
	
	  throw new LogicException(sprintf('Unrecognized function "%s"', $method));
	}

} // BaseFilePeer

// This is the static code needed to register the TableMap for this table with the main Propel class.
//
BaseFilePeer::buildTableMap();

