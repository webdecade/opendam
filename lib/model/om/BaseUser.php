<?php

/**
 * Base class that represents a row from the 'user' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Oct 31 14:46:52 2013
 *
 * @package    lib.model.om
 */
abstract class BaseUser extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UserPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the username field.
	 * @var        string
	 */
	protected $username;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the firstname field.
	 * @var        string
	 */
	protected $firstname;

	/**
	 * The value for the lastname field.
	 * @var        string
	 */
	protected $lastname;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the position field.
	 * @var        string
	 */
	protected $position;

	/**
	 * The value for the phone field.
	 * @var        string
	 */
	protected $phone;

	/**
	 * The value for the role_id field.
	 * @var        int
	 */
	protected $role_id;

	/**
	 * The value for the last_login_at field.
	 * @var        string
	 */
	protected $last_login_at;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the hash field.
	 * @var        string
	 */
	protected $hash;

	/**
	 * The value for the country_id field.
	 * @var        int
	 */
	protected $country_id;

	/**
	 * The value for the culture field.
	 * @var        string
	 */
	protected $culture;

	/**
	 * The value for the customer_id field.
	 * @var        int
	 */
	protected $customer_id;

	/**
	 * The value for the state field.
	 * @var        int
	 */
	protected $state;

	/**
	 * The value for the view_mode field.
	 * @var        string
	 */
	protected $view_mode;

	/**
	 * The value for the comment field.
	 * @var        string
	 */
	protected $comment;

	/**
	 * @var        Role
	 */
	protected $aRole;

	/**
	 * @var        Country
	 */
	protected $aCountry;

	/**
	 * @var        Customer
	 */
	protected $aCustomer;

	/**
	 * @var        array Comment[] Collection to store aggregation of Comment objects.
	 */
	protected $collComments;

	/**
	 * @var        Criteria The criteria used to select the current contents of collComments.
	 */
	private $lastCommentCriteria = null;

	/**
	 * @var        array Favorites[] Collection to store aggregation of Favorites objects.
	 */
	protected $collFavoritess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFavoritess.
	 */
	private $lastFavoritesCriteria = null;

	/**
	 * @var        array File[] Collection to store aggregation of File objects.
	 */
	protected $collFiles;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFiles.
	 */
	private $lastFileCriteria = null;

	/**
	 * @var        array FileTmp[] Collection to store aggregation of FileTmp objects.
	 */
	protected $collFileTmps;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFileTmps.
	 */
	private $lastFileTmpCriteria = null;

	/**
	 * @var        array Folder[] Collection to store aggregation of Folder objects.
	 */
	protected $collFolders;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFolders.
	 */
	private $lastFolderCriteria = null;

	/**
	 * @var        array Groupe[] Collection to store aggregation of Groupe objects.
	 */
	protected $collGroupes;

	/**
	 * @var        Criteria The criteria used to select the current contents of collGroupes.
	 */
	private $lastGroupeCriteria = null;

	/**
	 * @var        array Log[] Collection to store aggregation of Log objects.
	 */
	protected $collLogs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLogs.
	 */
	private $lastLogCriteria = null;

	/**
	 * @var        array Request[] Collection to store aggregation of Request objects.
	 */
	protected $collRequests;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRequests.
	 */
	private $lastRequestCriteria = null;

	/**
	 * @var        array UserFolder[] Collection to store aggregation of UserFolder objects.
	 */
	protected $collUserFolders;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserFolders.
	 */
	private $lastUserFolderCriteria = null;

	/**
	 * @var        array UserGroup[] Collection to store aggregation of UserGroup objects.
	 */
	protected $collUserGroups;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserGroups.
	 */
	private $lastUserGroupCriteria = null;

	/**
	 * @var        array UserUnit[] Collection to store aggregation of UserUnit objects.
	 */
	protected $collUserUnits;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserUnits.
	 */
	private $lastUserUnitCriteria = null;

	/**
	 * @var        array UniqueKey[] Collection to store aggregation of UniqueKey objects.
	 */
	protected $collUniqueKeys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUniqueKeys.
	 */
	private $lastUniqueKeyCriteria = null;

	/**
	 * @var        array UserPreference[] Collection to store aggregation of UserPreference objects.
	 */
	protected $collUserPreferences;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserPreferences.
	 */
	private $lastUserPreferenceCriteria = null;

	/**
	 * @var        array Basket[] Collection to store aggregation of Basket objects.
	 */
	protected $collBaskets;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBaskets.
	 */
	private $lastBasketCriteria = null;

	/**
	 * @var        array FileWaiting[] Collection to store aggregation of FileWaiting objects.
	 */
	protected $collFileWaitings;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFileWaitings.
	 */
	private $lastFileWaitingCriteria = null;

	/**
	 * @var        array FileRelated[] Collection to store aggregation of FileRelated objects.
	 */
	protected $collFileRelateds;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFileRelateds.
	 */
	private $lastFileRelatedCriteria = null;

	/**
	 * @var        array LogUser[] Collection to store aggregation of LogUser objects.
	 */
	protected $collLogUsers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLogUsers.
	 */
	private $lastLogUserCriteria = null;

	/**
	 * @var        array PermalinkNotification[] Collection to store aggregation of PermalinkNotification objects.
	 */
	protected $collPermalinkNotificationsRelatedByUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPermalinkNotificationsRelatedByUserId.
	 */
	private $lastPermalinkNotificationRelatedByUserIdCriteria = null;

	/**
	 * @var        array PermalinkNotification[] Collection to store aggregation of PermalinkNotification objects.
	 */
	protected $collPermalinkNotificationsRelatedByPermalinkId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPermalinkNotificationsRelatedByPermalinkId.
	 */
	private $lastPermalinkNotificationRelatedByPermalinkIdCriteria = null;

	/**
	 * @var        array UserHasModule[] Collection to store aggregation of UserHasModule objects.
	 */
	protected $collUserHasModules;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserHasModules.
	 */
	private $lastUserHasModuleCriteria = null;

	/**
	 * @var        array BasketRequest[] Collection to store aggregation of BasketRequest objects.
	 */
	protected $collBasketRequests;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBasketRequests.
	 */
	private $lastBasketRequestCriteria = null;

	/**
	 * @var        array ResetPasswordRequest[] Collection to store aggregation of ResetPasswordRequest objects.
	 */
	protected $collResetPasswordRequests;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResetPasswordRequests.
	 */
	private $lastResetPasswordRequestCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'UserPeer';

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [username] column value.
	 * 
	 * @return     string
	 */
	public function getUsername()
	{
		return $this->username;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [firstname] column value.
	 * 
	 * @return     string
	 */
	public function getFirstname()
	{
		return $this->firstname;
	}

	/**
	 * Get the [lastname] column value.
	 * 
	 * @return     string
	 */
	public function getLastname()
	{
		return $this->lastname;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [position] column value.
	 * 
	 * @return     string
	 */
	public function getPosition()
	{
		return $this->position;
	}

	/**
	 * Get the [phone] column value.
	 * 
	 * @return     string
	 */
	public function getPhone()
	{
		return $this->phone;
	}

	/**
	 * Get the [role_id] column value.
	 * 
	 * @return     int
	 */
	public function getRoleId()
	{
		return $this->role_id;
	}

	/**
	 * Get the [optionally formatted] temporal [last_login_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getLastLoginAt($format = 'Y-m-d H:i:s')
	{
		if ($this->last_login_at === null) {
			return null;
		}


		if ($this->last_login_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->last_login_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->last_login_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [hash] column value.
	 * 
	 * @return     string
	 */
	public function getHash()
	{
		return $this->hash;
	}

	/**
	 * Get the [country_id] column value.
	 * 
	 * @return     int
	 */
	public function getCountryId()
	{
		return $this->country_id;
	}

	/**
	 * Get the [culture] column value.
	 * 
	 * @return     string
	 */
	public function getCulture()
	{
		return $this->culture;
	}

	/**
	 * Get the [customer_id] column value.
	 * 
	 * @return     int
	 */
	public function getCustomerId()
	{
		return $this->customer_id;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     int
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [view_mode] column value.
	 * 
	 * @return     string
	 */
	public function getViewMode()
	{
		return $this->view_mode;
	}

	/**
	 * Get the [comment] column value.
	 * 
	 * @return     string
	 */
	public function getComment()
	{
		return $this->comment;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = UserPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [username] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setUsername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->username !== $v) {
			$this->username = $v;
			$this->modifiedColumns[] = UserPeer::USERNAME;
		}

		return $this;
	} // setUsername()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = UserPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Set the value of [firstname] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setFirstname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->firstname !== $v) {
			$this->firstname = $v;
			$this->modifiedColumns[] = UserPeer::FIRSTNAME;
		}

		return $this;
	} // setFirstname()

	/**
	 * Set the value of [lastname] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setLastname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lastname !== $v) {
			$this->lastname = $v;
			$this->modifiedColumns[] = UserPeer::LASTNAME;
		}

		return $this;
	} // setLastname()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = UserPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [position] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setPosition($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->position !== $v) {
			$this->position = $v;
			$this->modifiedColumns[] = UserPeer::POSITION;
		}

		return $this;
	} // setPosition()

	/**
	 * Set the value of [phone] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->phone !== $v) {
			$this->phone = $v;
			$this->modifiedColumns[] = UserPeer::PHONE;
		}

		return $this;
	} // setPhone()

	/**
	 * Set the value of [role_id] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setRoleId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->role_id !== $v) {
			$this->role_id = $v;
			$this->modifiedColumns[] = UserPeer::ROLE_ID;
		}

		if ($this->aRole !== null && $this->aRole->getId() !== $v) {
			$this->aRole = null;
		}

		return $this;
	} // setRoleId()

	/**
	 * Sets the value of [last_login_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     User The current object (for fluent API support)
	 */
	public function setLastLoginAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->last_login_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->last_login_at !== null && $tmpDt = new DateTime($this->last_login_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->last_login_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UserPeer::LAST_LOGIN_AT;
			}
		} // if either are not null

		return $this;
	} // setLastLoginAt()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     User The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UserPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Set the value of [hash] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setHash($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->hash !== $v) {
			$this->hash = $v;
			$this->modifiedColumns[] = UserPeer::HASH;
		}

		return $this;
	} // setHash()

	/**
	 * Set the value of [country_id] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setCountryId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->country_id !== $v) {
			$this->country_id = $v;
			$this->modifiedColumns[] = UserPeer::COUNTRY_ID;
		}

		if ($this->aCountry !== null && $this->aCountry->getId() !== $v) {
			$this->aCountry = null;
		}

		return $this;
	} // setCountryId()

	/**
	 * Set the value of [culture] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setCulture($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->culture !== $v) {
			$this->culture = $v;
			$this->modifiedColumns[] = UserPeer::CULTURE;
		}

		return $this;
	} // setCulture()

	/**
	 * Set the value of [customer_id] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setCustomerId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->customer_id !== $v) {
			$this->customer_id = $v;
			$this->modifiedColumns[] = UserPeer::CUSTOMER_ID;
		}

		if ($this->aCustomer !== null && $this->aCustomer->getId() !== $v) {
			$this->aCustomer = null;
		}

		return $this;
	} // setCustomerId()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = UserPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [view_mode] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setViewMode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->view_mode !== $v) {
			$this->view_mode = $v;
			$this->modifiedColumns[] = UserPeer::VIEW_MODE;
		}

		return $this;
	} // setViewMode()

	/**
	 * Set the value of [comment] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comment !== $v) {
			$this->comment = $v;
			$this->modifiedColumns[] = UserPeer::COMMENT;
		}

		return $this;
	} // setComment()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->username = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->password = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->firstname = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->lastname = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->email = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->position = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->phone = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->role_id = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->last_login_at = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->created_at = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->hash = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->country_id = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->culture = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->customer_id = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->state = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->view_mode = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->comment = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 18; // 18 = UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating User object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aRole !== null && $this->role_id !== $this->aRole->getId()) {
			$this->aRole = null;
		}
		if ($this->aCountry !== null && $this->country_id !== $this->aCountry->getId()) {
			$this->aCountry = null;
		}
		if ($this->aCustomer !== null && $this->customer_id !== $this->aCustomer->getId()) {
			$this->aCustomer = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UserPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aRole = null;
			$this->aCountry = null;
			$this->aCustomer = null;
			$this->collComments = null;
			$this->lastCommentCriteria = null;

			$this->collFavoritess = null;
			$this->lastFavoritesCriteria = null;

			$this->collFiles = null;
			$this->lastFileCriteria = null;

			$this->collFileTmps = null;
			$this->lastFileTmpCriteria = null;

			$this->collFolders = null;
			$this->lastFolderCriteria = null;

			$this->collGroupes = null;
			$this->lastGroupeCriteria = null;

			$this->collLogs = null;
			$this->lastLogCriteria = null;

			$this->collRequests = null;
			$this->lastRequestCriteria = null;

			$this->collUserFolders = null;
			$this->lastUserFolderCriteria = null;

			$this->collUserGroups = null;
			$this->lastUserGroupCriteria = null;

			$this->collUserUnits = null;
			$this->lastUserUnitCriteria = null;

			$this->collUniqueKeys = null;
			$this->lastUniqueKeyCriteria = null;

			$this->collUserPreferences = null;
			$this->lastUserPreferenceCriteria = null;

			$this->collBaskets = null;
			$this->lastBasketCriteria = null;

			$this->collFileWaitings = null;
			$this->lastFileWaitingCriteria = null;

			$this->collFileRelateds = null;
			$this->lastFileRelatedCriteria = null;

			$this->collLogUsers = null;
			$this->lastLogUserCriteria = null;

			$this->collPermalinkNotificationsRelatedByUserId = null;
			$this->lastPermalinkNotificationRelatedByUserIdCriteria = null;

			$this->collPermalinkNotificationsRelatedByPermalinkId = null;
			$this->lastPermalinkNotificationRelatedByPermalinkIdCriteria = null;

			$this->collUserHasModules = null;
			$this->lastUserHasModuleCriteria = null;

			$this->collBasketRequests = null;
			$this->lastBasketRequestCriteria = null;

			$this->collResetPasswordRequests = null;
			$this->lastResetPasswordRequestCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUser:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				UserPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUser:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUser:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			
			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(UserPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUser:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				UserPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aRole !== null) {
				if ($this->aRole->isModified() || $this->aRole->isNew()) {
					$affectedRows += $this->aRole->save($con);
				}
				$this->setRole($this->aRole);
			}

			if ($this->aCountry !== null) {
				if ($this->aCountry->isModified() || $this->aCountry->isNew()) {
					$affectedRows += $this->aCountry->save($con);
				}
				$this->setCountry($this->aCountry);
			}

			if ($this->aCustomer !== null) {
				if ($this->aCustomer->isModified() || $this->aCustomer->isNew()) {
					$affectedRows += $this->aCustomer->save($con);
				}
				$this->setCustomer($this->aCustomer);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = UserPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UserPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UserPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collComments !== null) {
				foreach ($this->collComments as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFavoritess !== null) {
				foreach ($this->collFavoritess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFiles !== null) {
				foreach ($this->collFiles as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFileTmps !== null) {
				foreach ($this->collFileTmps as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFolders !== null) {
				foreach ($this->collFolders as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collGroupes !== null) {
				foreach ($this->collGroupes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLogs !== null) {
				foreach ($this->collLogs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRequests !== null) {
				foreach ($this->collRequests as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUserFolders !== null) {
				foreach ($this->collUserFolders as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUserGroups !== null) {
				foreach ($this->collUserGroups as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUserUnits !== null) {
				foreach ($this->collUserUnits as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUniqueKeys !== null) {
				foreach ($this->collUniqueKeys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUserPreferences !== null) {
				foreach ($this->collUserPreferences as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collBaskets !== null) {
				foreach ($this->collBaskets as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFileWaitings !== null) {
				foreach ($this->collFileWaitings as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFileRelateds !== null) {
				foreach ($this->collFileRelateds as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLogUsers !== null) {
				foreach ($this->collLogUsers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPermalinkNotificationsRelatedByUserId !== null) {
				foreach ($this->collPermalinkNotificationsRelatedByUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPermalinkNotificationsRelatedByPermalinkId !== null) {
				foreach ($this->collPermalinkNotificationsRelatedByPermalinkId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUserHasModules !== null) {
				foreach ($this->collUserHasModules as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collBasketRequests !== null) {
				foreach ($this->collBasketRequests as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResetPasswordRequests !== null) {
				foreach ($this->collResetPasswordRequests as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aRole !== null) {
				if (!$this->aRole->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aRole->getValidationFailures());
				}
			}

			if ($this->aCountry !== null) {
				if (!$this->aCountry->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCountry->getValidationFailures());
				}
			}

			if ($this->aCustomer !== null) {
				if (!$this->aCustomer->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCustomer->getValidationFailures());
				}
			}


			if (($retval = UserPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collComments !== null) {
					foreach ($this->collComments as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFavoritess !== null) {
					foreach ($this->collFavoritess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFiles !== null) {
					foreach ($this->collFiles as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFileTmps !== null) {
					foreach ($this->collFileTmps as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFolders !== null) {
					foreach ($this->collFolders as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collGroupes !== null) {
					foreach ($this->collGroupes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLogs !== null) {
					foreach ($this->collLogs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRequests !== null) {
					foreach ($this->collRequests as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUserFolders !== null) {
					foreach ($this->collUserFolders as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUserGroups !== null) {
					foreach ($this->collUserGroups as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUserUnits !== null) {
					foreach ($this->collUserUnits as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUniqueKeys !== null) {
					foreach ($this->collUniqueKeys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUserPreferences !== null) {
					foreach ($this->collUserPreferences as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collBaskets !== null) {
					foreach ($this->collBaskets as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFileWaitings !== null) {
					foreach ($this->collFileWaitings as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFileRelateds !== null) {
					foreach ($this->collFileRelateds as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLogUsers !== null) {
					foreach ($this->collLogUsers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPermalinkNotificationsRelatedByUserId !== null) {
					foreach ($this->collPermalinkNotificationsRelatedByUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPermalinkNotificationsRelatedByPermalinkId !== null) {
					foreach ($this->collPermalinkNotificationsRelatedByPermalinkId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUserHasModules !== null) {
					foreach ($this->collUserHasModules as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collBasketRequests !== null) {
					foreach ($this->collBasketRequests as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResetPasswordRequests !== null) {
					foreach ($this->collResetPasswordRequests as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getUsername();
				break;
			case 2:
				return $this->getPassword();
				break;
			case 3:
				return $this->getFirstname();
				break;
			case 4:
				return $this->getLastname();
				break;
			case 5:
				return $this->getEmail();
				break;
			case 6:
				return $this->getPosition();
				break;
			case 7:
				return $this->getPhone();
				break;
			case 8:
				return $this->getRoleId();
				break;
			case 9:
				return $this->getLastLoginAt();
				break;
			case 10:
				return $this->getCreatedAt();
				break;
			case 11:
				return $this->getHash();
				break;
			case 12:
				return $this->getCountryId();
				break;
			case 13:
				return $this->getCulture();
				break;
			case 14:
				return $this->getCustomerId();
				break;
			case 15:
				return $this->getState();
				break;
			case 16:
				return $this->getViewMode();
				break;
			case 17:
				return $this->getComment();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = UserPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getUsername(),
			$keys[2] => $this->getPassword(),
			$keys[3] => $this->getFirstname(),
			$keys[4] => $this->getLastname(),
			$keys[5] => $this->getEmail(),
			$keys[6] => $this->getPosition(),
			$keys[7] => $this->getPhone(),
			$keys[8] => $this->getRoleId(),
			$keys[9] => $this->getLastLoginAt(),
			$keys[10] => $this->getCreatedAt(),
			$keys[11] => $this->getHash(),
			$keys[12] => $this->getCountryId(),
			$keys[13] => $this->getCulture(),
			$keys[14] => $this->getCustomerId(),
			$keys[15] => $this->getState(),
			$keys[16] => $this->getViewMode(),
			$keys[17] => $this->getComment(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setUsername($value);
				break;
			case 2:
				$this->setPassword($value);
				break;
			case 3:
				$this->setFirstname($value);
				break;
			case 4:
				$this->setLastname($value);
				break;
			case 5:
				$this->setEmail($value);
				break;
			case 6:
				$this->setPosition($value);
				break;
			case 7:
				$this->setPhone($value);
				break;
			case 8:
				$this->setRoleId($value);
				break;
			case 9:
				$this->setLastLoginAt($value);
				break;
			case 10:
				$this->setCreatedAt($value);
				break;
			case 11:
				$this->setHash($value);
				break;
			case 12:
				$this->setCountryId($value);
				break;
			case 13:
				$this->setCulture($value);
				break;
			case 14:
				$this->setCustomerId($value);
				break;
			case 15:
				$this->setState($value);
				break;
			case 16:
				$this->setViewMode($value);
				break;
			case 17:
				$this->setComment($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UserPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setUsername($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setPassword($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setFirstname($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setLastname($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setEmail($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPosition($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPhone($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setRoleId($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setLastLoginAt($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCreatedAt($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setHash($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setCountryId($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCulture($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCustomerId($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setState($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setViewMode($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setComment($arr[$keys[17]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UserPeer::DATABASE_NAME);

		if ($this->isColumnModified(UserPeer::ID)) $criteria->add(UserPeer::ID, $this->id);
		if ($this->isColumnModified(UserPeer::USERNAME)) $criteria->add(UserPeer::USERNAME, $this->username);
		if ($this->isColumnModified(UserPeer::PASSWORD)) $criteria->add(UserPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(UserPeer::FIRSTNAME)) $criteria->add(UserPeer::FIRSTNAME, $this->firstname);
		if ($this->isColumnModified(UserPeer::LASTNAME)) $criteria->add(UserPeer::LASTNAME, $this->lastname);
		if ($this->isColumnModified(UserPeer::EMAIL)) $criteria->add(UserPeer::EMAIL, $this->email);
		if ($this->isColumnModified(UserPeer::POSITION)) $criteria->add(UserPeer::POSITION, $this->position);
		if ($this->isColumnModified(UserPeer::PHONE)) $criteria->add(UserPeer::PHONE, $this->phone);
		if ($this->isColumnModified(UserPeer::ROLE_ID)) $criteria->add(UserPeer::ROLE_ID, $this->role_id);
		if ($this->isColumnModified(UserPeer::LAST_LOGIN_AT)) $criteria->add(UserPeer::LAST_LOGIN_AT, $this->last_login_at);
		if ($this->isColumnModified(UserPeer::CREATED_AT)) $criteria->add(UserPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(UserPeer::HASH)) $criteria->add(UserPeer::HASH, $this->hash);
		if ($this->isColumnModified(UserPeer::COUNTRY_ID)) $criteria->add(UserPeer::COUNTRY_ID, $this->country_id);
		if ($this->isColumnModified(UserPeer::CULTURE)) $criteria->add(UserPeer::CULTURE, $this->culture);
		if ($this->isColumnModified(UserPeer::CUSTOMER_ID)) $criteria->add(UserPeer::CUSTOMER_ID, $this->customer_id);
		if ($this->isColumnModified(UserPeer::STATE)) $criteria->add(UserPeer::STATE, $this->state);
		if ($this->isColumnModified(UserPeer::VIEW_MODE)) $criteria->add(UserPeer::VIEW_MODE, $this->view_mode);
		if ($this->isColumnModified(UserPeer::COMMENT)) $criteria->add(UserPeer::COMMENT, $this->comment);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UserPeer::DATABASE_NAME);

		$criteria->add(UserPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of User (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setUsername($this->username);

		$copyObj->setPassword($this->password);

		$copyObj->setFirstname($this->firstname);

		$copyObj->setLastname($this->lastname);

		$copyObj->setEmail($this->email);

		$copyObj->setPosition($this->position);

		$copyObj->setPhone($this->phone);

		$copyObj->setRoleId($this->role_id);

		$copyObj->setLastLoginAt($this->last_login_at);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setHash($this->hash);

		$copyObj->setCountryId($this->country_id);

		$copyObj->setCulture($this->culture);

		$copyObj->setCustomerId($this->customer_id);

		$copyObj->setState($this->state);

		$copyObj->setViewMode($this->view_mode);

		$copyObj->setComment($this->comment);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getComments() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addComment($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFavoritess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFavorites($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFiles() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFile($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFileTmps() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFileTmp($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFolders() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFolder($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getGroupes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addGroupe($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLogs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLog($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRequests() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRequest($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUserFolders() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserFolder($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUserGroups() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserGroup($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUserUnits() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserUnit($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUniqueKeys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUniqueKey($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUserPreferences() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserPreference($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getBaskets() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBasket($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFileWaitings() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFileWaiting($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFileRelateds() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFileRelated($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLogUsers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLogUser($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPermalinkNotificationsRelatedByUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPermalinkNotificationRelatedByUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPermalinkNotificationsRelatedByPermalinkId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPermalinkNotificationRelatedByPermalinkId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUserHasModules() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserHasModule($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getBasketRequests() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBasketRequest($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResetPasswordRequests() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResetPasswordRequest($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     User Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UserPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UserPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Role object.
	 *
	 * @param      Role $v
	 * @return     User The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setRole(Role $v = null)
	{
		if ($v === null) {
			$this->setRoleId(NULL);
		} else {
			$this->setRoleId($v->getId());
		}

		$this->aRole = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Role object, it will not be re-added.
		if ($v !== null) {
			$v->addUser($this);
		}

		return $this;
	}


	/**
	 * Get the associated Role object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Role The associated Role object.
	 * @throws     PropelException
	 */
	public function getRole(PropelPDO $con = null)
	{
		if ($this->aRole === null && ($this->role_id !== null)) {
			$this->aRole = RolePeer::retrieveByPk($this->role_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aRole->addUsers($this);
			 */
		}
		return $this->aRole;
	}

	/**
	 * Declares an association between this object and a Country object.
	 *
	 * @param      Country $v
	 * @return     User The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCountry(Country $v = null)
	{
		if ($v === null) {
			$this->setCountryId(NULL);
		} else {
			$this->setCountryId($v->getId());
		}

		$this->aCountry = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Country object, it will not be re-added.
		if ($v !== null) {
			$v->addUser($this);
		}

		return $this;
	}


	/**
	 * Get the associated Country object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Country The associated Country object.
	 * @throws     PropelException
	 */
	public function getCountry(PropelPDO $con = null)
	{
		if ($this->aCountry === null && ($this->country_id !== null)) {
			$this->aCountry = CountryPeer::retrieveByPk($this->country_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCountry->addUsers($this);
			 */
		}
		return $this->aCountry;
	}

	/**
	 * Declares an association between this object and a Customer object.
	 *
	 * @param      Customer $v
	 * @return     User The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCustomer(Customer $v = null)
	{
		if ($v === null) {
			$this->setCustomerId(NULL);
		} else {
			$this->setCustomerId($v->getId());
		}

		$this->aCustomer = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Customer object, it will not be re-added.
		if ($v !== null) {
			$v->addUser($this);
		}

		return $this;
	}


	/**
	 * Get the associated Customer object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Customer The associated Customer object.
	 * @throws     PropelException
	 */
	public function getCustomer(PropelPDO $con = null)
	{
		if ($this->aCustomer === null && ($this->customer_id !== null)) {
			$this->aCustomer = CustomerPeer::retrieveByPk($this->customer_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCustomer->addUsers($this);
			 */
		}
		return $this->aCustomer;
	}

	/**
	 * Clears out the collComments collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addComments()
	 */
	public function clearComments()
	{
		$this->collComments = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collComments collection (array).
	 *
	 * By default this just sets the collComments collection to an empty array (like clearcollComments());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initComments()
	{
		$this->collComments = array();
	}

	/**
	 * Gets an array of Comment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related Comments from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Comment[]
	 * @throws     PropelException
	 */
	public function getComments($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collComments === null) {
			if ($this->isNew()) {
			   $this->collComments = array();
			} else {

				$criteria->add(CommentPeer::USER_ID, $this->id);

				CommentPeer::addSelectColumns($criteria);
				$this->collComments = CommentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CommentPeer::USER_ID, $this->id);

				CommentPeer::addSelectColumns($criteria);
				if (!isset($this->lastCommentCriteria) || !$this->lastCommentCriteria->equals($criteria)) {
					$this->collComments = CommentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCommentCriteria = $criteria;
		return $this->collComments;
	}

	/**
	 * Returns the number of related Comment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Comment objects.
	 * @throws     PropelException
	 */
	public function countComments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collComments === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CommentPeer::USER_ID, $this->id);

				$count = CommentPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CommentPeer::USER_ID, $this->id);

				if (!isset($this->lastCommentCriteria) || !$this->lastCommentCriteria->equals($criteria)) {
					$count = CommentPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collComments);
				}
			} else {
				$count = count($this->collComments);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Comment object to this object
	 * through the Comment foreign key attribute.
	 *
	 * @param      Comment $l Comment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addComment(Comment $l)
	{
		if ($this->collComments === null) {
			$this->initComments();
		}
		if (!in_array($l, $this->collComments, true)) { // only add it if the **same** object is not already associated
			array_push($this->collComments, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Comments from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getCommentsJoinFile($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collComments === null) {
			if ($this->isNew()) {
				$this->collComments = array();
			} else {

				$criteria->add(CommentPeer::USER_ID, $this->id);

				$this->collComments = CommentPeer::doSelectJoinFile($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CommentPeer::USER_ID, $this->id);

			if (!isset($this->lastCommentCriteria) || !$this->lastCommentCriteria->equals($criteria)) {
				$this->collComments = CommentPeer::doSelectJoinFile($criteria, $con, $join_behavior);
			}
		}
		$this->lastCommentCriteria = $criteria;

		return $this->collComments;
	}

	/**
	 * Clears out the collFavoritess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFavoritess()
	 */
	public function clearFavoritess()
	{
		$this->collFavoritess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFavoritess collection (array).
	 *
	 * By default this just sets the collFavoritess collection to an empty array (like clearcollFavoritess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFavoritess()
	{
		$this->collFavoritess = array();
	}

	/**
	 * Gets an array of Favorites objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related Favoritess from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Favorites[]
	 * @throws     PropelException
	 */
	public function getFavoritess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFavoritess === null) {
			if ($this->isNew()) {
			   $this->collFavoritess = array();
			} else {

				$criteria->add(FavoritesPeer::USER_ID, $this->id);

				FavoritesPeer::addSelectColumns($criteria);
				$this->collFavoritess = FavoritesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FavoritesPeer::USER_ID, $this->id);

				FavoritesPeer::addSelectColumns($criteria);
				if (!isset($this->lastFavoritesCriteria) || !$this->lastFavoritesCriteria->equals($criteria)) {
					$this->collFavoritess = FavoritesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFavoritesCriteria = $criteria;
		return $this->collFavoritess;
	}

	/**
	 * Returns the number of related Favorites objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Favorites objects.
	 * @throws     PropelException
	 */
	public function countFavoritess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFavoritess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FavoritesPeer::USER_ID, $this->id);

				$count = FavoritesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FavoritesPeer::USER_ID, $this->id);

				if (!isset($this->lastFavoritesCriteria) || !$this->lastFavoritesCriteria->equals($criteria)) {
					$count = FavoritesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFavoritess);
				}
			} else {
				$count = count($this->collFavoritess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Favorites object to this object
	 * through the Favorites foreign key attribute.
	 *
	 * @param      Favorites $l Favorites
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFavorites(Favorites $l)
	{
		if ($this->collFavoritess === null) {
			$this->initFavoritess();
		}
		if (!in_array($l, $this->collFavoritess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFavoritess, $l);
			$l->setUser($this);
		}
	}

	/**
	 * Clears out the collFiles collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFiles()
	 */
	public function clearFiles()
	{
		$this->collFiles = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFiles collection (array).
	 *
	 * By default this just sets the collFiles collection to an empty array (like clearcollFiles());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFiles()
	{
		$this->collFiles = array();
	}

	/**
	 * Gets an array of File objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related Files from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array File[]
	 * @throws     PropelException
	 */
	public function getFiles($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFiles === null) {
			if ($this->isNew()) {
			   $this->collFiles = array();
			} else {

				$criteria->add(FilePeer::USER_ID, $this->id);

				FilePeer::addSelectColumns($criteria);
				$this->collFiles = FilePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FilePeer::USER_ID, $this->id);

				FilePeer::addSelectColumns($criteria);
				if (!isset($this->lastFileCriteria) || !$this->lastFileCriteria->equals($criteria)) {
					$this->collFiles = FilePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFileCriteria = $criteria;
		return $this->collFiles;
	}

	/**
	 * Returns the number of related File objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related File objects.
	 * @throws     PropelException
	 */
	public function countFiles(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFiles === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FilePeer::USER_ID, $this->id);

				$count = FilePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FilePeer::USER_ID, $this->id);

				if (!isset($this->lastFileCriteria) || !$this->lastFileCriteria->equals($criteria)) {
					$count = FilePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFiles);
				}
			} else {
				$count = count($this->collFiles);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a File object to this object
	 * through the File foreign key attribute.
	 *
	 * @param      File $l File
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFile(File $l)
	{
		if ($this->collFiles === null) {
			$this->initFiles();
		}
		if (!in_array($l, $this->collFiles, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFiles, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Files from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFilesJoinGroupe($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFiles === null) {
			if ($this->isNew()) {
				$this->collFiles = array();
			} else {

				$criteria->add(FilePeer::USER_ID, $this->id);

				$this->collFiles = FilePeer::doSelectJoinGroupe($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FilePeer::USER_ID, $this->id);

			if (!isset($this->lastFileCriteria) || !$this->lastFileCriteria->equals($criteria)) {
				$this->collFiles = FilePeer::doSelectJoinGroupe($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileCriteria = $criteria;

		return $this->collFiles;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Files from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFilesJoinFolder($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFiles === null) {
			if ($this->isNew()) {
				$this->collFiles = array();
			} else {

				$criteria->add(FilePeer::USER_ID, $this->id);

				$this->collFiles = FilePeer::doSelectJoinFolder($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FilePeer::USER_ID, $this->id);

			if (!isset($this->lastFileCriteria) || !$this->lastFileCriteria->equals($criteria)) {
				$this->collFiles = FilePeer::doSelectJoinFolder($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileCriteria = $criteria;

		return $this->collFiles;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Files from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFilesJoinDisk($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFiles === null) {
			if ($this->isNew()) {
				$this->collFiles = array();
			} else {

				$criteria->add(FilePeer::USER_ID, $this->id);

				$this->collFiles = FilePeer::doSelectJoinDisk($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FilePeer::USER_ID, $this->id);

			if (!isset($this->lastFileCriteria) || !$this->lastFileCriteria->equals($criteria)) {
				$this->collFiles = FilePeer::doSelectJoinDisk($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileCriteria = $criteria;

		return $this->collFiles;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Files from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFilesJoinLicence($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFiles === null) {
			if ($this->isNew()) {
				$this->collFiles = array();
			} else {

				$criteria->add(FilePeer::USER_ID, $this->id);

				$this->collFiles = FilePeer::doSelectJoinLicence($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FilePeer::USER_ID, $this->id);

			if (!isset($this->lastFileCriteria) || !$this->lastFileCriteria->equals($criteria)) {
				$this->collFiles = FilePeer::doSelectJoinLicence($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileCriteria = $criteria;

		return $this->collFiles;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Files from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFilesJoinUsageDistribution($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFiles === null) {
			if ($this->isNew()) {
				$this->collFiles = array();
			} else {

				$criteria->add(FilePeer::USER_ID, $this->id);

				$this->collFiles = FilePeer::doSelectJoinUsageDistribution($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FilePeer::USER_ID, $this->id);

			if (!isset($this->lastFileCriteria) || !$this->lastFileCriteria->equals($criteria)) {
				$this->collFiles = FilePeer::doSelectJoinUsageDistribution($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileCriteria = $criteria;

		return $this->collFiles;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Files from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFilesJoinUsageConstraint($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFiles === null) {
			if ($this->isNew()) {
				$this->collFiles = array();
			} else {

				$criteria->add(FilePeer::USER_ID, $this->id);

				$this->collFiles = FilePeer::doSelectJoinUsageConstraint($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FilePeer::USER_ID, $this->id);

			if (!isset($this->lastFileCriteria) || !$this->lastFileCriteria->equals($criteria)) {
				$this->collFiles = FilePeer::doSelectJoinUsageConstraint($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileCriteria = $criteria;

		return $this->collFiles;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Files from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFilesJoinUsageUse($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFiles === null) {
			if ($this->isNew()) {
				$this->collFiles = array();
			} else {

				$criteria->add(FilePeer::USER_ID, $this->id);

				$this->collFiles = FilePeer::doSelectJoinUsageUse($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FilePeer::USER_ID, $this->id);

			if (!isset($this->lastFileCriteria) || !$this->lastFileCriteria->equals($criteria)) {
				$this->collFiles = FilePeer::doSelectJoinUsageUse($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileCriteria = $criteria;

		return $this->collFiles;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Files from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFilesJoinUsageCommercial($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFiles === null) {
			if ($this->isNew()) {
				$this->collFiles = array();
			} else {

				$criteria->add(FilePeer::USER_ID, $this->id);

				$this->collFiles = FilePeer::doSelectJoinUsageCommercial($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FilePeer::USER_ID, $this->id);

			if (!isset($this->lastFileCriteria) || !$this->lastFileCriteria->equals($criteria)) {
				$this->collFiles = FilePeer::doSelectJoinUsageCommercial($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileCriteria = $criteria;

		return $this->collFiles;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Files from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFilesJoinCreativeCommons($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFiles === null) {
			if ($this->isNew()) {
				$this->collFiles = array();
			} else {

				$criteria->add(FilePeer::USER_ID, $this->id);

				$this->collFiles = FilePeer::doSelectJoinCreativeCommons($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FilePeer::USER_ID, $this->id);

			if (!isset($this->lastFileCriteria) || !$this->lastFileCriteria->equals($criteria)) {
				$this->collFiles = FilePeer::doSelectJoinCreativeCommons($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileCriteria = $criteria;

		return $this->collFiles;
	}

	/**
	 * Clears out the collFileTmps collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFileTmps()
	 */
	public function clearFileTmps()
	{
		$this->collFileTmps = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFileTmps collection (array).
	 *
	 * By default this just sets the collFileTmps collection to an empty array (like clearcollFileTmps());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFileTmps()
	{
		$this->collFileTmps = array();
	}

	/**
	 * Gets an array of FileTmp objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related FileTmps from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array FileTmp[]
	 * @throws     PropelException
	 */
	public function getFileTmps($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileTmps === null) {
			if ($this->isNew()) {
			   $this->collFileTmps = array();
			} else {

				$criteria->add(FileTmpPeer::USER_ID, $this->id);

				FileTmpPeer::addSelectColumns($criteria);
				$this->collFileTmps = FileTmpPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FileTmpPeer::USER_ID, $this->id);

				FileTmpPeer::addSelectColumns($criteria);
				if (!isset($this->lastFileTmpCriteria) || !$this->lastFileTmpCriteria->equals($criteria)) {
					$this->collFileTmps = FileTmpPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFileTmpCriteria = $criteria;
		return $this->collFileTmps;
	}

	/**
	 * Returns the number of related FileTmp objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related FileTmp objects.
	 * @throws     PropelException
	 */
	public function countFileTmps(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFileTmps === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FileTmpPeer::USER_ID, $this->id);

				$count = FileTmpPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FileTmpPeer::USER_ID, $this->id);

				if (!isset($this->lastFileTmpCriteria) || !$this->lastFileTmpCriteria->equals($criteria)) {
					$count = FileTmpPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFileTmps);
				}
			} else {
				$count = count($this->collFileTmps);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a FileTmp object to this object
	 * through the FileTmp foreign key attribute.
	 *
	 * @param      FileTmp $l FileTmp
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFileTmp(FileTmp $l)
	{
		if ($this->collFileTmps === null) {
			$this->initFileTmps();
		}
		if (!in_array($l, $this->collFileTmps, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFileTmps, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related FileTmps from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFileTmpsJoinFile($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileTmps === null) {
			if ($this->isNew()) {
				$this->collFileTmps = array();
			} else {

				$criteria->add(FileTmpPeer::USER_ID, $this->id);

				$this->collFileTmps = FileTmpPeer::doSelectJoinFile($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FileTmpPeer::USER_ID, $this->id);

			if (!isset($this->lastFileTmpCriteria) || !$this->lastFileTmpCriteria->equals($criteria)) {
				$this->collFileTmps = FileTmpPeer::doSelectJoinFile($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileTmpCriteria = $criteria;

		return $this->collFileTmps;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related FileTmps from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFileTmpsJoinFolder($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileTmps === null) {
			if ($this->isNew()) {
				$this->collFileTmps = array();
			} else {

				$criteria->add(FileTmpPeer::USER_ID, $this->id);

				$this->collFileTmps = FileTmpPeer::doSelectJoinFolder($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FileTmpPeer::USER_ID, $this->id);

			if (!isset($this->lastFileTmpCriteria) || !$this->lastFileTmpCriteria->equals($criteria)) {
				$this->collFileTmps = FileTmpPeer::doSelectJoinFolder($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileTmpCriteria = $criteria;

		return $this->collFileTmps;
	}

	/**
	 * Clears out the collFolders collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFolders()
	 */
	public function clearFolders()
	{
		$this->collFolders = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFolders collection (array).
	 *
	 * By default this just sets the collFolders collection to an empty array (like clearcollFolders());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFolders()
	{
		$this->collFolders = array();
	}

	/**
	 * Gets an array of Folder objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related Folders from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Folder[]
	 * @throws     PropelException
	 */
	public function getFolders($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFolders === null) {
			if ($this->isNew()) {
			   $this->collFolders = array();
			} else {

				$criteria->add(FolderPeer::USER_ID, $this->id);

				FolderPeer::addSelectColumns($criteria);
				$this->collFolders = FolderPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FolderPeer::USER_ID, $this->id);

				FolderPeer::addSelectColumns($criteria);
				if (!isset($this->lastFolderCriteria) || !$this->lastFolderCriteria->equals($criteria)) {
					$this->collFolders = FolderPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFolderCriteria = $criteria;
		return $this->collFolders;
	}

	/**
	 * Returns the number of related Folder objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Folder objects.
	 * @throws     PropelException
	 */
	public function countFolders(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFolders === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FolderPeer::USER_ID, $this->id);

				$count = FolderPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FolderPeer::USER_ID, $this->id);

				if (!isset($this->lastFolderCriteria) || !$this->lastFolderCriteria->equals($criteria)) {
					$count = FolderPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFolders);
				}
			} else {
				$count = count($this->collFolders);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Folder object to this object
	 * through the Folder foreign key attribute.
	 *
	 * @param      Folder $l Folder
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFolder(Folder $l)
	{
		if ($this->collFolders === null) {
			$this->initFolders();
		}
		if (!in_array($l, $this->collFolders, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFolders, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Folders from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFoldersJoinGroupe($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFolders === null) {
			if ($this->isNew()) {
				$this->collFolders = array();
			} else {

				$criteria->add(FolderPeer::USER_ID, $this->id);

				$this->collFolders = FolderPeer::doSelectJoinGroupe($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FolderPeer::USER_ID, $this->id);

			if (!isset($this->lastFolderCriteria) || !$this->lastFolderCriteria->equals($criteria)) {
				$this->collFolders = FolderPeer::doSelectJoinGroupe($criteria, $con, $join_behavior);
			}
		}
		$this->lastFolderCriteria = $criteria;

		return $this->collFolders;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Folders from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFoldersJoinFolderRelatedBySubfolderId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFolders === null) {
			if ($this->isNew()) {
				$this->collFolders = array();
			} else {

				$criteria->add(FolderPeer::USER_ID, $this->id);

				$this->collFolders = FolderPeer::doSelectJoinFolderRelatedBySubfolderId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FolderPeer::USER_ID, $this->id);

			if (!isset($this->lastFolderCriteria) || !$this->lastFolderCriteria->equals($criteria)) {
				$this->collFolders = FolderPeer::doSelectJoinFolderRelatedBySubfolderId($criteria, $con, $join_behavior);
			}
		}
		$this->lastFolderCriteria = $criteria;

		return $this->collFolders;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Folders from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFoldersJoinLicence($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFolders === null) {
			if ($this->isNew()) {
				$this->collFolders = array();
			} else {

				$criteria->add(FolderPeer::USER_ID, $this->id);

				$this->collFolders = FolderPeer::doSelectJoinLicence($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FolderPeer::USER_ID, $this->id);

			if (!isset($this->lastFolderCriteria) || !$this->lastFolderCriteria->equals($criteria)) {
				$this->collFolders = FolderPeer::doSelectJoinLicence($criteria, $con, $join_behavior);
			}
		}
		$this->lastFolderCriteria = $criteria;

		return $this->collFolders;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Folders from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFoldersJoinUsageDistribution($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFolders === null) {
			if ($this->isNew()) {
				$this->collFolders = array();
			} else {

				$criteria->add(FolderPeer::USER_ID, $this->id);

				$this->collFolders = FolderPeer::doSelectJoinUsageDistribution($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FolderPeer::USER_ID, $this->id);

			if (!isset($this->lastFolderCriteria) || !$this->lastFolderCriteria->equals($criteria)) {
				$this->collFolders = FolderPeer::doSelectJoinUsageDistribution($criteria, $con, $join_behavior);
			}
		}
		$this->lastFolderCriteria = $criteria;

		return $this->collFolders;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Folders from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFoldersJoinUsageConstraint($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFolders === null) {
			if ($this->isNew()) {
				$this->collFolders = array();
			} else {

				$criteria->add(FolderPeer::USER_ID, $this->id);

				$this->collFolders = FolderPeer::doSelectJoinUsageConstraint($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FolderPeer::USER_ID, $this->id);

			if (!isset($this->lastFolderCriteria) || !$this->lastFolderCriteria->equals($criteria)) {
				$this->collFolders = FolderPeer::doSelectJoinUsageConstraint($criteria, $con, $join_behavior);
			}
		}
		$this->lastFolderCriteria = $criteria;

		return $this->collFolders;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Folders from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFoldersJoinUsageUse($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFolders === null) {
			if ($this->isNew()) {
				$this->collFolders = array();
			} else {

				$criteria->add(FolderPeer::USER_ID, $this->id);

				$this->collFolders = FolderPeer::doSelectJoinUsageUse($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FolderPeer::USER_ID, $this->id);

			if (!isset($this->lastFolderCriteria) || !$this->lastFolderCriteria->equals($criteria)) {
				$this->collFolders = FolderPeer::doSelectJoinUsageUse($criteria, $con, $join_behavior);
			}
		}
		$this->lastFolderCriteria = $criteria;

		return $this->collFolders;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Folders from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFoldersJoinUsageCommercial($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFolders === null) {
			if ($this->isNew()) {
				$this->collFolders = array();
			} else {

				$criteria->add(FolderPeer::USER_ID, $this->id);

				$this->collFolders = FolderPeer::doSelectJoinUsageCommercial($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FolderPeer::USER_ID, $this->id);

			if (!isset($this->lastFolderCriteria) || !$this->lastFolderCriteria->equals($criteria)) {
				$this->collFolders = FolderPeer::doSelectJoinUsageCommercial($criteria, $con, $join_behavior);
			}
		}
		$this->lastFolderCriteria = $criteria;

		return $this->collFolders;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Folders from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFoldersJoinCreativeCommons($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFolders === null) {
			if ($this->isNew()) {
				$this->collFolders = array();
			} else {

				$criteria->add(FolderPeer::USER_ID, $this->id);

				$this->collFolders = FolderPeer::doSelectJoinCreativeCommons($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FolderPeer::USER_ID, $this->id);

			if (!isset($this->lastFolderCriteria) || !$this->lastFolderCriteria->equals($criteria)) {
				$this->collFolders = FolderPeer::doSelectJoinCreativeCommons($criteria, $con, $join_behavior);
			}
		}
		$this->lastFolderCriteria = $criteria;

		return $this->collFolders;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Folders from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFoldersJoinDisk($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFolders === null) {
			if ($this->isNew()) {
				$this->collFolders = array();
			} else {

				$criteria->add(FolderPeer::USER_ID, $this->id);

				$this->collFolders = FolderPeer::doSelectJoinDisk($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FolderPeer::USER_ID, $this->id);

			if (!isset($this->lastFolderCriteria) || !$this->lastFolderCriteria->equals($criteria)) {
				$this->collFolders = FolderPeer::doSelectJoinDisk($criteria, $con, $join_behavior);
			}
		}
		$this->lastFolderCriteria = $criteria;

		return $this->collFolders;
	}

	/**
	 * Clears out the collGroupes collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addGroupes()
	 */
	public function clearGroupes()
	{
		$this->collGroupes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collGroupes collection (array).
	 *
	 * By default this just sets the collGroupes collection to an empty array (like clearcollGroupes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initGroupes()
	{
		$this->collGroupes = array();
	}

	/**
	 * Gets an array of Groupe objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related Groupes from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Groupe[]
	 * @throws     PropelException
	 */
	public function getGroupes($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupes === null) {
			if ($this->isNew()) {
			   $this->collGroupes = array();
			} else {

				$criteria->add(GroupePeer::USER_ID, $this->id);

				GroupePeer::addSelectColumns($criteria);
				$this->collGroupes = GroupePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(GroupePeer::USER_ID, $this->id);

				GroupePeer::addSelectColumns($criteria);
				if (!isset($this->lastGroupeCriteria) || !$this->lastGroupeCriteria->equals($criteria)) {
					$this->collGroupes = GroupePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastGroupeCriteria = $criteria;
		return $this->collGroupes;
	}

	/**
	 * Returns the number of related Groupe objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Groupe objects.
	 * @throws     PropelException
	 */
	public function countGroupes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collGroupes === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(GroupePeer::USER_ID, $this->id);

				$count = GroupePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(GroupePeer::USER_ID, $this->id);

				if (!isset($this->lastGroupeCriteria) || !$this->lastGroupeCriteria->equals($criteria)) {
					$count = GroupePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collGroupes);
				}
			} else {
				$count = count($this->collGroupes);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Groupe object to this object
	 * through the Groupe foreign key attribute.
	 *
	 * @param      Groupe $l Groupe
	 * @return     void
	 * @throws     PropelException
	 */
	public function addGroupe(Groupe $l)
	{
		if ($this->collGroupes === null) {
			$this->initGroupes();
		}
		if (!in_array($l, $this->collGroupes, true)) { // only add it if the **same** object is not already associated
			array_push($this->collGroupes, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Groupes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getGroupesJoinCustomer($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupes === null) {
			if ($this->isNew()) {
				$this->collGroupes = array();
			} else {

				$criteria->add(GroupePeer::USER_ID, $this->id);

				$this->collGroupes = GroupePeer::doSelectJoinCustomer($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GroupePeer::USER_ID, $this->id);

			if (!isset($this->lastGroupeCriteria) || !$this->lastGroupeCriteria->equals($criteria)) {
				$this->collGroupes = GroupePeer::doSelectJoinCustomer($criteria, $con, $join_behavior);
			}
		}
		$this->lastGroupeCriteria = $criteria;

		return $this->collGroupes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Groupes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getGroupesJoinDisk($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupes === null) {
			if ($this->isNew()) {
				$this->collGroupes = array();
			} else {

				$criteria->add(GroupePeer::USER_ID, $this->id);

				$this->collGroupes = GroupePeer::doSelectJoinDisk($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GroupePeer::USER_ID, $this->id);

			if (!isset($this->lastGroupeCriteria) || !$this->lastGroupeCriteria->equals($criteria)) {
				$this->collGroupes = GroupePeer::doSelectJoinDisk($criteria, $con, $join_behavior);
			}
		}
		$this->lastGroupeCriteria = $criteria;

		return $this->collGroupes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Groupes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getGroupesJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupes === null) {
			if ($this->isNew()) {
				$this->collGroupes = array();
			} else {

				$criteria->add(GroupePeer::USER_ID, $this->id);

				$this->collGroupes = GroupePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GroupePeer::USER_ID, $this->id);

			if (!isset($this->lastGroupeCriteria) || !$this->lastGroupeCriteria->equals($criteria)) {
				$this->collGroupes = GroupePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastGroupeCriteria = $criteria;

		return $this->collGroupes;
	}

	/**
	 * Clears out the collLogs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLogs()
	 */
	public function clearLogs()
	{
		$this->collLogs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLogs collection (array).
	 *
	 * By default this just sets the collLogs collection to an empty array (like clearcollLogs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLogs()
	{
		$this->collLogs = array();
	}

	/**
	 * Gets an array of Log objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related Logs from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Log[]
	 * @throws     PropelException
	 */
	public function getLogs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLogs === null) {
			if ($this->isNew()) {
			   $this->collLogs = array();
			} else {

				$criteria->add(LogPeer::USER_ID, $this->id);

				LogPeer::addSelectColumns($criteria);
				$this->collLogs = LogPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LogPeer::USER_ID, $this->id);

				LogPeer::addSelectColumns($criteria);
				if (!isset($this->lastLogCriteria) || !$this->lastLogCriteria->equals($criteria)) {
					$this->collLogs = LogPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLogCriteria = $criteria;
		return $this->collLogs;
	}

	/**
	 * Returns the number of related Log objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Log objects.
	 * @throws     PropelException
	 */
	public function countLogs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLogs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LogPeer::USER_ID, $this->id);

				$count = LogPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LogPeer::USER_ID, $this->id);

				if (!isset($this->lastLogCriteria) || !$this->lastLogCriteria->equals($criteria)) {
					$count = LogPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collLogs);
				}
			} else {
				$count = count($this->collLogs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Log object to this object
	 * through the Log foreign key attribute.
	 *
	 * @param      Log $l Log
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLog(Log $l)
	{
		if ($this->collLogs === null) {
			$this->initLogs();
		}
		if (!in_array($l, $this->collLogs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLogs, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Logs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getLogsJoinCustomer($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLogs === null) {
			if ($this->isNew()) {
				$this->collLogs = array();
			} else {

				$criteria->add(LogPeer::USER_ID, $this->id);

				$this->collLogs = LogPeer::doSelectJoinCustomer($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(LogPeer::USER_ID, $this->id);

			if (!isset($this->lastLogCriteria) || !$this->lastLogCriteria->equals($criteria)) {
				$this->collLogs = LogPeer::doSelectJoinCustomer($criteria, $con, $join_behavior);
			}
		}
		$this->lastLogCriteria = $criteria;

		return $this->collLogs;
	}

	/**
	 * Clears out the collRequests collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRequests()
	 */
	public function clearRequests()
	{
		$this->collRequests = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRequests collection (array).
	 *
	 * By default this just sets the collRequests collection to an empty array (like clearcollRequests());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRequests()
	{
		$this->collRequests = array();
	}

	/**
	 * Gets an array of Request objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related Requests from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Request[]
	 * @throws     PropelException
	 */
	public function getRequests($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRequests === null) {
			if ($this->isNew()) {
			   $this->collRequests = array();
			} else {

				$criteria->add(RequestPeer::USER_ID, $this->id);

				RequestPeer::addSelectColumns($criteria);
				$this->collRequests = RequestPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RequestPeer::USER_ID, $this->id);

				RequestPeer::addSelectColumns($criteria);
				if (!isset($this->lastRequestCriteria) || !$this->lastRequestCriteria->equals($criteria)) {
					$this->collRequests = RequestPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRequestCriteria = $criteria;
		return $this->collRequests;
	}

	/**
	 * Returns the number of related Request objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Request objects.
	 * @throws     PropelException
	 */
	public function countRequests(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRequests === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RequestPeer::USER_ID, $this->id);

				$count = RequestPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RequestPeer::USER_ID, $this->id);

				if (!isset($this->lastRequestCriteria) || !$this->lastRequestCriteria->equals($criteria)) {
					$count = RequestPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRequests);
				}
			} else {
				$count = count($this->collRequests);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Request object to this object
	 * through the Request foreign key attribute.
	 *
	 * @param      Request $l Request
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRequest(Request $l)
	{
		if ($this->collRequests === null) {
			$this->initRequests();
		}
		if (!in_array($l, $this->collRequests, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRequests, $l);
			$l->setUser($this);
		}
	}

	/**
	 * Clears out the collUserFolders collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserFolders()
	 */
	public function clearUserFolders()
	{
		$this->collUserFolders = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserFolders collection (array).
	 *
	 * By default this just sets the collUserFolders collection to an empty array (like clearcollUserFolders());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserFolders()
	{
		$this->collUserFolders = array();
	}

	/**
	 * Gets an array of UserFolder objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related UserFolders from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserFolder[]
	 * @throws     PropelException
	 */
	public function getUserFolders($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserFolders === null) {
			if ($this->isNew()) {
			   $this->collUserFolders = array();
			} else {

				$criteria->add(UserFolderPeer::USER_ID, $this->id);

				UserFolderPeer::addSelectColumns($criteria);
				$this->collUserFolders = UserFolderPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserFolderPeer::USER_ID, $this->id);

				UserFolderPeer::addSelectColumns($criteria);
				if (!isset($this->lastUserFolderCriteria) || !$this->lastUserFolderCriteria->equals($criteria)) {
					$this->collUserFolders = UserFolderPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserFolderCriteria = $criteria;
		return $this->collUserFolders;
	}

	/**
	 * Returns the number of related UserFolder objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserFolder objects.
	 * @throws     PropelException
	 */
	public function countUserFolders(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserFolders === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserFolderPeer::USER_ID, $this->id);

				$count = UserFolderPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserFolderPeer::USER_ID, $this->id);

				if (!isset($this->lastUserFolderCriteria) || !$this->lastUserFolderCriteria->equals($criteria)) {
					$count = UserFolderPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUserFolders);
				}
			} else {
				$count = count($this->collUserFolders);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserFolder object to this object
	 * through the UserFolder foreign key attribute.
	 *
	 * @param      UserFolder $l UserFolder
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserFolder(UserFolder $l)
	{
		if ($this->collUserFolders === null) {
			$this->initUserFolders();
		}
		if (!in_array($l, $this->collUserFolders, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserFolders, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related UserFolders from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getUserFoldersJoinFolder($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserFolders === null) {
			if ($this->isNew()) {
				$this->collUserFolders = array();
			} else {

				$criteria->add(UserFolderPeer::USER_ID, $this->id);

				$this->collUserFolders = UserFolderPeer::doSelectJoinFolder($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserFolderPeer::USER_ID, $this->id);

			if (!isset($this->lastUserFolderCriteria) || !$this->lastUserFolderCriteria->equals($criteria)) {
				$this->collUserFolders = UserFolderPeer::doSelectJoinFolder($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserFolderCriteria = $criteria;

		return $this->collUserFolders;
	}

	/**
	 * Clears out the collUserGroups collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserGroups()
	 */
	public function clearUserGroups()
	{
		$this->collUserGroups = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserGroups collection (array).
	 *
	 * By default this just sets the collUserGroups collection to an empty array (like clearcollUserGroups());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserGroups()
	{
		$this->collUserGroups = array();
	}

	/**
	 * Gets an array of UserGroup objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related UserGroups from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserGroup[]
	 * @throws     PropelException
	 */
	public function getUserGroups($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserGroups === null) {
			if ($this->isNew()) {
			   $this->collUserGroups = array();
			} else {

				$criteria->add(UserGroupPeer::USER_ID, $this->id);

				UserGroupPeer::addSelectColumns($criteria);
				$this->collUserGroups = UserGroupPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserGroupPeer::USER_ID, $this->id);

				UserGroupPeer::addSelectColumns($criteria);
				if (!isset($this->lastUserGroupCriteria) || !$this->lastUserGroupCriteria->equals($criteria)) {
					$this->collUserGroups = UserGroupPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserGroupCriteria = $criteria;
		return $this->collUserGroups;
	}

	/**
	 * Returns the number of related UserGroup objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserGroup objects.
	 * @throws     PropelException
	 */
	public function countUserGroups(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserGroups === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserGroupPeer::USER_ID, $this->id);

				$count = UserGroupPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserGroupPeer::USER_ID, $this->id);

				if (!isset($this->lastUserGroupCriteria) || !$this->lastUserGroupCriteria->equals($criteria)) {
					$count = UserGroupPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUserGroups);
				}
			} else {
				$count = count($this->collUserGroups);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserGroup object to this object
	 * through the UserGroup foreign key attribute.
	 *
	 * @param      UserGroup $l UserGroup
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserGroup(UserGroup $l)
	{
		if ($this->collUserGroups === null) {
			$this->initUserGroups();
		}
		if (!in_array($l, $this->collUserGroups, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserGroups, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related UserGroups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getUserGroupsJoinGroupe($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserGroups === null) {
			if ($this->isNew()) {
				$this->collUserGroups = array();
			} else {

				$criteria->add(UserGroupPeer::USER_ID, $this->id);

				$this->collUserGroups = UserGroupPeer::doSelectJoinGroupe($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserGroupPeer::USER_ID, $this->id);

			if (!isset($this->lastUserGroupCriteria) || !$this->lastUserGroupCriteria->equals($criteria)) {
				$this->collUserGroups = UserGroupPeer::doSelectJoinGroupe($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserGroupCriteria = $criteria;

		return $this->collUserGroups;
	}

	/**
	 * Clears out the collUserUnits collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserUnits()
	 */
	public function clearUserUnits()
	{
		$this->collUserUnits = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserUnits collection (array).
	 *
	 * By default this just sets the collUserUnits collection to an empty array (like clearcollUserUnits());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserUnits()
	{
		$this->collUserUnits = array();
	}

	/**
	 * Gets an array of UserUnit objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related UserUnits from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserUnit[]
	 * @throws     PropelException
	 */
	public function getUserUnits($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserUnits === null) {
			if ($this->isNew()) {
			   $this->collUserUnits = array();
			} else {

				$criteria->add(UserUnitPeer::USER_ID, $this->id);

				UserUnitPeer::addSelectColumns($criteria);
				$this->collUserUnits = UserUnitPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserUnitPeer::USER_ID, $this->id);

				UserUnitPeer::addSelectColumns($criteria);
				if (!isset($this->lastUserUnitCriteria) || !$this->lastUserUnitCriteria->equals($criteria)) {
					$this->collUserUnits = UserUnitPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserUnitCriteria = $criteria;
		return $this->collUserUnits;
	}

	/**
	 * Returns the number of related UserUnit objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserUnit objects.
	 * @throws     PropelException
	 */
	public function countUserUnits(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserUnits === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserUnitPeer::USER_ID, $this->id);

				$count = UserUnitPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserUnitPeer::USER_ID, $this->id);

				if (!isset($this->lastUserUnitCriteria) || !$this->lastUserUnitCriteria->equals($criteria)) {
					$count = UserUnitPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUserUnits);
				}
			} else {
				$count = count($this->collUserUnits);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserUnit object to this object
	 * through the UserUnit foreign key attribute.
	 *
	 * @param      UserUnit $l UserUnit
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserUnit(UserUnit $l)
	{
		if ($this->collUserUnits === null) {
			$this->initUserUnits();
		}
		if (!in_array($l, $this->collUserUnits, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserUnits, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related UserUnits from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getUserUnitsJoinUnit($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserUnits === null) {
			if ($this->isNew()) {
				$this->collUserUnits = array();
			} else {

				$criteria->add(UserUnitPeer::USER_ID, $this->id);

				$this->collUserUnits = UserUnitPeer::doSelectJoinUnit($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserUnitPeer::USER_ID, $this->id);

			if (!isset($this->lastUserUnitCriteria) || !$this->lastUserUnitCriteria->equals($criteria)) {
				$this->collUserUnits = UserUnitPeer::doSelectJoinUnit($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserUnitCriteria = $criteria;

		return $this->collUserUnits;
	}

	/**
	 * Clears out the collUniqueKeys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUniqueKeys()
	 */
	public function clearUniqueKeys()
	{
		$this->collUniqueKeys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUniqueKeys collection (array).
	 *
	 * By default this just sets the collUniqueKeys collection to an empty array (like clearcollUniqueKeys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUniqueKeys()
	{
		$this->collUniqueKeys = array();
	}

	/**
	 * Gets an array of UniqueKey objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related UniqueKeys from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UniqueKey[]
	 * @throws     PropelException
	 */
	public function getUniqueKeys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUniqueKeys === null) {
			if ($this->isNew()) {
			   $this->collUniqueKeys = array();
			} else {

				$criteria->add(UniqueKeyPeer::USER_ID, $this->id);

				UniqueKeyPeer::addSelectColumns($criteria);
				$this->collUniqueKeys = UniqueKeyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UniqueKeyPeer::USER_ID, $this->id);

				UniqueKeyPeer::addSelectColumns($criteria);
				if (!isset($this->lastUniqueKeyCriteria) || !$this->lastUniqueKeyCriteria->equals($criteria)) {
					$this->collUniqueKeys = UniqueKeyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUniqueKeyCriteria = $criteria;
		return $this->collUniqueKeys;
	}

	/**
	 * Returns the number of related UniqueKey objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UniqueKey objects.
	 * @throws     PropelException
	 */
	public function countUniqueKeys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUniqueKeys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UniqueKeyPeer::USER_ID, $this->id);

				$count = UniqueKeyPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UniqueKeyPeer::USER_ID, $this->id);

				if (!isset($this->lastUniqueKeyCriteria) || !$this->lastUniqueKeyCriteria->equals($criteria)) {
					$count = UniqueKeyPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUniqueKeys);
				}
			} else {
				$count = count($this->collUniqueKeys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UniqueKey object to this object
	 * through the UniqueKey foreign key attribute.
	 *
	 * @param      UniqueKey $l UniqueKey
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUniqueKey(UniqueKey $l)
	{
		if ($this->collUniqueKeys === null) {
			$this->initUniqueKeys();
		}
		if (!in_array($l, $this->collUniqueKeys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUniqueKeys, $l);
			$l->setUser($this);
		}
	}

	/**
	 * Clears out the collUserPreferences collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserPreferences()
	 */
	public function clearUserPreferences()
	{
		$this->collUserPreferences = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserPreferences collection (array).
	 *
	 * By default this just sets the collUserPreferences collection to an empty array (like clearcollUserPreferences());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserPreferences()
	{
		$this->collUserPreferences = array();
	}

	/**
	 * Gets an array of UserPreference objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related UserPreferences from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserPreference[]
	 * @throws     PropelException
	 */
	public function getUserPreferences($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserPreferences === null) {
			if ($this->isNew()) {
			   $this->collUserPreferences = array();
			} else {

				$criteria->add(UserPreferencePeer::USER_ID, $this->id);

				UserPreferencePeer::addSelectColumns($criteria);
				$this->collUserPreferences = UserPreferencePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserPreferencePeer::USER_ID, $this->id);

				UserPreferencePeer::addSelectColumns($criteria);
				if (!isset($this->lastUserPreferenceCriteria) || !$this->lastUserPreferenceCriteria->equals($criteria)) {
					$this->collUserPreferences = UserPreferencePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserPreferenceCriteria = $criteria;
		return $this->collUserPreferences;
	}

	/**
	 * Returns the number of related UserPreference objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserPreference objects.
	 * @throws     PropelException
	 */
	public function countUserPreferences(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserPreferences === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserPreferencePeer::USER_ID, $this->id);

				$count = UserPreferencePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserPreferencePeer::USER_ID, $this->id);

				if (!isset($this->lastUserPreferenceCriteria) || !$this->lastUserPreferenceCriteria->equals($criteria)) {
					$count = UserPreferencePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUserPreferences);
				}
			} else {
				$count = count($this->collUserPreferences);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserPreference object to this object
	 * through the UserPreference foreign key attribute.
	 *
	 * @param      UserPreference $l UserPreference
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserPreference(UserPreference $l)
	{
		if ($this->collUserPreferences === null) {
			$this->initUserPreferences();
		}
		if (!in_array($l, $this->collUserPreferences, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserPreferences, $l);
			$l->setUser($this);
		}
	}

	/**
	 * Clears out the collBaskets collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBaskets()
	 */
	public function clearBaskets()
	{
		$this->collBaskets = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBaskets collection (array).
	 *
	 * By default this just sets the collBaskets collection to an empty array (like clearcollBaskets());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBaskets()
	{
		$this->collBaskets = array();
	}

	/**
	 * Gets an array of Basket objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related Baskets from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Basket[]
	 * @throws     PropelException
	 */
	public function getBaskets($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBaskets === null) {
			if ($this->isNew()) {
			   $this->collBaskets = array();
			} else {

				$criteria->add(BasketPeer::USER_ID, $this->id);

				BasketPeer::addSelectColumns($criteria);
				$this->collBaskets = BasketPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BasketPeer::USER_ID, $this->id);

				BasketPeer::addSelectColumns($criteria);
				if (!isset($this->lastBasketCriteria) || !$this->lastBasketCriteria->equals($criteria)) {
					$this->collBaskets = BasketPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBasketCriteria = $criteria;
		return $this->collBaskets;
	}

	/**
	 * Returns the number of related Basket objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Basket objects.
	 * @throws     PropelException
	 */
	public function countBaskets(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBaskets === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BasketPeer::USER_ID, $this->id);

				$count = BasketPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BasketPeer::USER_ID, $this->id);

				if (!isset($this->lastBasketCriteria) || !$this->lastBasketCriteria->equals($criteria)) {
					$count = BasketPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collBaskets);
				}
			} else {
				$count = count($this->collBaskets);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Basket object to this object
	 * through the Basket foreign key attribute.
	 *
	 * @param      Basket $l Basket
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBasket(Basket $l)
	{
		if ($this->collBaskets === null) {
			$this->initBaskets();
		}
		if (!in_array($l, $this->collBaskets, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBaskets, $l);
			$l->setUser($this);
		}
	}

	/**
	 * Clears out the collFileWaitings collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFileWaitings()
	 */
	public function clearFileWaitings()
	{
		$this->collFileWaitings = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFileWaitings collection (array).
	 *
	 * By default this just sets the collFileWaitings collection to an empty array (like clearcollFileWaitings());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFileWaitings()
	{
		$this->collFileWaitings = array();
	}

	/**
	 * Gets an array of FileWaiting objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related FileWaitings from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array FileWaiting[]
	 * @throws     PropelException
	 */
	public function getFileWaitings($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileWaitings === null) {
			if ($this->isNew()) {
			   $this->collFileWaitings = array();
			} else {

				$criteria->add(FileWaitingPeer::USER_ID, $this->id);

				FileWaitingPeer::addSelectColumns($criteria);
				$this->collFileWaitings = FileWaitingPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FileWaitingPeer::USER_ID, $this->id);

				FileWaitingPeer::addSelectColumns($criteria);
				if (!isset($this->lastFileWaitingCriteria) || !$this->lastFileWaitingCriteria->equals($criteria)) {
					$this->collFileWaitings = FileWaitingPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFileWaitingCriteria = $criteria;
		return $this->collFileWaitings;
	}

	/**
	 * Returns the number of related FileWaiting objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related FileWaiting objects.
	 * @throws     PropelException
	 */
	public function countFileWaitings(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFileWaitings === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FileWaitingPeer::USER_ID, $this->id);

				$count = FileWaitingPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FileWaitingPeer::USER_ID, $this->id);

				if (!isset($this->lastFileWaitingCriteria) || !$this->lastFileWaitingCriteria->equals($criteria)) {
					$count = FileWaitingPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFileWaitings);
				}
			} else {
				$count = count($this->collFileWaitings);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a FileWaiting object to this object
	 * through the FileWaiting foreign key attribute.
	 *
	 * @param      FileWaiting $l FileWaiting
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFileWaiting(FileWaiting $l)
	{
		if ($this->collFileWaitings === null) {
			$this->initFileWaitings();
		}
		if (!in_array($l, $this->collFileWaitings, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFileWaitings, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related FileWaitings from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFileWaitingsJoinFile($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileWaitings === null) {
			if ($this->isNew()) {
				$this->collFileWaitings = array();
			} else {

				$criteria->add(FileWaitingPeer::USER_ID, $this->id);

				$this->collFileWaitings = FileWaitingPeer::doSelectJoinFile($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FileWaitingPeer::USER_ID, $this->id);

			if (!isset($this->lastFileWaitingCriteria) || !$this->lastFileWaitingCriteria->equals($criteria)) {
				$this->collFileWaitings = FileWaitingPeer::doSelectJoinFile($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileWaitingCriteria = $criteria;

		return $this->collFileWaitings;
	}

	/**
	 * Clears out the collFileRelateds collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFileRelateds()
	 */
	public function clearFileRelateds()
	{
		$this->collFileRelateds = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFileRelateds collection (array).
	 *
	 * By default this just sets the collFileRelateds collection to an empty array (like clearcollFileRelateds());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFileRelateds()
	{
		$this->collFileRelateds = array();
	}

	/**
	 * Gets an array of FileRelated objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related FileRelateds from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array FileRelated[]
	 * @throws     PropelException
	 */
	public function getFileRelateds($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileRelateds === null) {
			if ($this->isNew()) {
			   $this->collFileRelateds = array();
			} else {

				$criteria->add(FileRelatedPeer::USER_ID, $this->id);

				FileRelatedPeer::addSelectColumns($criteria);
				$this->collFileRelateds = FileRelatedPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FileRelatedPeer::USER_ID, $this->id);

				FileRelatedPeer::addSelectColumns($criteria);
				if (!isset($this->lastFileRelatedCriteria) || !$this->lastFileRelatedCriteria->equals($criteria)) {
					$this->collFileRelateds = FileRelatedPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFileRelatedCriteria = $criteria;
		return $this->collFileRelateds;
	}

	/**
	 * Returns the number of related FileRelated objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related FileRelated objects.
	 * @throws     PropelException
	 */
	public function countFileRelateds(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFileRelateds === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FileRelatedPeer::USER_ID, $this->id);

				$count = FileRelatedPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FileRelatedPeer::USER_ID, $this->id);

				if (!isset($this->lastFileRelatedCriteria) || !$this->lastFileRelatedCriteria->equals($criteria)) {
					$count = FileRelatedPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFileRelateds);
				}
			} else {
				$count = count($this->collFileRelateds);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a FileRelated object to this object
	 * through the FileRelated foreign key attribute.
	 *
	 * @param      FileRelated $l FileRelated
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFileRelated(FileRelated $l)
	{
		if ($this->collFileRelateds === null) {
			$this->initFileRelateds();
		}
		if (!in_array($l, $this->collFileRelateds, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFileRelateds, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related FileRelateds from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFileRelatedsJoinFileRelatedByFileIdTo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileRelateds === null) {
			if ($this->isNew()) {
				$this->collFileRelateds = array();
			} else {

				$criteria->add(FileRelatedPeer::USER_ID, $this->id);

				$this->collFileRelateds = FileRelatedPeer::doSelectJoinFileRelatedByFileIdTo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FileRelatedPeer::USER_ID, $this->id);

			if (!isset($this->lastFileRelatedCriteria) || !$this->lastFileRelatedCriteria->equals($criteria)) {
				$this->collFileRelateds = FileRelatedPeer::doSelectJoinFileRelatedByFileIdTo($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileRelatedCriteria = $criteria;

		return $this->collFileRelateds;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related FileRelateds from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getFileRelatedsJoinFileRelatedByFileIdFrom($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFileRelateds === null) {
			if ($this->isNew()) {
				$this->collFileRelateds = array();
			} else {

				$criteria->add(FileRelatedPeer::USER_ID, $this->id);

				$this->collFileRelateds = FileRelatedPeer::doSelectJoinFileRelatedByFileIdFrom($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FileRelatedPeer::USER_ID, $this->id);

			if (!isset($this->lastFileRelatedCriteria) || !$this->lastFileRelatedCriteria->equals($criteria)) {
				$this->collFileRelateds = FileRelatedPeer::doSelectJoinFileRelatedByFileIdFrom($criteria, $con, $join_behavior);
			}
		}
		$this->lastFileRelatedCriteria = $criteria;

		return $this->collFileRelateds;
	}

	/**
	 * Clears out the collLogUsers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLogUsers()
	 */
	public function clearLogUsers()
	{
		$this->collLogUsers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLogUsers collection (array).
	 *
	 * By default this just sets the collLogUsers collection to an empty array (like clearcollLogUsers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLogUsers()
	{
		$this->collLogUsers = array();
	}

	/**
	 * Gets an array of LogUser objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related LogUsers from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array LogUser[]
	 * @throws     PropelException
	 */
	public function getLogUsers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLogUsers === null) {
			if ($this->isNew()) {
			   $this->collLogUsers = array();
			} else {

				$criteria->add(LogUserPeer::USER_ID, $this->id);

				LogUserPeer::addSelectColumns($criteria);
				$this->collLogUsers = LogUserPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LogUserPeer::USER_ID, $this->id);

				LogUserPeer::addSelectColumns($criteria);
				if (!isset($this->lastLogUserCriteria) || !$this->lastLogUserCriteria->equals($criteria)) {
					$this->collLogUsers = LogUserPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLogUserCriteria = $criteria;
		return $this->collLogUsers;
	}

	/**
	 * Returns the number of related LogUser objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related LogUser objects.
	 * @throws     PropelException
	 */
	public function countLogUsers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLogUsers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LogUserPeer::USER_ID, $this->id);

				$count = LogUserPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LogUserPeer::USER_ID, $this->id);

				if (!isset($this->lastLogUserCriteria) || !$this->lastLogUserCriteria->equals($criteria)) {
					$count = LogUserPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collLogUsers);
				}
			} else {
				$count = count($this->collLogUsers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a LogUser object to this object
	 * through the LogUser foreign key attribute.
	 *
	 * @param      LogUser $l LogUser
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLogUser(LogUser $l)
	{
		if ($this->collLogUsers === null) {
			$this->initLogUsers();
		}
		if (!in_array($l, $this->collLogUsers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLogUsers, $l);
			$l->setUser($this);
		}
	}

	/**
	 * Clears out the collPermalinkNotificationsRelatedByUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPermalinkNotificationsRelatedByUserId()
	 */
	public function clearPermalinkNotificationsRelatedByUserId()
	{
		$this->collPermalinkNotificationsRelatedByUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPermalinkNotificationsRelatedByUserId collection (array).
	 *
	 * By default this just sets the collPermalinkNotificationsRelatedByUserId collection to an empty array (like clearcollPermalinkNotificationsRelatedByUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPermalinkNotificationsRelatedByUserId()
	{
		$this->collPermalinkNotificationsRelatedByUserId = array();
	}

	/**
	 * Gets an array of PermalinkNotification objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related PermalinkNotificationsRelatedByUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PermalinkNotification[]
	 * @throws     PropelException
	 */
	public function getPermalinkNotificationsRelatedByUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPermalinkNotificationsRelatedByUserId === null) {
			if ($this->isNew()) {
			   $this->collPermalinkNotificationsRelatedByUserId = array();
			} else {

				$criteria->add(PermalinkNotificationPeer::USER_ID, $this->id);

				PermalinkNotificationPeer::addSelectColumns($criteria);
				$this->collPermalinkNotificationsRelatedByUserId = PermalinkNotificationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PermalinkNotificationPeer::USER_ID, $this->id);

				PermalinkNotificationPeer::addSelectColumns($criteria);
				if (!isset($this->lastPermalinkNotificationRelatedByUserIdCriteria) || !$this->lastPermalinkNotificationRelatedByUserIdCriteria->equals($criteria)) {
					$this->collPermalinkNotificationsRelatedByUserId = PermalinkNotificationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPermalinkNotificationRelatedByUserIdCriteria = $criteria;
		return $this->collPermalinkNotificationsRelatedByUserId;
	}

	/**
	 * Returns the number of related PermalinkNotification objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PermalinkNotification objects.
	 * @throws     PropelException
	 */
	public function countPermalinkNotificationsRelatedByUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPermalinkNotificationsRelatedByUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PermalinkNotificationPeer::USER_ID, $this->id);

				$count = PermalinkNotificationPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PermalinkNotificationPeer::USER_ID, $this->id);

				if (!isset($this->lastPermalinkNotificationRelatedByUserIdCriteria) || !$this->lastPermalinkNotificationRelatedByUserIdCriteria->equals($criteria)) {
					$count = PermalinkNotificationPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPermalinkNotificationsRelatedByUserId);
				}
			} else {
				$count = count($this->collPermalinkNotificationsRelatedByUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PermalinkNotification object to this object
	 * through the PermalinkNotification foreign key attribute.
	 *
	 * @param      PermalinkNotification $l PermalinkNotification
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPermalinkNotificationRelatedByUserId(PermalinkNotification $l)
	{
		if ($this->collPermalinkNotificationsRelatedByUserId === null) {
			$this->initPermalinkNotificationsRelatedByUserId();
		}
		if (!in_array($l, $this->collPermalinkNotificationsRelatedByUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPermalinkNotificationsRelatedByUserId, $l);
			$l->setUserRelatedByUserId($this);
		}
	}

	/**
	 * Clears out the collPermalinkNotificationsRelatedByPermalinkId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPermalinkNotificationsRelatedByPermalinkId()
	 */
	public function clearPermalinkNotificationsRelatedByPermalinkId()
	{
		$this->collPermalinkNotificationsRelatedByPermalinkId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPermalinkNotificationsRelatedByPermalinkId collection (array).
	 *
	 * By default this just sets the collPermalinkNotificationsRelatedByPermalinkId collection to an empty array (like clearcollPermalinkNotificationsRelatedByPermalinkId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPermalinkNotificationsRelatedByPermalinkId()
	{
		$this->collPermalinkNotificationsRelatedByPermalinkId = array();
	}

	/**
	 * Gets an array of PermalinkNotification objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related PermalinkNotificationsRelatedByPermalinkId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PermalinkNotification[]
	 * @throws     PropelException
	 */
	public function getPermalinkNotificationsRelatedByPermalinkId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPermalinkNotificationsRelatedByPermalinkId === null) {
			if ($this->isNew()) {
			   $this->collPermalinkNotificationsRelatedByPermalinkId = array();
			} else {

				$criteria->add(PermalinkNotificationPeer::PERMALINK_ID, $this->id);

				PermalinkNotificationPeer::addSelectColumns($criteria);
				$this->collPermalinkNotificationsRelatedByPermalinkId = PermalinkNotificationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PermalinkNotificationPeer::PERMALINK_ID, $this->id);

				PermalinkNotificationPeer::addSelectColumns($criteria);
				if (!isset($this->lastPermalinkNotificationRelatedByPermalinkIdCriteria) || !$this->lastPermalinkNotificationRelatedByPermalinkIdCriteria->equals($criteria)) {
					$this->collPermalinkNotificationsRelatedByPermalinkId = PermalinkNotificationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPermalinkNotificationRelatedByPermalinkIdCriteria = $criteria;
		return $this->collPermalinkNotificationsRelatedByPermalinkId;
	}

	/**
	 * Returns the number of related PermalinkNotification objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PermalinkNotification objects.
	 * @throws     PropelException
	 */
	public function countPermalinkNotificationsRelatedByPermalinkId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPermalinkNotificationsRelatedByPermalinkId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PermalinkNotificationPeer::PERMALINK_ID, $this->id);

				$count = PermalinkNotificationPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PermalinkNotificationPeer::PERMALINK_ID, $this->id);

				if (!isset($this->lastPermalinkNotificationRelatedByPermalinkIdCriteria) || !$this->lastPermalinkNotificationRelatedByPermalinkIdCriteria->equals($criteria)) {
					$count = PermalinkNotificationPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPermalinkNotificationsRelatedByPermalinkId);
				}
			} else {
				$count = count($this->collPermalinkNotificationsRelatedByPermalinkId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PermalinkNotification object to this object
	 * through the PermalinkNotification foreign key attribute.
	 *
	 * @param      PermalinkNotification $l PermalinkNotification
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPermalinkNotificationRelatedByPermalinkId(PermalinkNotification $l)
	{
		if ($this->collPermalinkNotificationsRelatedByPermalinkId === null) {
			$this->initPermalinkNotificationsRelatedByPermalinkId();
		}
		if (!in_array($l, $this->collPermalinkNotificationsRelatedByPermalinkId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPermalinkNotificationsRelatedByPermalinkId, $l);
			$l->setUserRelatedByPermalinkId($this);
		}
	}

	/**
	 * Clears out the collUserHasModules collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserHasModules()
	 */
	public function clearUserHasModules()
	{
		$this->collUserHasModules = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserHasModules collection (array).
	 *
	 * By default this just sets the collUserHasModules collection to an empty array (like clearcollUserHasModules());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserHasModules()
	{
		$this->collUserHasModules = array();
	}

	/**
	 * Gets an array of UserHasModule objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related UserHasModules from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserHasModule[]
	 * @throws     PropelException
	 */
	public function getUserHasModules($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserHasModules === null) {
			if ($this->isNew()) {
			   $this->collUserHasModules = array();
			} else {

				$criteria->add(UserHasModulePeer::USER_ID, $this->id);

				UserHasModulePeer::addSelectColumns($criteria);
				$this->collUserHasModules = UserHasModulePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserHasModulePeer::USER_ID, $this->id);

				UserHasModulePeer::addSelectColumns($criteria);
				if (!isset($this->lastUserHasModuleCriteria) || !$this->lastUserHasModuleCriteria->equals($criteria)) {
					$this->collUserHasModules = UserHasModulePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserHasModuleCriteria = $criteria;
		return $this->collUserHasModules;
	}

	/**
	 * Returns the number of related UserHasModule objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserHasModule objects.
	 * @throws     PropelException
	 */
	public function countUserHasModules(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserHasModules === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserHasModulePeer::USER_ID, $this->id);

				$count = UserHasModulePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserHasModulePeer::USER_ID, $this->id);

				if (!isset($this->lastUserHasModuleCriteria) || !$this->lastUserHasModuleCriteria->equals($criteria)) {
					$count = UserHasModulePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUserHasModules);
				}
			} else {
				$count = count($this->collUserHasModules);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserHasModule object to this object
	 * through the UserHasModule foreign key attribute.
	 *
	 * @param      UserHasModule $l UserHasModule
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserHasModule(UserHasModule $l)
	{
		if ($this->collUserHasModules === null) {
			$this->initUserHasModules();
		}
		if (!in_array($l, $this->collUserHasModules, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserHasModules, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related UserHasModules from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getUserHasModulesJoinModule($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserHasModules === null) {
			if ($this->isNew()) {
				$this->collUserHasModules = array();
			} else {

				$criteria->add(UserHasModulePeer::USER_ID, $this->id);

				$this->collUserHasModules = UserHasModulePeer::doSelectJoinModule($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserHasModulePeer::USER_ID, $this->id);

			if (!isset($this->lastUserHasModuleCriteria) || !$this->lastUserHasModuleCriteria->equals($criteria)) {
				$this->collUserHasModules = UserHasModulePeer::doSelectJoinModule($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserHasModuleCriteria = $criteria;

		return $this->collUserHasModules;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related UserHasModules from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getUserHasModulesJoinModuleValue($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserHasModules === null) {
			if ($this->isNew()) {
				$this->collUserHasModules = array();
			} else {

				$criteria->add(UserHasModulePeer::USER_ID, $this->id);

				$this->collUserHasModules = UserHasModulePeer::doSelectJoinModuleValue($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserHasModulePeer::USER_ID, $this->id);

			if (!isset($this->lastUserHasModuleCriteria) || !$this->lastUserHasModuleCriteria->equals($criteria)) {
				$this->collUserHasModules = UserHasModulePeer::doSelectJoinModuleValue($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserHasModuleCriteria = $criteria;

		return $this->collUserHasModules;
	}

	/**
	 * Clears out the collBasketRequests collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBasketRequests()
	 */
	public function clearBasketRequests()
	{
		$this->collBasketRequests = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBasketRequests collection (array).
	 *
	 * By default this just sets the collBasketRequests collection to an empty array (like clearcollBasketRequests());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBasketRequests()
	{
		$this->collBasketRequests = array();
	}

	/**
	 * Gets an array of BasketRequest objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related BasketRequests from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array BasketRequest[]
	 * @throws     PropelException
	 */
	public function getBasketRequests($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBasketRequests === null) {
			if ($this->isNew()) {
			   $this->collBasketRequests = array();
			} else {

				$criteria->add(BasketRequestPeer::USER_ID, $this->id);

				BasketRequestPeer::addSelectColumns($criteria);
				$this->collBasketRequests = BasketRequestPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BasketRequestPeer::USER_ID, $this->id);

				BasketRequestPeer::addSelectColumns($criteria);
				if (!isset($this->lastBasketRequestCriteria) || !$this->lastBasketRequestCriteria->equals($criteria)) {
					$this->collBasketRequests = BasketRequestPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBasketRequestCriteria = $criteria;
		return $this->collBasketRequests;
	}

	/**
	 * Returns the number of related BasketRequest objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related BasketRequest objects.
	 * @throws     PropelException
	 */
	public function countBasketRequests(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBasketRequests === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BasketRequestPeer::USER_ID, $this->id);

				$count = BasketRequestPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BasketRequestPeer::USER_ID, $this->id);

				if (!isset($this->lastBasketRequestCriteria) || !$this->lastBasketRequestCriteria->equals($criteria)) {
					$count = BasketRequestPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collBasketRequests);
				}
			} else {
				$count = count($this->collBasketRequests);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a BasketRequest object to this object
	 * through the BasketRequest foreign key attribute.
	 *
	 * @param      BasketRequest $l BasketRequest
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBasketRequest(BasketRequest $l)
	{
		if ($this->collBasketRequests === null) {
			$this->initBasketRequests();
		}
		if (!in_array($l, $this->collBasketRequests, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBasketRequests, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related BasketRequests from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getBasketRequestsJoinBasket($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBasketRequests === null) {
			if ($this->isNew()) {
				$this->collBasketRequests = array();
			} else {

				$criteria->add(BasketRequestPeer::USER_ID, $this->id);

				$this->collBasketRequests = BasketRequestPeer::doSelectJoinBasket($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(BasketRequestPeer::USER_ID, $this->id);

			if (!isset($this->lastBasketRequestCriteria) || !$this->lastBasketRequestCriteria->equals($criteria)) {
				$this->collBasketRequests = BasketRequestPeer::doSelectJoinBasket($criteria, $con, $join_behavior);
			}
		}
		$this->lastBasketRequestCriteria = $criteria;

		return $this->collBasketRequests;
	}

	/**
	 * Clears out the collResetPasswordRequests collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResetPasswordRequests()
	 */
	public function clearResetPasswordRequests()
	{
		$this->collResetPasswordRequests = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResetPasswordRequests collection (array).
	 *
	 * By default this just sets the collResetPasswordRequests collection to an empty array (like clearcollResetPasswordRequests());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResetPasswordRequests()
	{
		$this->collResetPasswordRequests = array();
	}

	/**
	 * Gets an array of ResetPasswordRequest objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ResetPasswordRequests from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ResetPasswordRequest[]
	 * @throws     PropelException
	 */
	public function getResetPasswordRequests($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResetPasswordRequests === null) {
			if ($this->isNew()) {
			   $this->collResetPasswordRequests = array();
			} else {

				$criteria->add(ResetPasswordRequestPeer::USER_ID, $this->id);

				ResetPasswordRequestPeer::addSelectColumns($criteria);
				$this->collResetPasswordRequests = ResetPasswordRequestPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResetPasswordRequestPeer::USER_ID, $this->id);

				ResetPasswordRequestPeer::addSelectColumns($criteria);
				if (!isset($this->lastResetPasswordRequestCriteria) || !$this->lastResetPasswordRequestCriteria->equals($criteria)) {
					$this->collResetPasswordRequests = ResetPasswordRequestPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResetPasswordRequestCriteria = $criteria;
		return $this->collResetPasswordRequests;
	}

	/**
	 * Returns the number of related ResetPasswordRequest objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ResetPasswordRequest objects.
	 * @throws     PropelException
	 */
	public function countResetPasswordRequests(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResetPasswordRequests === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResetPasswordRequestPeer::USER_ID, $this->id);

				$count = ResetPasswordRequestPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResetPasswordRequestPeer::USER_ID, $this->id);

				if (!isset($this->lastResetPasswordRequestCriteria) || !$this->lastResetPasswordRequestCriteria->equals($criteria)) {
					$count = ResetPasswordRequestPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collResetPasswordRequests);
				}
			} else {
				$count = count($this->collResetPasswordRequests);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ResetPasswordRequest object to this object
	 * through the ResetPasswordRequest foreign key attribute.
	 *
	 * @param      ResetPasswordRequest $l ResetPasswordRequest
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResetPasswordRequest(ResetPasswordRequest $l)
	{
		if ($this->collResetPasswordRequests === null) {
			$this->initResetPasswordRequests();
		}
		if (!in_array($l, $this->collResetPasswordRequests, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResetPasswordRequests, $l);
			$l->setUser($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collComments) {
				foreach ((array) $this->collComments as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFavoritess) {
				foreach ((array) $this->collFavoritess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFiles) {
				foreach ((array) $this->collFiles as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFileTmps) {
				foreach ((array) $this->collFileTmps as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFolders) {
				foreach ((array) $this->collFolders as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collGroupes) {
				foreach ((array) $this->collGroupes as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLogs) {
				foreach ((array) $this->collLogs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRequests) {
				foreach ((array) $this->collRequests as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUserFolders) {
				foreach ((array) $this->collUserFolders as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUserGroups) {
				foreach ((array) $this->collUserGroups as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUserUnits) {
				foreach ((array) $this->collUserUnits as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUniqueKeys) {
				foreach ((array) $this->collUniqueKeys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUserPreferences) {
				foreach ((array) $this->collUserPreferences as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collBaskets) {
				foreach ((array) $this->collBaskets as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFileWaitings) {
				foreach ((array) $this->collFileWaitings as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFileRelateds) {
				foreach ((array) $this->collFileRelateds as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLogUsers) {
				foreach ((array) $this->collLogUsers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPermalinkNotificationsRelatedByUserId) {
				foreach ((array) $this->collPermalinkNotificationsRelatedByUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPermalinkNotificationsRelatedByPermalinkId) {
				foreach ((array) $this->collPermalinkNotificationsRelatedByPermalinkId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUserHasModules) {
				foreach ((array) $this->collUserHasModules as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collBasketRequests) {
				foreach ((array) $this->collBasketRequests as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResetPasswordRequests) {
				foreach ((array) $this->collResetPasswordRequests as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collComments = null;
		$this->collFavoritess = null;
		$this->collFiles = null;
		$this->collFileTmps = null;
		$this->collFolders = null;
		$this->collGroupes = null;
		$this->collLogs = null;
		$this->collRequests = null;
		$this->collUserFolders = null;
		$this->collUserGroups = null;
		$this->collUserUnits = null;
		$this->collUniqueKeys = null;
		$this->collUserPreferences = null;
		$this->collBaskets = null;
		$this->collFileWaitings = null;
		$this->collFileRelateds = null;
		$this->collLogUsers = null;
		$this->collPermalinkNotificationsRelatedByUserId = null;
		$this->collPermalinkNotificationsRelatedByPermalinkId = null;
		$this->collUserHasModules = null;
		$this->collBasketRequests = null;
		$this->collResetPasswordRequests = null;
			$this->aRole = null;
			$this->aCountry = null;
			$this->aCustomer = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseUser:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseUser::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseUser
